// Numbas version: exam_results_page_options
{"name": "trig + geometry", "metadata": {"description": "", "licence": "None specified"}, "duration": 0, "percentPass": 0, "showQuestionGroupNames": false, "shuffleQuestionGroups": false, "showstudentname": true, "question_groups": [{"name": "Group", "pickingStrategy": "all-ordered", "pickQuestions": 1, "questionNames": ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""], "variable_overrides": [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []], "questions": [{"name": "Trigonometry Q5 Cosine rule", "extensions": ["jsxgraph"], "custom_part_types": [], "resources": [], "navigation": {"allowregen": true, "showfrontpage": false, "preventleave": false}, "contributors": [{"name": "David Wishart", "profile_url": "https://numbas.mathcentre.ac.uk/accounts/profile/1461/"}], "parts": [{"scripts": {}, "variableReplacements": [], "showFeedbackIcon": true, "gaps": [{"precisionPartialCredit": "50", "showFeedbackIcon": true, "precisionType": "dp", "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "notationStyles": ["plain", "en", "si-en"], "minValue": "{angleA}", "mustBeReducedPC": 0, "correctAnswerFraction": false, "scripts": {}, "mustBeReduced": false, "precision": "2", "correctAnswerStyle": "plain", "strictPrecision": false, "precisionMessage": "You have not given your answer to the correct precision.", "allowFractions": false, "marks": "3", "type": "numberentry", "showPrecisionHint": false, "maxValue": "{angleA}", "showCorrectAnswer": true}, {"precisionPartialCredit": "50", "showFeedbackIcon": true, "precisionType": "dp", "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "notationStyles": ["plain", "en", "si-en"], "minValue": "{angleB}", "mustBeReducedPC": 0, "correctAnswerFraction": false, "scripts": {}, "mustBeReduced": false, "precision": "2", "correctAnswerStyle": "plain", "strictPrecision": false, "precisionMessage": "You have not given your answer to the correct precision.", "allowFractions": false, "marks": "3", "type": "numberentry", "showPrecisionHint": false, "maxValue": "{angleB}", "showCorrectAnswer": true}, {"precisionPartialCredit": "50", "showFeedbackIcon": true, "precisionType": "dp", "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "notationStyles": ["plain", "en", "si-en"], "minValue": "{angleC}", "mustBeReducedPC": 0, "correctAnswerFraction": false, "scripts": {}, "mustBeReduced": false, "precision": "2", "correctAnswerStyle": "plain", "strictPrecision": false, "precisionMessage": "You have not given your answer to the correct precision.", "allowFractions": false, "marks": "3", "type": "numberentry", "showPrecisionHint": false, "maxValue": "{angleC}", "showCorrectAnswer": true}], "marks": 0, "type": "gapfill", "prompt": "<p>{plotgraph(units,a,b,c,angleA,angleB,angleC)}</p>\n<p>What are the angles A, B and C?</p>\n<p>Please give answer to 2 decimal places</p>\n<p>A =&nbsp;[[0]] $^{\\circ}$</p>\n<p>B&nbsp;= [[1]] $^{\\circ}$</p>\n<p>C = [[2]] $^{\\circ}$</p>\n<p></p>", "variableReplacementStrategy": "originalfirst", "showCorrectAnswer": true}], "variablesTest": {"maxRuns": "200", "condition": "b-c<>0 &&\na-c>0"}, "variable_groups": [{"variables": [], "name": "Unnamed group"}], "statement": "<p>Referring to the&nbsp;triangle below.</p>", "advice": "<p>Use&nbsp;the cosine rule to find the angles.</p>", "ungrouped_variables": ["unitList", "units", "a", "angleARough", "asinA", "angleMin", "angleBmax", "bMax", "bMin", "b", "angleBRough", "angleCRough", "c", "angleA", "angleB", "angleC"], "metadata": {"description": "<p>Draws a triangle based on 3 side lengths.</p>", "licence": "Creative Commons Attribution 4.0 International"}, "tags": [], "rulesets": {}, "preamble": {"js": "", "css": ""}, "functions": {"plotgraph": {"parameters": [["units", "string"], ["a", "number"], ["b", "number"], ["c", "number"], ["angleA", "number"], ["angleB", "number"], ["angleC", "number"]], "language": "javascript", "type": "html", "definition": "// This functions plots a triangle based on three lengths\n\n//Function ot convert angles to radians\nfunction toRadians (angle) {\n  return angle * (Math.PI / 180);\n}\n\n//Calculate height of triangle\nvar h = b*Math.sin(toRadians(angleC))\n\n//Set text and graph offsets to appear uniform\nvar xOffset = Math.ceil(a/10)\nvar yOffset = Math.ceil(a/2+xOffset-h/2)\n//Consider removing scale once all adjusted correctly\nvar offset = 1;\nvar textHeight =15;\nvar scale = xOffset/2;\nvar scaleOffset = offset*scale;\nvar scaleText = textHeight*scale;\n// This functions plots two dimensioned lines \n// Max and min x and y values for the axis.\nvar x_min = 0;\nvar x_max = a+2*xOffset;\nvar y_min = 0;\nvar y_max = a+2*xOffset;\n\n//Browser compatibility\nJXG.Options.text.display = 'internal';\n//Use MathJax for LaTeX display\nJXG.Options.text.useMathJax = true;\n\n// Make the JSXGraph board.\nvar div = Numbas.extensions.jsxgraph.makeBoard(\n  '500px',\n  '500px',\n {\n   boundingBox: [0,y_max,x_max,0],\n//Change to false after testing\n   axis: false,\n }\n);\n\n// div.board is the object created by JSXGraph, which you use to manipulate elements\nvar board = div.board; \n\n/*\n//Dummy text for testing variables, remove after testing\ntempText = board.create('text',[(xOffset),(h+yOffset*1.5),\nfunction () {return 'A is ' + angleA.toFixed(4) + ' B is ' + angleB.toFixed(4) + ' C is ' + angleC.toFixed(4)}]);\ntempText2 = board.create('text',[(xOffset),(yOffset/2),\nfunction () {return 'a is ' + a + ' b is ' + b + ' c is ' + c}]);\n*/\n\n//Draw three points \nvar pA = board.create('point', [(b*Math.cos(toRadians(angleC))+xOffset), (b*Math.sin(toRadians(angleC))+yOffset)],                     \n//Make fixed:true after testing\n  {size:0, fixed:true,\n   label:{offset: [0,10]}});\nvar pB = board.create('point', [(a+xOffset), (yOffset)],\n  {size:0, fixed:true,\n  label:{offset: [10,-10]}});\nvar pC = board.create('point', [(xOffset), (yOffset)],\n  {size:0, fixed:true,\n  label:{offset: [-10,-10]}});\n\n//Draw a line between them\nvar AB = board.create('line',[pA,pB],{fixed:false, straightFirst:false, straightLast:false, strokeWidth: 1});\nvar BC = board.create('line',[pC,pB],{fixed:false, straightFirst:false, straightLast:false, strokeWidth: 1});\nvar AC = board.create('line',[pC,pA],{fixed:false, straightFirst:false, straightLast:false, strokeWidth: 1});\n\n//Draw angles\nvar ABC = board.create('nonreflexangle', [pA,pB,pC], {type:'sector', orthoType:'square', orthoSensitivity:0.4, \nradius:function() { return scale;}\n });\nvar CAB = board.create('nonreflexangle', [pC,pA,pB], {type:'sector', orthoType:'square', orthoSensitivity:0.4,\nradius:function() { return scale;}                      \n});\nvar BCA = board.create('nonreflexangle', [pB,pC,pA], {type:'sector', orthoType:'square', orthoSensitivity:0.4,\nradius:function() { return scale;}                      \n});\n\n//Blank out label for this version\nABC.label.setText('');\nCAB.label.setText('');\nBCA.label.setText('');\n\n/* Angle labels used for testing\nvar ABCLabel = ABC.label.setText(function () {\n  var angle = 180.0 * ABC.Value() / Math.PI;\n  if ((angle > 90.4) || (angle < 89.6)) {\n     return ''+angle.toFixed(2) + '\\u00B0';\n  } else {\n     return '';\n  }\n});\nABCLabel.setAttribute({anchorX:'middle'});\n\nvar CABLabel = CAB.label.setText(function () {\n  var angle = 180.0 * CAB.Value() / Math.PI;\n  if ((angle > 90.4) || (angle < 89.6)) {\n    return ''+angle.toFixed(2) + '\\u00B0';\n  } else {\n    return '';\n  }\n});\nCABLabel.setAttribute({anchorX:'middle'});\n\nvar BCALabel = BCA.label.setText(function () {\n  var angle = 180.0 * BCA.Value() / Math.PI;\n  if ((angle > 90.4) || (angle < 89.6)) {\n    return ''+angle.toFixed(2) + '\\u00B0';\n  } else {\n    return '';\n  }\n});\nBCALabel.setAttribute({anchorX:'middle'});\n*/\n\n//Set up dimension labels to be properly aligned\ntextAB = board.create('text', \n [function () {return (pA.X() + pB.X())/2},\n  function () {return ((pA.Y() + pB.Y())/2)+(scaleOffset/2)},\n  function () {return +pA.Dist(pB).toFixed(2) + ' ' + units}],\n  {fontSize:15, anchorX:'middle'});\n\ntextBC = board.create('text', \n [function () {return (pB.X() + pC.X())/2},\n  function () {return ((pB.Y() + pC.Y())/2)-scaleOffset},\n  function () {return +pB.Dist(pC).toFixed(0) + ' ' + units}],\n  {fontSize:15, anchorX:'middle'});\n\ntextAC = board.create('text', \n [function () {return (pA.X() + pC.X())/2},\n  function () {return ((pA.Y() + pC.Y())/2)+(scaleOffset/2)},\n  function () {return +pA.Dist(pC).toFixed(2) + ' ' + units}],\n  {fontSize:15, anchorX:'middle'});\n\n//Set up transform for rotating dimension labels\nvar tABRot = board.create('transform', \n [function () {return AB.getAngle()},                        \n  function () {return (pA.X() + pB.X())/2}, \n  function () {return (pA.Y() + pB.Y())/2}],\n  {type:'rotate'});\n\nvar tBCRot = board.create('transform', \n [function () {return BC.getAngle()},                        \n  function () {return (pB.X() + pC.X())/2}, \n  function () {return (pB.Y() + pC.Y())/2}],\n  {type:'rotate'});\n\n\nvar tACRot = board.create('transform', \n [function () {return AC.getAngle()},                        \n  function () {return (pA.X() + pC.X())/2}, \n  function () {return (pA.Y() + pC.Y())/2}],\n  {type:'rotate'});\n\n//Perform text rotations and update\ntABRot.bindTo(textAB);\ntBCRot.bindTo(textBC); \ntACRot.bindTo(textAC);\nboard.update();\n\nreturn div;"}}, "variables": {"angleA": {"templateType": "anything", "group": "Ungrouped variables", "description": "", "definition": "180*arccos((b^2+c^2-a^2)/(2*b*c))/PI\n", "name": "angleA"}, "angleBRough": {"templateType": "anything", "group": "Ungrouped variables", "description": "<p>angle</p>", "definition": "180*arcsin(b/asinA)/PI", "name": "angleBRough"}, "bMax": {"templateType": "anything", "group": "Ungrouped variables", "description": "", "definition": "asinA*sin(radians(angleBmax))", "name": "bMax"}, "c": {"templateType": "anything", "group": "Ungrouped variables", "description": "", "definition": "precround(((a^2+b^2-2*a*b*cos(radians(angleCRough)))^0.5),0)", "name": "c"}, "angleARough": {"templateType": "anything", "group": "Ungrouped variables", "description": "<p>Temp</p>", "definition": "random(75..120 except 89 except 90 except 91)", "name": "angleARough"}, "a": {"templateType": "anything", "group": "Ungrouped variables", "description": "", "definition": "random(5..50)", "name": "a"}, "units": {"templateType": "anything", "group": "Ungrouped variables", "description": "", "definition": "random(unitList)", "name": "units"}, "angleMin": {"templateType": "anything", "group": "Ungrouped variables", "description": "", "definition": "30\n", "name": "angleMin"}, "angleC": {"templateType": "anything", "group": "Ungrouped variables", "description": "", "definition": "180-(angleA + angleB)", "name": "angleC"}, "asinA": {"templateType": "anything", "group": "Ungrouped variables", "description": "", "definition": "a/(sin(radians(angleARough)))\n", "name": "asinA"}, "angleBmax": {"templateType": "anything", "group": "Ungrouped variables", "description": "", "definition": "150-angleARough", "name": "angleBmax"}, "unitList": {"templateType": "list of strings", "group": "Ungrouped variables", "description": "<p>Units that&nbsp;are to be used for the question.</p>", "definition": "[ \"mm\", \"cm\", \"m\", \"km\" ]", "name": "unitList"}, "angleCRough": {"templateType": "anything", "group": "Ungrouped variables", "description": "", "definition": "180-(angleARough+angleBRough)", "name": "angleCRough"}, "bMin": {"templateType": "anything", "group": "Ungrouped variables", "description": "", "definition": "asinA*sin(radians(angleMin))", "name": "bMin"}, "angleB": {"templateType": "anything", "group": "Ungrouped variables", "description": "<p>angleB</p>", "definition": "180*arccos((a^2+c^2-b^2)/(2*a*c))/PI\n", "name": "angleB"}, "b": {"templateType": "anything", "group": "Ungrouped variables", "description": "", "definition": "random(floor(bMin)..floor(bMax) except a)", "name": "b"}}, "type": "question"}, {"name": "Trigonometry Q4 Sine rule", "extensions": ["jsxgraph"], "custom_part_types": [], "resources": [], "navigation": {"allowregen": true, "showfrontpage": false, "preventleave": false}, "contributors": [{"name": "David Wishart", "profile_url": "https://numbas.mathcentre.ac.uk/accounts/profile/1461/"}], "statement": "<p>Referring to the&nbsp;triangle below.</p>", "variables": {"asinA": {"description": "", "templateType": "anything", "name": "asinA", "definition": "a/(sin(radians(angleA)))\n", "group": "Ungrouped variables"}, "c": {"description": "", "templateType": "anything", "name": "c", "definition": "asinA*sin(radians(angleC))", "group": "Ungrouped variables"}, "b": {"description": "", "templateType": "anything", "name": "b", "definition": "asinA*sin(radians(angleB))", "group": "Ungrouped variables"}, "angleB": {"description": "<p>angle</p>", "templateType": "anything", "name": "angleB", "definition": "random(30..60)", "group": "Ungrouped variables"}, "units": {"description": "", "templateType": "anything", "name": "units", "definition": "random(unitList)", "group": "Ungrouped variables"}, "unitList": {"description": "<p>Units that&nbsp;are to be used for the question.</p>", "templateType": "list of strings", "name": "unitList", "definition": "[ \"mm\", \"cm\", \"m\", \"km\" ]", "group": "Ungrouped variables"}, "angleC": {"description": "", "templateType": "anything", "name": "angleC", "definition": "random(30..60 except angleB)", "group": "Ungrouped variables"}, "a": {"description": "", "templateType": "anything", "name": "a", "definition": "random(5..50)", "group": "Ungrouped variables"}, "angleA": {"description": "", "templateType": "anything", "name": "angleA", "definition": "180-(angleB+angleC)", "group": "Ungrouped variables"}}, "tags": [], "advice": "<p>Use the sine rule to calculate the sides and the properties of a triangle to find the missing angle.</p>", "variable_groups": [{"variables": [], "name": "Unnamed group"}], "parts": [{"variableReplacementStrategy": "originalfirst", "type": "gapfill", "marks": 0, "prompt": "<p>{plotgraph(units,a,b,c,angleA,angleB,angleC)}</p>\n<p>What is the length of sides AB and AC?</p>\n<p>Please give answer to 2 decimal places</p>\n<p>AB =&nbsp;[[0]] {units}</p>\n<p>AC = [[1]] {units}</p>\n<p>What is angle C to the nearest degree?</p>\n<p>C = [[2]] $^{\\circ}$</p>", "scripts": {}, "gaps": [{"variableReplacementStrategy": "originalfirst", "precision": "2", "correctAnswerFraction": false, "marks": "3", "scripts": {}, "showPrecisionHint": false, "variableReplacements": [], "showFeedbackIcon": true, "strictPrecision": false, "allowFractions": false, "type": "numberentry", "precisionPartialCredit": "50", "precisionMessage": "You have not given your answer to the correct precision.", "notationStyles": ["plain", "en", "si-en"], "maxValue": "{c}", "correctAnswerStyle": "plain", "minValue": "{c}", "mustBeReducedPC": 0, "mustBeReduced": false, "showCorrectAnswer": true, "precisionType": "dp"}, {"variableReplacementStrategy": "originalfirst", "precision": "2", "correctAnswerFraction": false, "marks": "3", "scripts": {}, "showPrecisionHint": false, "variableReplacements": [], "showFeedbackIcon": true, "strictPrecision": false, "allowFractions": false, "type": "numberentry", "precisionPartialCredit": "50", "precisionMessage": "You have not given your answer to the correct precision.", "notationStyles": ["plain", "en", "si-en"], "maxValue": "{b}", "correctAnswerStyle": "plain", "minValue": "{b}", "mustBeReducedPC": 0, "mustBeReduced": false, "showCorrectAnswer": true, "precisionType": "dp"}, {"variableReplacementStrategy": "originalfirst", "precision": 0, "correctAnswerFraction": false, "marks": "2", "scripts": {}, "showPrecisionHint": false, "variableReplacements": [], "showFeedbackIcon": true, "strictPrecision": false, "allowFractions": false, "type": "numberentry", "precisionPartialCredit": "50", "precisionMessage": "You have not given your answer to the correct precision.", "notationStyles": ["plain", "en", "si-en"], "maxValue": "{angleC}", "correctAnswerStyle": "plain", "minValue": "{angleC}", "mustBeReducedPC": 0, "mustBeReduced": false, "showCorrectAnswer": true, "precisionType": "dp"}], "variableReplacements": [], "showFeedbackIcon": true, "showCorrectAnswer": true}], "functions": {"plotgraph": {"type": "html", "language": "javascript", "parameters": [["units", "string"], ["a", "number"], ["b", "number"], ["c", "number"], ["angleA", "number"], ["angleB", "number"], ["angleC", "number"]], "definition": "// This functions plots a triangle based on two angles and a length\n\n//Function ot convert angles to radians\nfunction toRadians (angle) {\n  return angle * (Math.PI / 180);\n}\n\n//Calculate height of triangle\nvar h = b*Math.sin(toRadians(angleC))\n\n//Set text and graph offsets to appear uniform\nvar xOffset = Math.ceil(a/10)\nvar yOffset = Math.ceil(a/2+xOffset-h/2)\n//Consider removing scale once all adjusted correctly\nvar offset = 1;\nvar textHeight =15;\nvar scale = xOffset/2;\nvar scaleOffset = offset*scale;\nvar scaleText = textHeight*scale;\n// This functions plots two dimensioned lines \n// Max and min x and y values for the axis.\nvar x_min = 0;\nvar x_max = a+2*xOffset;\nvar y_min = 0;\nvar y_max = a+2*xOffset;\n\n//Browser compatibility\nJXG.Options.text.display = 'internal';\n//Use MathJax for LaTeX display\nJXG.Options.text.useMathJax = true;\n\n// Make the JSXGraph board.\nvar div = Numbas.extensions.jsxgraph.makeBoard(\n  '500px',\n  '500px',\n {\n   boundingBox: [0,y_max,x_max,0],\n//Change to false after testing\n   axis: false,\n }\n);\n\n// div.board is the object created by JSXGraph, which you use to manipulate elements\nvar board = div.board; \n\n/*\n//Dummy text for testing variables, remove after testing\ntempText = board.create('text',[(xOffset),(h+yOffset),\nfunction () {return 'A is ' + angleA + ' B is ' + angleB + ' C is ' + angleC}]);\ntempText2 = board.create('text',[(xOffset),(yOffset/2),\nfunction () {return 'a is ' + a + ' b is ' + b + ' c is ' + c}]);\n*/\n\n//Draw three points \nvar pA = board.create('point', [(b*Math.cos(toRadians(angleC))+xOffset), (b*Math.sin(toRadians(angleC))+yOffset)],                     \n//Make fixed:true after testing\n  {size:0, fixed:true,\n   label:{offset: [0,10]}});\nvar pB = board.create('point', [(a+xOffset), (yOffset)],\n  {size:0, fixed:true,\n  label:{offset: [10,-10]}});\nvar pC = board.create('point', [(xOffset), (yOffset)],\n  {size:0, fixed:true,\n  label:{offset: [-10,-10]}});\n\n\n//Draw a line between them\nvar AB = board.create('line',[pA,pB],{fixed:false, straightFirst:false, straightLast:false, strokeWidth: 1});\nvar BC = board.create('line',[pC,pB],{fixed:false, straightFirst:false, straightLast:false, strokeWidth: 1});\nvar AC = board.create('line',[pC,pA],{fixed:false, straightFirst:false, straightLast:false, strokeWidth: 1});\n\n//Draw angle and label\n//Used in other versions of this questions\nvar ABC = board.create('nonreflexangle', [pA,pB,pC], {type:'sector', orthoType:'square', orthoSensitivity:0.4, \nradius:function() { return scale;}\n });\nvar ABCLabel = ABC.label.setText(function () {\n  var angle = 180.0 * ABC.Value() / Math.PI;\n  if ((angle > 90.4) || (angle < 89.6)) {\n     return ''+angle.toFixed(0) + '\\u00B0';\n  } else {\n     return '';\n  }\n});\nABCLabel.setAttribute({anchorX:'middle'});\n\nvar CAB = board.create('nonreflexangle', [pC,pA,pB], {type:'sector', orthoType:'square', orthoSensitivity:0.4, \nradius:function() { return scale;}                      \n});\nvar CABLabel = CAB.label.setText(function () {\n  var angle = 180.0 * CAB.Value() / Math.PI;\n  if ((angle > 90.4) || (angle < 89.6)) {\n    return ''+angle.toFixed(0) + '\\u00B0';\n  } else {\n    return '';\n  }\n});\nCABLabel.setAttribute({anchorX:'middle'});\n\n/*\nvar BCA = board.create('nonreflexangle', [pB,pC,pA], {type:'sector', orthoType:'square', orthoSensitivity:0.4, \nradius:function() { return scale;}                      \n});\nvar BCALabel = BCA.label.setText(function () {\n  var angle = 180.0 * BCA.Value() / Math.PI;\n  if ((angle > 90.4) || (angle < 89.6)) {\n    return ''+angle.toFixed(0) + '\\u00B0';\n  } else {\n    return '';\n  }\n});\nCABLabel.setAttribute({anchorX:'middle'});\n*/\n\n//Not used in this version\n/*\ntextAB = board.create('text', \n [function () {return (pA.X() + pB.X())/2},\n  function () {return ((pA.Y() + pB.Y())/2)+(scaleOffset/2)},\n  function () {return +pA.Dist(pB).toFixed(2) + ' ' + units}],\n  {fontSize:15, anchorX:'middle'});\n*/\n\n//Set up dimension labels to be properly aligned\ntextBC = board.create('text', \n [function () {return (pB.X() + pC.X())/2},\n  function () {return ((pB.Y() + pC.Y())/2)-scaleOffset},\n  function () {return +pB.Dist(pC).toFixed(0) + ' ' + units}],\n  {fontSize:15, anchorX:'middle'});\n\n/*\n//Not used in this version\ntextAC = board.create('text', \n [function () {return (pA.X() + pC.X())/2},\n  function () {return ((pA.Y() + pC.Y())/2)+(scaleOffset/2)},\n  function () {return +pA.Dist(pC).toFixed(2) + ' ' + units}],\n  {fontSize:15, anchorX:'middle'});\n\nvar tABRot = board.create('transform', \n [function () {return AB.getAngle()},                        \n  function () {return (pA.X() + pB.X())/2}, \n  function () {return (pA.Y() + pB.Y())/2}],\n  {type:'rotate'});\n*/\n\n//Set up rotation transform for label\nvar tBCRot = board.create('transform', \n [function () {return BC.getAngle()},                        \n  function () {return (pB.X() + pC.X())/2}, \n  function () {return (pB.Y() + pC.Y())/2}],\n  {type:'rotate'});\n\n/*\n//Hide this for final version\nvar tACRot = board.create('transform', \n [function () {return AC.getAngle()},                        \n  function () {return (pA.X() + pC.X())/2}, \n  function () {return (pA.Y() + pC.Y())/2}],\n  {type:'rotate'});\n*/\n\n//Perform text rotations and update\n//tABRot.bindTo(textAB);\n//Hide this for final version\ntBCRot.bindTo(textBC); \n//Hide this for final version\n//tACRot.bindTo(textAC);\nboard.update();\n\nreturn div;"}}, "variablesTest": {"maxRuns": 100, "condition": "angleA<>90"}, "preamble": {"js": "", "css": ""}, "metadata": {"description": "<p>Draws a triangle based on&nbsp;2 angles and a side length.</p>", "licence": "Creative Commons Attribution 4.0 International"}, "rulesets": {}, "ungrouped_variables": ["unitList", "units", "a", "angleB", "angleC", "angleA", "asinA", "b", "c"], "type": "question"}, {"name": "Trigonometry Q2 Right angled triangle", "extensions": ["jsxgraph"], "custom_part_types": [], "resources": [], "navigation": {"allowregen": true, "showfrontpage": false, "preventleave": false}, "contributors": [{"name": "David Wishart", "profile_url": "https://numbas.mathcentre.ac.uk/accounts/profile/1461/"}], "tags": [], "metadata": {"description": "<p>Draws a right angled triangle based on&nbsp;2 lengths.</p>", "licence": "Creative Commons Attribution 4.0 International"}, "statement": "<p>Referring to the&nbsp;triangle below.</p>", "advice": "<p>Use pythagoras theorem to find the answer.</p>", "rulesets": {}, "variables": {"min_angle": {"name": "min_angle", "group": "Ungrouped variables", "definition": "29\n\n", "description": "", "templateType": "anything"}, "c": {"name": "c", "group": "Ungrouped variables", "definition": "precround(sqrt(b^2-a^2),2)", "description": "", "templateType": "anything"}, "b": {"name": "b", "group": "Ungrouped variables", "definition": "random(b_min..b_max)", "description": "", "templateType": "anything"}, "max_angle": {"name": "max_angle", "group": "Ungrouped variables", "definition": "61", "description": "", "templateType": "anything"}, "b_min": {"name": "b_min", "group": "Ungrouped variables", "definition": "floor(a/(cos(radians(min_angle))))", "description": "", "templateType": "anything"}, "b_max": {"name": "b_max", "group": "Ungrouped variables", "definition": "ceil(a/(cos(radians(max_angle))))", "description": "", "templateType": "anything"}, "a": {"name": "a", "group": "Ungrouped variables", "definition": "random(7..50)", "description": "", "templateType": "anything"}, "units": {"name": "units", "group": "Ungrouped variables", "definition": "random(unitList)", "description": "", "templateType": "anything"}, "unitList": {"name": "unitList", "group": "Ungrouped variables", "definition": "[ safe(\"mm\"), safe(\"cm\"), safe(\"m\"), safe(\"km\") ]", "description": "<p>Units that&nbsp;are to be used for the question.</p>", "templateType": "list of strings"}}, "variablesTest": {"condition": "", "maxRuns": 100}, "ungrouped_variables": ["unitList", "units", "a", "min_angle", "max_angle", "b_max", "b_min", "b", "c"], "variable_groups": [{"name": "Unnamed group", "variables": []}], "functions": {"plotgraph": {"parameters": [["units", "string"], ["a", "number"], ["b", "number"], ["c", "number"]], "type": "html", "language": "javascript", "definition": "// This functions plots a right angled triangle based on two lengths\n\n//Set text and graph offsets to appear uniform\nvar yOffset = Math.ceil(a/10);\nvar xOffset = Math.ceil(a+2*yOffset-c/2)\n//Consider removing scale once all adjusted correctly\nvar offset = 1;\nvar textHeight =15;\nvar scale = yOffset/2;\nvar scaleOffset = offset*scale;\nvar scaleText = textHeight*scale;\n// This functions plots two dimensioned lines \n// Max and min x and y values for the axis.\nvar x_min = 0;\nvar x_max = 2*(a+2*yOffset);\nvar y_min = 0;\nvar y_max = a+2*yOffset;\n\n//Browser compatibility\nJXG.Options.text.display = 'internal';\n//Use MathJax for LaTeX display\nJXG.Options.text.useMathJax = true;\n\n// Make the JSXGraph board.\nvar div = Numbas.extensions.jsxgraph.makeBoard(\n  '800px',\n  '400px',\n {\n   boundingBox: [0,y_max,x_max,0],\n//Change to false after testing\n   axis: false,\n }\n);\n\n// div.board is the object created by JSXGraph, which you use to \n// manipulate elements\nvar board = div.board; \n\n//Draw three points \nvar A = board.create('point', [xOffset, yOffset], \n  {size:0, fixed:true,\n   label:{offset: [-10,-10]}});\nvar B = board.create('point', [xOffset, (a+yOffset)],\n  {size:0, fixed:true,\n  label:{offset: [0,10]}});\nvar C = board.create('point', [(c+xOffset), yOffset],\n  {size:0, fixed:true,\n  label:{offset: [10,0]}});\n\n//Draw a line between them\nvar AB = board.create('line',[A,B],{fixed:false, straightFirst:false, straightLast:false, strokeWidth: 1});\nvar BC = board.create('line',[B,C],{fixed:false, straightFirst:false, straightLast:false, strokeWidth: 1});\nvar AC = board.create('line',[A,C],{fixed:false, straightFirst:false, straightLast:false, strokeWidth: 1});\n\nvar CAB = board.create('nonreflexangle', [C,A,B], {type:'sector', orthoType:'square', orthoSensitivity:0.4, \nradius:function() { return scale;}                      \n});\nvar CABLabel = CAB.label.setText(function () {\n  var angle = 180.0 * CAB.Value() / Math.PI;\n  if ((angle > 90.4) || (angle < 89.6)) {\n    return ''+angle.toFixed(1) + '\\u00B0';\n  } else {\n    return '';\n  }\n});\nCABLabel.setAttribute({anchorX:'middle'});\n\n/*Dummy text for testing variables, remove after testing\ntempText = board.create('text',[(2*a),(a+yOffset),\n//  function () {return 'ABC = ' +(180.0*ABC.Value()/Math.PI).toFixed(2)+ ' degreeSymbol'}]);\nfunction () {return 'yOffset is ' + yOffset}]);\n*/\n\n//Set up dimension labels to be properly aligned\ntextAB = board.create('text', \n [function () {return (A.X() + B.X())/2},\n  function () {return ((A.Y() + B.Y())/2)+(scaleOffset/2)},\n  function () {return +A.Dist(B).toFixed(1) + ' ' + units}],\n  {fontSize:15, anchorX:'middle'});\n\ntextBC = board.create('text', \n [function () {return (B.X() + C.X())/2},\n  function () {return ((B.Y() + C.Y())/2)+(scaleOffset/2)},\n  function () {return +B.Dist(C).toFixed(1) + ' ' + units}],\n  {fontSize:15, anchorX:'middle'});\n\n/*\n//Hide this for final version\ntextAC = board.create('text', \n [function () {return (A.X() + C.X())/2},\n  function () {return ((A.Y() + C.Y())/2)-scaleOffset},\n  function () {return +A.Dist(C).toFixed(1) + ' ' + units}],\n  {fontSize:15, anchorX:'middle'});\n*/\n\nvar tABRot = board.create('transform', \n [function () {return AB.getAngle()},                        \n  function () {return (A.X() + B.X())/2}, \n  function () {return (A.Y() + B.Y())/2}],\n  {type:'rotate'});\n\nvar tBCRot = board.create('transform', \n [function () {return BC.getAngle()},                        \n  function () {return (B.X() + C.X())/2}, \n  function () {return (B.Y() + C.Y())/2}],\n  {type:'rotate'});\n\n//Perform text rotations and update\ntABRot.bindTo(textAB);\ntBCRot.bindTo(textBC); \nboard.update();\n\nreturn div;"}}, "preamble": {"js": "", "css": ""}, "parts": [{"type": "gapfill", "useCustomName": false, "customName": "", "marks": 0, "showCorrectAnswer": true, "showFeedbackIcon": true, "scripts": {}, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "adaptiveMarkingPenalty": 0, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "prompt": "<p>{plotgraph(units,a,b,c)}</p>\n<p>What is the length of side AC?</p>\n<p>Please give answer to 2 decimal places</p>\n<p>AC =&nbsp;[[0]] {units}</p>", "gaps": [{"type": "numberentry", "useCustomName": false, "customName": "", "marks": "2", "showCorrectAnswer": true, "showFeedbackIcon": true, "scripts": {}, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "adaptiveMarkingPenalty": 0, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "minValue": "{c}", "maxValue": "{c}", "correctAnswerFraction": false, "allowFractions": false, "mustBeReduced": false, "mustBeReducedPC": 0, "precisionType": "dp", "precision": "2", "precisionPartialCredit": "50", "precisionMessage": "You have not given your answer to the correct precision.", "strictPrecision": false, "showPrecisionHint": false, "notationStyles": ["plain", "en", "si-en"], "correctAnswerStyle": "plain"}], "sortAnswers": false}]}, {"name": "Trigonometry Q3 Right angled triangle", "extensions": ["jsxgraph"], "custom_part_types": [], "resources": [], "navigation": {"allowregen": true, "showfrontpage": false, "preventleave": false}, "contributors": [{"name": "David Wishart", "profile_url": "https://numbas.mathcentre.ac.uk/accounts/profile/1461/"}], "variables": {"units": {"templateType": "anything", "definition": "random(unitList)", "description": "", "group": "Ungrouped variables", "name": "units"}, "unitList": {"templateType": "list of strings", "definition": "[ \"mm\", \"cm\", \"m\", \"km\" ]", "description": "<p>Units that&nbsp;are to be used for the question.</p>", "group": "Ungrouped variables", "name": "unitList"}, "c": {"templateType": "anything", "definition": "precround(a*tan(radians(angleB)),5)", "description": "", "group": "Ungrouped variables", "name": "c"}, "b": {"templateType": "anything", "definition": "precround(sqrt(a^2+c^2),2)", "description": "", "group": "Ungrouped variables", "name": "b"}, "angleC": {"templateType": "anything", "definition": "90-angleB", "description": "", "group": "Ungrouped variables", "name": "angleC"}, "angleB": {"templateType": "anything", "definition": "random(30..60)", "description": "<p>angle</p>", "group": "Ungrouped variables", "name": "angleB"}, "a": {"templateType": "anything", "definition": "random(5..50)", "description": "", "group": "Ungrouped variables", "name": "a"}}, "statement": "<p>Referring to the&nbsp;triangle below.</p>", "parts": [{"prompt": "<p>{plotgraph(units,a,b,c,angleB,angleC)}</p>\n<p>What is the length of sides AC and BC?</p>\n<p>Please give answer to 2 decimal places</p>\n<p>AC =&nbsp;[[0]] {units}</p>\n<p>BC = [[1]] {units}</p>\n<p>What is angle C?</p>\n<p>Please give answer to nearest&nbsp;whole degree</p>\n<p>C = [[2]] $^{\\circ}$</p>", "marks": 0, "gaps": [{"precisionType": "dp", "notationStyles": ["plain", "en", "si-en"], "minValue": "{c}", "showCorrectAnswer": true, "type": "numberentry", "precisionMessage": "You have not given your answer to the correct precision.", "mustBeReducedPC": 0, "precisionPartialCredit": "50", "maxValue": "{c}", "correctAnswerFraction": false, "precision": "2", "mustBeReduced": false, "strictPrecision": false, "marks": "2", "showPrecisionHint": false, "variableReplacementStrategy": "originalfirst", "correctAnswerStyle": "plain", "variableReplacements": [], "showFeedbackIcon": true, "scripts": {}, "allowFractions": false}, {"precisionType": "dp", "notationStyles": ["plain", "en", "si-en"], "minValue": "{b}", "showCorrectAnswer": true, "type": "numberentry", "precisionMessage": "You have not given your answer to the correct precision.", "mustBeReducedPC": 0, "precisionPartialCredit": "50", "maxValue": "{b}", "correctAnswerFraction": false, "precision": "2", "mustBeReduced": false, "strictPrecision": false, "marks": "2", "showPrecisionHint": false, "variableReplacementStrategy": "originalfirst", "correctAnswerStyle": "plain", "variableReplacements": [], "showFeedbackIcon": true, "scripts": {}, "allowFractions": false}, {"precisionType": "dp", "notationStyles": ["plain", "en", "si-en"], "minValue": "{angleC}", "showCorrectAnswer": true, "type": "numberentry", "precisionMessage": "You have not given your answer to the correct precision.", "mustBeReducedPC": 0, "precisionPartialCredit": 0, "maxValue": "{angleC}", "correctAnswerFraction": false, "precision": "0", "mustBeReduced": false, "strictPrecision": false, "marks": 1, "showPrecisionHint": false, "variableReplacementStrategy": "originalfirst", "correctAnswerStyle": "plain", "variableReplacements": [], "showFeedbackIcon": true, "scripts": {}, "allowFractions": false}], "variableReplacementStrategy": "originalfirst", "type": "gapfill", "variableReplacements": [], "showFeedbackIcon": true, "scripts": {}, "showCorrectAnswer": true}], "metadata": {"licence": "Creative Commons Attribution 4.0 International", "description": "<p>Draws a right angled triangle based on a length and an angle.</p>"}, "variablesTest": {"maxRuns": 100, "condition": ""}, "tags": [], "functions": {"plotgraph": {"type": "html", "parameters": [["units", "string"], ["a", "number"], ["b", "number"], ["c", "number"], ["angleB", "number"], ["angleC", "number"]], "definition": "// This functions plots a right angled triangle based on a length and an angle\n\n//Set text and graph offsets to appear uniform\nvar yOffset = Math.ceil(a/10);\nvar xOffset = Math.ceil(a+2*yOffset-c/2)\n//Consider removing scale once all adjusted correctly\nvar offset = 1;\nvar textHeight =15;\nvar scale = yOffset/2;\nvar scaleOffset = offset*scale;\nvar scaleText = textHeight*scale;\n// This functions plots two dimensioned lines \n// Max and min x and y values for the axis.\nvar x_min = 0;\nvar x_max = 2*(a+2*yOffset);\nvar y_min = 0;\nvar y_max = a+2*yOffset;\n\n//Browser compatibility\nJXG.Options.text.display = 'internal';\n//Use MathJax for LaTeX display\nJXG.Options.text.useMathJax = true;\n\n// Make the JSXGraph board.\nvar div = Numbas.extensions.jsxgraph.makeBoard(\n  '800px',\n  '400px',\n {\n   boundingBox: [0,y_max,x_max,0],\n//Change to false after testing\n   axis: false,\n }\n);\n\n// div.board is the object created by JSXGraph, which you use to \n// manipulate elements\nvar board = div.board; \n\n//Draw three points \nvar A = board.create('point', [(c+xOffset), (a+yOffset)], \n  {size:0, fixed:true,\n   label:{offset: [10,10]}});\nvar B = board.create('point', [(c+xOffset), (yOffset)],\n  {size:0, fixed:true,\n  label:{offset: [10,-10]}});\nvar C = board.create('point', [(xOffset), (a+yOffset)],\n//Make fixed:true after testing\n  {size:0, fixed:false,\n  label:{offset: [-15,0]}});\n\n//Draw a line between them\nvar AB = board.create('line',[A,B],{fixed:false, straightFirst:false, straightLast:false, strokeWidth: 1});\nvar BC = board.create('line',[C,B],{fixed:false, straightFirst:false, straightLast:false, strokeWidth: 1});\nvar AC = board.create('line',[C,A],{fixed:false, straightFirst:false, straightLast:false, strokeWidth: 1});\n\n//Draw angle and label\n\n//Used in other versions of this questions\nvar ABC = board.create('nonreflexangle', [A,B,C], {type:'sector', orthoType:'square', orthoSensitivity:0.4, \nradius:function() { return scale;}\n });\nvar ABCLabel = ABC.label.setText(function () {\n  var angle = 180.0 * ABC.Value() / Math.PI;\n  if ((angle > 90.4) || (angle < 89.6)) {\n     return ''+angle.toFixed(0) + '\\u00B0';\n  } else {\n     return '';\n  }\n});\nABCLabel.setAttribute({anchorX:'middle'});\n\nvar CAB = board.create('nonreflexangle', [C,A,B], {type:'sector', orthoType:'square', orthoSensitivity:0.4, \nradius:function() { return scale;}                      \n});\nvar CABLabel = CAB.label.setText(function () {\n  var angle = 180.0 * CAB.Value() / Math.PI;\n  if ((angle > 90.4) || (angle < 89.6)) {\n    return ''+angle.toFixed(1) + '\\u00B0';\n  } else {\n    return '';\n  }\n});\nCABLabel.setAttribute({anchorX:'middle'});\n\n/*\n//Dummy text for testing variables, remove after testing\ntempText = board.create('text',[(yOffset),(yOffset),\n//  function () {return 'ABC = ' +(180.0*ABC.Value()/Math.PI).toFixed(2)+ ' degreeSymbol'}]);\nfunction () {return 'yOffset is ' + yOffset}]);\n*/\n\n//Set up dimension labels to be properly aligned\ntextAB = board.create('text', \n [function () {return (A.X() + B.X())/2},\n  function () {return ((A.Y() + B.Y())/2)+(scaleOffset/2)},\n  function () {return +A.Dist(B).toFixed(1) + ' ' + units}],\n  {fontSize:15, anchorX:'middle'});\n\n/*\n//Hide this for final version\ntextBC = board.create('text', \n [function () {return (B.X() + C.X())/2},\n  function () {return ((B.Y() + C.Y())/2)-scaleOffset},\n  function () {return +B.Dist(C).toFixed(1) + ' ' + units}],\n  {fontSize:15, anchorX:'middle'});\n\n//Hide this for final version\ntextAC = board.create('text', \n [function () {return (A.X() + C.X())/2},\n  function () {return ((A.Y() + C.Y())/2)+(scaleOffset/2)},\n  function () {return +A.Dist(C).toFixed(1) + ' ' + units}],\n  {fontSize:15, anchorX:'middle'});\n*/\n\nvar tABRot = board.create('transform', \n [function () {return AB.getAngle()},                        \n  function () {return (A.X() + B.X())/2}, \n  function () {return (A.Y() + B.Y())/2}],\n  {type:'rotate'});\n\n/*\n//Hide this for final version\nvar tBCRot = board.create('transform', \n [function () {return BC.getAngle()},                        \n  function () {return (B.X() + C.X())/2}, \n  function () {return (B.Y() + C.Y())/2}],\n  {type:'rotate'});\n\n//Hide this for final version\nvar tACRot = board.create('transform', \n [function () {return AC.getAngle()},                        \n  function () {return (A.X() + C.X())/2}, \n  function () {return (A.Y() + C.Y())/2}],\n  {type:'rotate'});\n*/\n\n//Perform text rotations and update\ntABRot.bindTo(textAB);\n//Hide this for final version\n//tBCRot.bindTo(textBC); \n//Hide this for final version\n//tACRot.bindTo(textAC);\nboard.update();\n\nreturn div;", "language": "javascript"}}, "preamble": {"css": "", "js": ""}, "variable_groups": [{"variables": [], "name": "Unnamed group"}], "advice": "<p>Use SOHCAHTOA to relate the sides and angles.</p>", "rulesets": {}, "ungrouped_variables": ["unitList", "units", "a", "angleB", "c", "b", "angleC"], "type": "question"}, {"name": "Trigonometry Q3 (Right angled triangle)", "extensions": ["jsxgraph"], "custom_part_types": [], "resources": [], "navigation": {"allowregen": true, "showfrontpage": false, "preventleave": false}, "contributors": [{"name": "Michael Proudman", "profile_url": "https://numbas.mathcentre.ac.uk/accounts/profile/269/"}, {"name": "David Wishart", "profile_url": "https://numbas.mathcentre.ac.uk/accounts/profile/1461/"}], "metadata": {"description": "<p>Draws a right angled triangle based on a length and an angle.</p>", "licence": "Creative Commons Attribution 4.0 International"}, "variables": {"unitList": {"definition": "[ \"mm\", \"cm\", \"m\", \"km\" ]", "description": "<p>Units that&nbsp;are to be used for the question.</p>", "group": "Ungrouped variables", "templateType": "list of strings", "name": "unitList"}, "units": {"definition": "random(unitList)", "description": "", "group": "Ungrouped variables", "templateType": "anything", "name": "units"}, "c": {"definition": "precround(a*tan(radians(angleB)),5)", "description": "", "group": "Ungrouped variables", "templateType": "anything", "name": "c"}, "b": {"definition": "precround(sqrt(a^2+c^2),2)", "description": "", "group": "Ungrouped variables", "templateType": "anything", "name": "b"}, "angleC": {"definition": "90-angleB", "description": "", "group": "Ungrouped variables", "templateType": "anything", "name": "angleC"}, "angleB": {"definition": "random(30..60)", "description": "<p>angle</p>", "group": "Ungrouped variables", "templateType": "anything", "name": "angleB"}, "a": {"definition": "random(5..50)", "description": "", "group": "Ungrouped variables", "templateType": "anything", "name": "a"}}, "advice": "<p>Use SOHCAHTOA to relate the sides and angles.</p>", "ungrouped_variables": ["unitList", "units", "a", "angleB", "c", "b", "angleC"], "rulesets": {}, "preamble": {"css": "", "js": ""}, "tags": [], "variable_groups": [{"variables": [], "name": "Unnamed group"}], "statement": "<p>Referring to the&nbsp;triangle below.</p>", "variablesTest": {"condition": "", "maxRuns": 100}, "parts": [{"type": "gapfill", "marks": 0, "gaps": [{"type": "numberentry", "notationStyles": ["plain", "en", "si-en"], "correctAnswerFraction": false, "strictPrecision": false, "variableReplacementStrategy": "originalfirst", "maxValue": "{c}", "marks": "2", "showFeedbackIcon": true, "mustBeReducedPC": 0, "minValue": "{c}", "mustBeReduced": false, "showCorrectAnswer": true, "precisionType": "dp", "correctAnswerStyle": "plain", "precisionMessage": "You have not given your answer to the correct precision.", "precision": "2", "showPrecisionHint": false, "variableReplacements": [], "scripts": {}, "allowFractions": false, "precisionPartialCredit": "50"}, {"type": "numberentry", "notationStyles": ["plain", "en", "si-en"], "correctAnswerFraction": false, "strictPrecision": false, "variableReplacementStrategy": "originalfirst", "maxValue": "{b}", "marks": "2", "showFeedbackIcon": true, "mustBeReducedPC": 0, "minValue": "{b}", "mustBeReduced": false, "showCorrectAnswer": true, "precisionType": "dp", "correctAnswerStyle": "plain", "precisionMessage": "You have not given your answer to the correct precision.", "precision": "2", "showPrecisionHint": false, "variableReplacements": [], "scripts": {}, "allowFractions": false, "precisionPartialCredit": "50"}, {"type": "numberentry", "notationStyles": ["plain", "en", "si-en"], "correctAnswerFraction": false, "strictPrecision": false, "variableReplacementStrategy": "originalfirst", "maxValue": "{angleC}", "marks": 1, "showFeedbackIcon": true, "mustBeReducedPC": 0, "minValue": "{angleC}", "mustBeReduced": false, "showCorrectAnswer": true, "precisionType": "dp", "correctAnswerStyle": "plain", "precisionMessage": "You have not given your answer to the correct precision.", "precision": "0", "showPrecisionHint": false, "variableReplacements": [], "scripts": {}, "allowFractions": false, "precisionPartialCredit": 0}], "variableReplacementStrategy": "originalfirst", "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "scripts": {}, "prompt": "<p>{plotgraph(units,a,b,c,angleB,angleC)}</p>\n<p>What is the length of sides AC and BC?</p>\n<p>Please give answer to 2 decimal places</p>\n<p>AC =&nbsp;[[0]] {units}</p>\n<p>BC = [[1]] {units}</p>\n<p>What is angle C?</p>\n<p>Please give answer to nearest&nbsp;whole degree</p>\n<p>C = [[2]] $^{\\circ}$</p>"}], "functions": {"plotgraph": {"type": "html", "definition": "// This functions plots a right angled triangle based on a length and an angle\n\n//Set text and graph offsets to appear uniform\nvar yOffset = Math.ceil(a/10);\nvar xOffset = Math.ceil(a+2*yOffset-c/2)\n//Consider removing scale once all adjusted correctly\nvar offset = 1;\nvar textHeight =15;\nvar scale = yOffset/2;\nvar scaleOffset = offset*scale;\nvar scaleText = textHeight*scale;\n// This functions plots two dimensioned lines \n// Max and min x and y values for the axis.\nvar x_min = 0;\nvar x_max = 2*(a+2*yOffset);\nvar y_min = 0;\nvar y_max = a+2*yOffset;\n\n//Browser compatibility\nJXG.Options.text.display = 'internal';\n//Use MathJax for LaTeX display\nJXG.Options.text.useMathJax = true;\n\n// Make the JSXGraph board.\nvar div = Numbas.extensions.jsxgraph.makeBoard(\n  '800px',\n  '400px',\n {\n   boundingBox: [0,y_max,x_max,0],\n//Change to false after testing\n   axis: false,\n }\n);\n\n// div.board is the object created by JSXGraph, which you use to \n// manipulate elements\nvar board = div.board; \n\n//Draw three points \nvar A = board.create('point', [(c+xOffset), (a+yOffset)], \n  {size:0, fixed:true,\n   label:{offset: [10,10]}});\nvar B = board.create('point', [(c+xOffset), (yOffset)],\n  {size:0, fixed:true,\n  label:{offset: [10,-10]}});\nvar C = board.create('point', [(xOffset), (a+yOffset)],\n//Make fixed:true after testing\n  {size:0, fixed:false,\n  label:{offset: [-15,0]}});\n\n//Draw a line between them\nvar AB = board.create('line',[A,B],{fixed:false, straightFirst:false, straightLast:false, strokeWidth: 1});\nvar BC = board.create('line',[C,B],{fixed:false, straightFirst:false, straightLast:false, strokeWidth: 1});\nvar AC = board.create('line',[C,A],{fixed:false, straightFirst:false, straightLast:false, strokeWidth: 1});\n\n//Draw angle and label\n\n//Used in other versions of this questions\nvar ABC = board.create('nonreflexangle', [A,B,C], {type:'sector', orthoType:'square', orthoSensitivity:0.4, \nradius:function() { return scale;}\n });\nvar ABCLabel = ABC.label.setText(function () {\n  var angle = 180.0 * ABC.Value() / Math.PI;\n  if ((angle > 90.4) || (angle < 89.6)) {\n     return ''+angle.toFixed(0) + '\\u00B0';\n  } else {\n     return '';\n  }\n});\nABCLabel.setAttribute({anchorX:'middle'});\n\nvar CAB = board.create('nonreflexangle', [C,A,B], {type:'sector', orthoType:'square', orthoSensitivity:0.4, \nradius:function() { return scale;}                      \n});\nvar CABLabel = CAB.label.setText(function () {\n  var angle = 180.0 * CAB.Value() / Math.PI;\n  if ((angle > 90.4) || (angle < 89.6)) {\n    return ''+angle.toFixed(1) + '\\u00B0';\n  } else {\n    return '';\n  }\n});\nCABLabel.setAttribute({anchorX:'middle'});\n\n/*\n//Dummy text for testing variables, remove after testing\ntempText = board.create('text',[(yOffset),(yOffset),\n//  function () {return 'ABC = ' +(180.0*ABC.Value()/Math.PI).toFixed(2)+ ' degreeSymbol'}]);\nfunction () {return 'yOffset is ' + yOffset}]);\n*/\n\n//Set up dimension labels to be properly aligned\ntextAB = board.create('text', \n [function () {return (A.X() + B.X())/2},\n  function () {return ((A.Y() + B.Y())/2)+(scaleOffset/2)},\n  function () {return +A.Dist(B).toFixed(1) + ' ' + units}],\n  {fontSize:15, anchorX:'middle'});\n\n/*\n//Hide this for final version\ntextBC = board.create('text', \n [function () {return (B.X() + C.X())/2},\n  function () {return ((B.Y() + C.Y())/2)-scaleOffset},\n  function () {return +B.Dist(C).toFixed(1) + ' ' + units}],\n  {fontSize:15, anchorX:'middle'});\n\n//Hide this for final version\ntextAC = board.create('text', \n [function () {return (A.X() + C.X())/2},\n  function () {return ((A.Y() + C.Y())/2)+(scaleOffset/2)},\n  function () {return +A.Dist(C).toFixed(1) + ' ' + units}],\n  {fontSize:15, anchorX:'middle'});\n*/\n\nvar tABRot = board.create('transform', \n [function () {return AB.getAngle()},                        \n  function () {return (A.X() + B.X())/2}, \n  function () {return (A.Y() + B.Y())/2}],\n  {type:'rotate'});\n\n/*\n//Hide this for final version\nvar tBCRot = board.create('transform', \n [function () {return BC.getAngle()},                        \n  function () {return (B.X() + C.X())/2}, \n  function () {return (B.Y() + C.Y())/2}],\n  {type:'rotate'});\n\n//Hide this for final version\nvar tACRot = board.create('transform', \n [function () {return AC.getAngle()},                        \n  function () {return (A.X() + C.X())/2}, \n  function () {return (A.Y() + C.Y())/2}],\n  {type:'rotate'});\n*/\n\n//Perform text rotations and update\ntABRot.bindTo(textAB);\n//Hide this for final version\n//tBCRot.bindTo(textBC); \n//Hide this for final version\n//tACRot.bindTo(textAC);\nboard.update();\n\nreturn div;", "parameters": [["units", "string"], ["a", "number"], ["b", "number"], ["c", "number"], ["angleB", "number"], ["angleC", "number"]], "language": "javascript"}}, "type": "question"}, {"name": "Trigonometry to Find Missing Length (Right Angled Triangle)", "extensions": ["jsxgraph"], "custom_part_types": [], "resources": [], "navigation": {"allowregen": true, "showfrontpage": false, "preventleave": false}, "contributors": [{"name": "Michael Proudman", "profile_url": "https://numbas.mathcentre.ac.uk/accounts/profile/269/"}, {"name": "Gareth Woods", "profile_url": "https://numbas.mathcentre.ac.uk/accounts/profile/978/"}], "metadata": {"description": "<p>Draws a right angled triangle based on a length and an angle.</p>", "licence": "Creative Commons Attribution 4.0 International"}, "variables": {"unitList": {"definition": "[ \"mm\", \"cm\", \"m\", \"km\" ]", "description": "<p>Units that&nbsp;are to be used for the question.</p>", "group": "Ungrouped variables", "templateType": "list of strings", "name": "unitList"}, "units": {"definition": "random(unitList)", "description": "", "group": "Ungrouped variables", "templateType": "anything", "name": "units"}, "c": {"definition": "precround(a*tan(radians(angleB)),5)", "description": "", "group": "Ungrouped variables", "templateType": "anything", "name": "c"}, "b": {"definition": "precround(sqrt(a^2+c^2),2)", "description": "", "group": "Ungrouped variables", "templateType": "anything", "name": "b"}, "angleC": {"definition": "90-angleB", "description": "", "group": "Ungrouped variables", "templateType": "anything", "name": "angleC"}, "angleB": {"definition": "random(30..60)", "description": "<p>angle</p>", "group": "Ungrouped variables", "templateType": "anything", "name": "angleB"}, "a": {"definition": "random(5..50)", "description": "", "group": "Ungrouped variables", "templateType": "anything", "name": "a"}}, "advice": "<p>Use SOHCAHTOA to relate the sides and angles.</p>", "ungrouped_variables": ["unitList", "units", "a", "angleB", "c", "b", "angleC"], "rulesets": {}, "preamble": {"css": "", "js": ""}, "tags": [], "variable_groups": [{"variables": [], "name": "Unnamed group"}], "statement": "<p>Referring to the&nbsp;triangle below.</p>", "variablesTest": {"condition": "", "maxRuns": 100}, "parts": [{"type": "gapfill", "showCorrectAnswer": true, "gaps": [{"correctAnswerFraction": false, "precision": "2", "scripts": {}, "strictPrecision": false, "variableReplacementStrategy": "originalfirst", "maxValue": "{c}", "marks": "2", "showFeedbackIcon": true, "mustBeReducedPC": 0, "minValue": "{c}", "mustBeReduced": false, "showCorrectAnswer": true, "precisionType": "dp", "correctAnswerStyle": "plain", "type": "numberentry", "precisionMessage": "You have not given your answer to the correct precision.", "showPrecisionHint": false, "variableReplacements": [], "notationStyles": ["plain", "en", "si-en"], "allowFractions": false, "precisionPartialCredit": "50"}, {"correctAnswerFraction": false, "precision": "2", "scripts": {}, "strictPrecision": false, "variableReplacementStrategy": "originalfirst", "maxValue": "{b}", "marks": "2", "showFeedbackIcon": true, "mustBeReducedPC": 0, "minValue": "{b}", "mustBeReduced": false, "showCorrectAnswer": true, "precisionType": "dp", "correctAnswerStyle": "plain", "type": "numberentry", "precisionMessage": "You have not given your answer to the correct precision.", "showPrecisionHint": false, "variableReplacements": [], "notationStyles": ["plain", "en", "si-en"], "allowFractions": false, "precisionPartialCredit": "50"}, {"correctAnswerFraction": false, "precision": "0", "scripts": {}, "strictPrecision": false, "variableReplacementStrategy": "originalfirst", "maxValue": "{angleC}", "marks": 1, "showFeedbackIcon": true, "mustBeReducedPC": 0, "minValue": "{angleC}", "mustBeReduced": false, "showCorrectAnswer": true, "precisionType": "dp", "correctAnswerStyle": "plain", "type": "numberentry", "precisionMessage": "You have not given your answer to the correct precision.", "showPrecisionHint": false, "variableReplacements": [], "notationStyles": ["plain", "en", "si-en"], "allowFractions": false, "precisionPartialCredit": 0}], "variableReplacementStrategy": "originalfirst", "marks": 0, "showFeedbackIcon": true, "variableReplacements": [], "scripts": {}, "prompt": "<p>{plotgraph(units,a,b,c,angleB,angleC)}</p>\n<p>What is the length of sides AC and BC?</p>\n<p>Please give answer to 2 decimal places</p>\n<p>AC =&nbsp;[[0]] {units}</p>\n<p>BC = [[1]] {units}</p>\n<p>What is angle C?</p>\n<p>Please give answer to nearest&nbsp;whole degree</p>\n<p>C = [[2]] $^{\\circ}$</p>"}], "functions": {"plotgraph": {"definition": "// This functions plots a right angled triangle based on a length and an angle\n\n//Set text and graph offsets to appear uniform\nvar yOffset = Math.ceil(a/10);\nvar xOffset = Math.ceil(a+2*yOffset-c/2)\n//Consider removing scale once all adjusted correctly\nvar offset = 1;\nvar textHeight =15;\nvar scale = yOffset/2;\nvar scaleOffset = offset*scale;\nvar scaleText = textHeight*scale;\n// This functions plots two dimensioned lines \n// Max and min x and y values for the axis.\nvar x_min = 0;\nvar x_max = 2*(a+2*yOffset);\nvar y_min = 0;\nvar y_max = a+2*yOffset;\n\n//Browser compatibility\nJXG.Options.text.display = 'internal';\n//Use MathJax for LaTeX display\nJXG.Options.text.useMathJax = true;\n\n// Make the JSXGraph board.\nvar div = Numbas.extensions.jsxgraph.makeBoard(\n  '800px',\n  '400px',\n {\n   boundingBox: [0,y_max,x_max,0],\n//Change to false after testing\n   axis: false,\n }\n);\n\n// div.board is the object created by JSXGraph, which you use to \n// manipulate elements\nvar board = div.board; \n\n//Draw three points \nvar A = board.create('point', [(c+xOffset), (a+yOffset)], \n  {size:0, fixed:true,\n   label:{offset: [10,10]}});\nvar B = board.create('point', [(c+xOffset), (yOffset)],\n  {size:0, fixed:true,\n  label:{offset: [10,-10]}});\nvar C = board.create('point', [(xOffset), (a+yOffset)],\n//Make fixed:true after testing\n  {size:0, fixed:false,\n  label:{offset: [-15,0]}});\n\n//Draw a line between them\nvar AB = board.create('line',[A,B],{fixed:false, straightFirst:false, straightLast:false, strokeWidth: 1});\nvar BC = board.create('line',[C,B],{fixed:false, straightFirst:false, straightLast:false, strokeWidth: 1});\nvar AC = board.create('line',[C,A],{fixed:false, straightFirst:false, straightLast:false, strokeWidth: 1});\n\n//Draw angle and label\n\n//Used in other versions of this questions\nvar ABC = board.create('nonreflexangle', [A,B,C], {type:'sector', orthoType:'square', orthoSensitivity:0.4, \nradius:function() { return scale;}\n });\nvar ABCLabel = ABC.label.setText(function () {\n  var angle = 180.0 * ABC.Value() / Math.PI;\n  if ((angle > 90.4) || (angle < 89.6)) {\n     return ''+angle.toFixed(0) + '\\u00B0';\n  } else {\n     return '';\n  }\n});\nABCLabel.setAttribute({anchorX:'middle'});\n\nvar CAB = board.create('nonreflexangle', [C,A,B], {type:'sector', orthoType:'square', orthoSensitivity:0.4, \nradius:function() { return scale;}                      \n});\nvar CABLabel = CAB.label.setText(function () {\n  var angle = 180.0 * CAB.Value() / Math.PI;\n  if ((angle > 90.4) || (angle < 89.6)) {\n    return ''+angle.toFixed(1) + '\\u00B0';\n  } else {\n    return '';\n  }\n});\nCABLabel.setAttribute({anchorX:'middle'});\n\n/*\n//Dummy text for testing variables, remove after testing\ntempText = board.create('text',[(yOffset),(yOffset),\n//  function () {return 'ABC = ' +(180.0*ABC.Value()/Math.PI).toFixed(2)+ ' degreeSymbol'}]);\nfunction () {return 'yOffset is ' + yOffset}]);\n*/\n\n//Set up dimension labels to be properly aligned\ntextAB = board.create('text', \n [function () {return (A.X() + B.X())/2},\n  function () {return ((A.Y() + B.Y())/2)+(scaleOffset/2)},\n  function () {return +A.Dist(B).toFixed(1) + ' ' + units}],\n  {fontSize:15, anchorX:'middle'});\n\n/*\n//Hide this for final version\ntextBC = board.create('text', \n [function () {return (B.X() + C.X())/2},\n  function () {return ((B.Y() + C.Y())/2)-scaleOffset},\n  function () {return +B.Dist(C).toFixed(1) + ' ' + units}],\n  {fontSize:15, anchorX:'middle'});\n\n//Hide this for final version\ntextAC = board.create('text', \n [function () {return (A.X() + C.X())/2},\n  function () {return ((A.Y() + C.Y())/2)+(scaleOffset/2)},\n  function () {return +A.Dist(C).toFixed(1) + ' ' + units}],\n  {fontSize:15, anchorX:'middle'});\n*/\n\nvar tABRot = board.create('transform', \n [function () {return AB.getAngle()},                        \n  function () {return (A.X() + B.X())/2}, \n  function () {return (A.Y() + B.Y())/2}],\n  {type:'rotate'});\n\n/*\n//Hide this for final version\nvar tBCRot = board.create('transform', \n [function () {return BC.getAngle()},                        \n  function () {return (B.X() + C.X())/2}, \n  function () {return (B.Y() + C.Y())/2}],\n  {type:'rotate'});\n\n//Hide this for final version\nvar tACRot = board.create('transform', \n [function () {return AC.getAngle()},                        \n  function () {return (A.X() + C.X())/2}, \n  function () {return (A.Y() + C.Y())/2}],\n  {type:'rotate'});\n*/\n\n//Perform text rotations and update\ntABRot.bindTo(textAB);\n//Hide this for final version\n//tBCRot.bindTo(textBC); \n//Hide this for final version\n//tACRot.bindTo(textAC);\nboard.update();\n\nreturn div;", "type": "html", "parameters": [["units", "string"], ["a", "number"], ["b", "number"], ["c", "number"], ["angleB", "number"], ["angleC", "number"]], "language": "javascript"}}, "type": "question"}, {"name": "Michael's copy of Right-triangle trigonometry", "extensions": ["jsxgraph"], "custom_part_types": [], "resources": [], "navigation": {"allowregen": true, "showfrontpage": false, "preventleave": false}, "contributors": [{"name": "Michael Proudman", "profile_url": "https://numbas.mathcentre.ac.uk/accounts/profile/269/"}, {"name": "Angharad Thomas", "profile_url": "https://numbas.mathcentre.ac.uk/accounts/profile/315/"}, {"name": "Mark Hodds", "profile_url": "https://numbas.mathcentre.ac.uk/accounts/profile/510/"}, {"name": "Sean Gardiner", "profile_url": "https://numbas.mathcentre.ac.uk/accounts/profile/2443/"}], "statement": "<p>The following question refers to this right-angled triangle (not necessarily drawn to scale).&nbsp;The values and functions are randomised, so you should retry this question several times for practice.&nbsp;</p>\n<p>{plotgraph(a,b,c,angleA,angleB,angleC)}</p>", "variables": {"c": {"definition": "k*(m^2+n^2)", "group": "Ungrouped variables", "description": "", "name": "c", "templateType": "anything"}, "a": {"definition": "max(k*(m^2-n^2),k*(2*m*n))", "group": "Ungrouped variables", "description": "", "name": "a", "templateType": "anything"}, "b": {"definition": "min(k*(m^2-n^2),k*(2*m*n))", "group": "Ungrouped variables", "description": "", "name": "b", "templateType": "anything"}, "k": {"definition": "random(1..3)", "group": "Ungrouped variables", "description": "", "name": "k", "templateType": "anything"}, "ind": {"definition": "random(0..5)", "group": "Ungrouped variables", "description": "", "name": "ind", "templateType": "anything"}, "angleB": {"definition": "arcsin(b/c)/pi*180", "group": "Ungrouped variables", "description": "", "name": "angleB", "templateType": "anything"}, "angleA": {"definition": "arcsin(a/c)/pi*180", "group": "Ungrouped variables", "description": "", "name": "angleA", "templateType": "anything"}, "sol": {"definition": "[[a,c],[b,c],[a,b],[c,a],[c,b],[b,a]][ind]", "group": "Ungrouped variables", "description": "", "name": "sol", "templateType": "anything"}, "f": {"definition": "['sin','cos','tan','csc','sec','cot'][ind]", "group": "Ungrouped variables", "description": "", "name": "f", "templateType": "anything"}, "n": {"definition": "random(1..m except filter(gcd(m,t)>1,t,1..m))", "group": "Ungrouped variables", "description": "", "name": "n", "templateType": "anything"}, "m": {"definition": "random(2..5)", "group": "Ungrouped variables", "description": "", "name": "m", "templateType": "anything"}, "angleC": {"definition": "90", "group": "Ungrouped variables", "description": "", "name": "angleC", "templateType": "anything"}}, "variable_groups": [], "advice": "<p>The hypotenuse can be found by using Pythagoras' Theorem: $c^2 = a^2 + b^2$, so here $c = \\sqrt{\\var{a}^2 + \\var{b}^2}$.&nbsp;</p>\n<p>Then use the definition of the appropriate trigonometric function to find the correct ratio.&nbsp;</p>", "variablesTest": {"condition": "angleA<>90", "maxRuns": 100}, "functions": {"plotgraph": {"type": "html", "parameters": [["a", "number"], ["b", "number"], ["c", "number"], ["angleA", "number"], ["angleB", "number"], ["angleC", "number"]], "definition": "// This functions plots a triangle based on two angles and a length\n\n//Function to convert angles to radians\nfunction toRadians (angle) {\n  return angle * (Math.PI / 180);\n}\n\n//Calculate height of triangle\nvar a0=a;\nvar b0=b;\na=12\nb=9\nc=15\nvar h = b*Math.sin(toRadians(angleC));\n\n//Set text and graph offsets to appear uniform\nvar xOffset = Math.ceil(a/10)\nvar yOffset = Math.ceil(a/2+xOffset-h/2)\n//Consider removing scale once all adjusted correctly\nvar offset = 1;\nvar textHeight =15;\nvar scale = xOffset/2;\nvar scaleOffset = offset*scale;\nvar scaleText = textHeight*scale;\n// This functions plots two dimensioned lines \n// Max and min x and y values for the axis.\nvar x_min = 0;\nvar x_max = a+2*xOffset;\nvar y_min = 0;\nvar y_max = a+2*xOffset;\n\n//Browser compatibility\nJXG.Options.text.display = 'internal';\n//Use MathJax for LaTeX display\nJXG.Options.text.useMathJax = true;\n\n// Make the JSXGraph board.\nvar div = Numbas.extensions.jsxgraph.makeBoard(\n  '500px',\n  '500px',\n {\n   boundingBox: [0,y_max,x_max,0],\n//Change to false after testing\n   axis: false,\n }\n);\n\n// div.board is the object created by JSXGraph, which you use to manipulate elements\nvar board = div.board; \n\n/*\n//Dummy text for testing variables, remove after testing\ntempText = board.create('text',[(xOffset),(h+yOffset),\nfunction () {return 'A is ' + angleA + ' B is ' + angleB + ' C is ' + angleC}]);\ntempText2 = board.create('text',[(xOffset),(yOffset/2),\nfunction () {return 'a is ' + a + ' b is ' + b + ' c is ' + c}]);\n*/\n\n//Draw three points \nvar pA = board.create('point', [(b*Math.cos(toRadians(angleC))+xOffset), (b*Math.sin(toRadians(angleC))+yOffset)],                     \n//Make fixed:true after testing\n  {size:0, fixed:true,\n   label:{offset: [0,10]}});\nvar pB = board.create('point', [(a+xOffset), (yOffset)],\n  {size:0, fixed:true,\n  label:{offset: [10,-10]}});\nvar pC = board.create('point', [(xOffset), (yOffset)],\n  {size:0, fixed:true,\n  label:{offset: [-10,-10]}});\n\n\n//Draw a line between them\nvar AB = board.create('line',[pA,pB],{fixed:false, straightFirst:false, straightLast:false, strokeWidth: 1});\nvar BC = board.create('line',[pC,pB],{fixed:false, straightFirst:false, straightLast:false, strokeWidth: 1});\nvar AC = board.create('line',[pC,pA],{fixed:false, straightFirst:false, straightLast:false, strokeWidth: 1});\n\n//Draw angle and label\n//Used in other versions of this questions\n/*\nvar ABC = board.create('nonreflexangle', [pA,pB,pC], {type:'sector', orthoType:'square', orthoSensitivity:0.4, \nradius:function() { return scale;}\n });\nvar ABCLabel = ABC.label.setText(function () {\n  var angle = 180.0 * ABC.Value() / Math.PI;\n  if ((angle > 90.4) || (angle < 89.6)) {\n     return ''+angle.toFixed(0) + '\\u00B0';\n  } else {\n     return '';\n  }\n});\nABCLabel.setAttribute({anchorX:'middle'});\n*/\n\nvar CAB = board.create('nonreflexangle', [pC,pA,pB], {type:'sector', orthoType:'square', orthoSensitivity:0.4, \nradius:function() { return scale;}                      \n});\nvar CABLabel = CAB.label.setText(function () {\n  var angle = 180.0 * CAB.Value() / Math.PI;\n  if ((angle > 90.4) || (angle < 89.6)) {\n    return '\\u03B8' + '\\u00B0';\n  } else {\n    return '';\n  }\n});\nCABLabel.setAttribute({anchorX:'middle'});\n\n\nvar BCA = board.create('nonreflexangle', [pB,pC,pA], {type:'sector', orthoType:'square', orthoSensitivity:0.4, \nradius:function() { return scale;}                      \n});\nvar BCALabel = BCA.label.setText(function () {\n  var angle = 180.0 * BCA.Value() / Math.PI;\n  if ((angle > 90.4) || (angle < 89.6)) {\n    return ''+angle.toFixed(0) + '\\u00B0';\n  } else {\n    return '';\n  }\n});\nBCALabel.setAttribute({anchorX:'middle'});\n\n\n//Not used in this version\n/*\ntextAB = board.create('text', \n [function () {return (pA.X() + pB.X())/2},\n  function () {return ((pA.Y() + pB.Y())/2)+(scaleOffset/2)},\n  function () {return +pA.Dist(pB).toFixed(2) + ' '}],\n  {fontSize:15, anchorX:'middle'});\n*/\n\n//Set up dimension labels to be properly aligned\ntextBC = board.create('text', \n [function () {return (pB.X() + pC.X())/2},\n  function () {return ((pB.Y() + pC.Y())/2)-scaleOffset},\n  function () {return +a0.toFixed(0) + ' '}],\n  {fontSize:15, anchorX:'middle'});\n\n\n//Not used in this version\ntextAC = board.create('text', \n [function () {return (pA.X() + pC.X())/2},\n  function () {return ((pA.Y() + pC.Y())/2)+(scaleOffset/2)},\n  function () {return +b0.toFixed(2) + ' '}],\n  {fontSize:15, anchorX:'middle'});\n\n/*\nvar tABRot = board.create('transform', \n [function () {return AB.getAngle()},                        \n  function () {return (pA.X() + pB.X())/2}, \n  function () {return (pA.Y() + pB.Y())/2}],\n  {type:'rotate'});\n*/\n\n//Set up rotation transform for label\n\nvar tBCRot = board.create('transform', \n [function () {return BC.getAngle()},                        \n  function () {return (pB.X() + pC.X())/2}, \n  function () {return (pB.Y() + pC.Y())/2}],\n  {type:'rotate'});\n\n\n//Hide this for final version\nvar tACRot = board.create('transform', \n [function () {return AC.getAngle()},                        \n  function () {return (pA.X() + pC.X())/2}, \n  function () {return (pA.Y() + pC.Y())/2}],\n  {type:'rotate'});\n\n\n//Perform text rotations and update\n//tABRot.bindTo(textAB);\n//Hide this for final version\ntBCRot.bindTo(textBC); \n//Hide this for final version\ntACRot.bindTo(textAC);\nboard.update();\n\nreturn div;", "language": "javascript"}}, "parts": [{"customMarkingAlgorithm": "", "marks": 1, "expectedVariableNames": [], "prompt": "<p>What is&nbsp;{f}$(\\theta)$?&nbsp;</p>", "variableReplacementStrategy": "originalfirst", "checkingAccuracy": 0.001, "showFeedbackIcon": true, "showCorrectAnswer": true, "failureRate": 1, "vsetRangePoints": 5, "checkingType": "absdiff", "extendBaseMarkingAlgorithm": true, "variableReplacements": [], "answer": "{sol[0]}/{sol[1]}", "type": "jme", "unitTests": [], "showPreview": true, "vsetRange": [0, 1], "scripts": {}, "checkVariableNames": false}], "preamble": {"js": "", "css": ""}, "tags": [], "ungrouped_variables": ["m", "n", "k", "a", "b", "c", "angleA", "angleB", "angleC", "ind", "f", "sol"], "rulesets": {}, "metadata": {"description": "<p>Draws a triangle based on&nbsp;2 angles and a side length.</p>", "licence": "Creative Commons Attribution 4.0 International"}, "type": "question"}, {"name": "Area of Triangle", "extensions": ["eukleides", "jsxgraph"], "custom_part_types": [], "resources": [], "navigation": {"allowregen": true, "showfrontpage": false, "preventleave": false}, "contributors": [{"name": "Christian Lawson-Perfect", "profile_url": "http://localhost:8000/accounts/profile/1/"}, {"name": "Christian Lawson-Perfect", "profile_url": "http://localhost:8000/accounts/profile/1/"}, {"name": "Christian Lawson-Perfect", "profile_url": "https://numbas.mathcentre.ac.uk/accounts/profile/7/"}, {"name": "Christian Lawson-Perfect", "profile_url": "https://numbas.mathcentre.ac.uk/accounts/profile/7/"}], "tags": ["category: area+volume", "leads to: 261, Area of trapezium", "leads to: 262, Area and circumference of a circle", "skill: 161, Area of a triangle"], "metadata": {"description": "", "licence": "Creative Commons Attribution 4.0 International"}, "statement": "", "advice": "", "rulesets": {}, "builtin_constants": {"e": true, "pi,\u03c0": true, "i": true}, "constants": [], "variables": {"drawingA": {"name": "drawingA", "group": "Ungrouped variables", "definition": "let(\n  p1,point(-3,-2),\n  p2,point(2,-2),\n  p3,point(3,2),\n  maxx,max(map(x(p),p,[p1,p2,p3])),\n  minx,min(map(x(p),p,[p1,p2,p3])),\n  maxy,max(map(y(p),p,[p1,p2,p3])),\n  miny,min(map(y(p),p,[p1,p2,p3])),\n  base,x(p2)-x(p1),\n  height,maxy-miny,\n  eukleides(\"A triangle with base {base} and height {height}\",\n  [\n    p1..p2..p3,\n    point(maxx+0.5,maxy)..point(maxx+0.5,miny) arrows label(height),\n    (p2-vector(0,0.5))..(p1-vector(0,0.5)) arrows label(base)\n  ]\n  )\n)", "description": "", "templateType": "anything", "can_override": false}, "groups": {"name": "groups", "group": "Ungrouped variables", "definition": "[\n  [drawingA,10],\n  [drawingB,5],\n  [drawingC,6]\n]", "description": "", "templateType": "anything", "can_override": false}, "drawingB": {"name": "drawingB", "group": "Ungrouped variables", "definition": "let(\n  p1,point(-2,-2),\n  p2,point(3,0),\n  p3,point(3,2),\n  height,x(p2)-x(p1),\n  base,y(p3)-y(p2),\n  eukleides(\"A triangle with base {base} and height {height}\",\n  [\n    p1..p2..p3,\n    point(3.5,2)..point(3.5,0) arrows label(height),\n    point(3,-2.5)..point(-2,-2.5) arrows label(base)\n  ]\n  )\n)", "description": "", "templateType": "anything", "can_override": false}, "drawingC": {"name": "drawingC", "group": "Ungrouped variables", "definition": "let(\n  p1,point(-2,-2),\n  p2,point(1,-2),\n  p3,point(3,2),\n  height,y(p3)-y(p1),\n  base,x(p2)-x(p1),\n  eukleides(\"A triangle with base {base} and height {height}\",\n  [\n    p1..p2..p3,\n    point(3.5,2)..point(3.5,-2) arrows label(height),\n    point(1,-2.5)..point(-2,-2.5) arrows label(base)\n  ]\n  )\n)", "description": "", "templateType": "anything", "can_override": false}, "group": {"name": "group", "group": "Ungrouped variables", "definition": "random(groups)", "description": "", "templateType": "anything", "can_override": false}, "drawing": {"name": "drawing", "group": "Ungrouped variables", "definition": "group[0]", "description": "", "templateType": "anything", "can_override": false}, "area": {"name": "area", "group": "Ungrouped variables", "definition": "group[1]", "description": "", "templateType": "anything", "can_override": false}}, "variablesTest": {"condition": "", "maxRuns": 100}, "ungrouped_variables": ["drawingA", "drawingB", "drawingC", "groups", "group", "drawing", "area"], "variable_groups": [], "functions": {}, "preamble": {"js": "", "css": ""}, "parts": [{"type": "numberentry", "useCustomName": false, "customName": "", "marks": 1, "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "prompt": "<p>What is the area of the triangle shown?</p>\n<p>{max_width(30,drawing)}</p>", "minValue": "area", "maxValue": "area", "correctAnswerFraction": false, "allowFractions": true, "mustBeReduced": false, "mustBeReducedPC": 0, "showFractionHint": false, "notationStyles": ["plain", "en", "si-en"], "correctAnswerStyle": "plain"}], "partsMode": "all", "maxMarks": 0, "objectives": [], "penalties": [], "objectiveVisibility": "always", "penaltyVisibility": "always"}, {"name": "Similar triangles", "extensions": ["eukleides", "jsxgraph"], "custom_part_types": [], "resources": [], "navigation": {"allowregen": true, "showfrontpage": false, "preventleave": false}, "contributors": [{"name": "Christian Lawson-Perfect", "profile_url": "http://localhost:8000/accounts/profile/1/"}, {"name": "Christian Lawson-Perfect", "profile_url": "http://localhost:8000/accounts/profile/1/"}, {"name": "Christian Lawson-Perfect", "profile_url": "https://numbas.mathcentre.ac.uk/accounts/profile/7/"}, {"name": "Christian Lawson-Perfect", "profile_url": "https://numbas.mathcentre.ac.uk/accounts/profile/7/"}], "tags": ["category: area+volume", "leads to: 362, Area/Length relationship", "skill: 263, Similar triangles"], "metadata": {"description": "", "licence": "Creative Commons Attribution 4.0 International"}, "statement": "", "advice": "", "rulesets": {}, "builtin_constants": {"e": true, "pi,\u03c0": true, "i": true}, "constants": [], "variables": {"drawingA": {"name": "drawingA", "group": "Ungrouped variables", "definition": "eukleides(\"Two similar triangles, with sides 4,7,a and 12,b,27\",\nlet(\np1,point(2,2),\np2,point(5,2),\np3,point(7,7),\np4,point(13,2),\np5,point(22,2),\np6,point(28,17),\ns1,label(4),\ns2,label(7),\ns3,label(\"a\") italic,\ns4,label(12),\ns5,label(\"b\") italic,\ns6,label(27),\nstroke,size(4),\n[\n  p1..p2..p3 stroke, p4..p5..p6 stroke,\np2..p1 s1 stroke,\np3..p2 s2 stroke,\np1..p3 s3 stroke,\np5..p4 s4 stroke,\np6..p5 s5 stroke,\np4..p6 s6 stroke\n]\n))", "description": "", "templateType": "anything", "can_override": false}, "groups": {"name": "groups", "group": "Ungrouped variables", "definition": "[\n  [drawingA,9,21],\n  [drawingB,4,24],\n  [drawingC,11,24],\n  [drawingD,5,21],\n  [drawingE,7,25]\n]", "description": "", "templateType": "anything", "can_override": false}, "drawingB": {"name": "drawingB", "group": "Ungrouped variables", "definition": "eukleides(\"Two similar triangles, with sides a,5,6 and 16,20,b\",\nlet(\np1,point(2,2),\np2,point(5,2),\np3,point(7,7),\np4,point(13,2),\np5,point(22,2),\np6,point(28,17),\ns1,label(\"a\") italic,\ns2,label(5),\ns3,label(6),\ns4,label(16),\ns5,label(20),\ns6,label(\"b\") italic,\nstroke,size(4),\n[\n  p1..p2..p3 stroke, p4..p5..p6 stroke,\np2..p1 s1 stroke,\np3..p2 s2 stroke,\np1..p3 s3 stroke,\np5..p4 s4 stroke,\np6..p5 s5 stroke,\np4..p6 s6 stroke\n]\n))", "description": "", "templateType": "anything", "can_override": false}, "drawingC": {"name": "drawingC", "group": "Ungrouped variables", "definition": "eukleides(\"Two similar triangles, with sides 5,8,a and 15,b,33\",\nlet(\np1,point(2,2),\np2,point(5,2),\np3,point(7,7),\np4,point(13,2),\np5,point(22,2),\np6,point(28,17),\ns1,label(5),\ns2,label(8),\ns3,label(\"a\") italic,\ns4,label(15),\ns5,label(\"b\") italic,\ns6,label(33),\nstroke,size(4),\n[\n  p1..p2..p3 stroke, p4..p5..p6 stroke,\np2..p1 s1 stroke,\np3..p2 s2 stroke,\np1..p3 s3 stroke,\np5..p4 s4 stroke,\np6..p5 s5 stroke,\np4..p6 s6 stroke\n]\n))", "description": "", "templateType": "anything", "can_override": false}, "drawingD": {"name": "drawingD", "group": "Ungrouped variables", "definition": "eukleides(\"Two similar triangles, with sides a,6,7 and 15,18,b\",\nlet(\np1,point(2,2),\np2,point(5,2),\np3,point(7,7),\np4,point(13,2),\np5,point(22,2),\np6,point(28,17),\ns1,label(\"a\") italic,\ns2,label(6),\ns3,label(7),\ns4,label(15),\ns5,label(18),\ns6,label(\"b\") italic,\nstroke,size(4),\n[\n  p1..p2..p3 stroke, p4..p5..p6 stroke,\np2..p1 s1 stroke,\np3..p2 s2 stroke,\np1..p3 s3 stroke,\np5..p4 s4 stroke,\np6..p5 s5 stroke,\np4..p6 s6 stroke\n]\n))", "description": "", "templateType": "anything", "can_override": false}, "drawingE": {"name": "drawingE", "group": "Ungrouped variables", "definition": "eukleides(\"Two similar triangles, with sides 3,5,a and 15,b,35\",\nlet(\np1,point(2,2),\np2,point(5,2),\np3,point(7,7),\np4,point(13,2),\np5,point(22,2),\np6,point(28,17),\ns1,label(3),\ns2,label(5),\ns3,label(\"a\") italic,\ns4,label(15),\ns5,label(\"b\") italic,\ns6,label(35),\nstroke,size(4),\n[\n  p1..p2..p3 stroke, p4..p5..p6 stroke,\np2..p1 s1 stroke,\np3..p2 s2 stroke,\np1..p3 s3 stroke,\np5..p4 s4 stroke,\np6..p5 s5 stroke,\np4..p6 s6 stroke\n]\n))", "description": "", "templateType": "anything", "can_override": false}, "group": {"name": "group", "group": "Ungrouped variables", "definition": "random(groups)", "description": "", "templateType": "anything", "can_override": false}, "drawing": {"name": "drawing", "group": "Ungrouped variables", "definition": "group[0]", "description": "", "templateType": "anything", "can_override": false}, "a": {"name": "a", "group": "Ungrouped variables", "definition": "group[1]", "description": "", "templateType": "anything", "can_override": false}, "b": {"name": "b", "group": "Ungrouped variables", "definition": "group[2]", "description": "", "templateType": "anything", "can_override": false}}, "variablesTest": {"condition": "", "maxRuns": 100}, "ungrouped_variables": ["drawingA", "drawingB", "drawingC", "drawingD", "drawingE", "groups", "group", "drawing", "a", "b"], "variable_groups": [], "functions": {}, "preamble": {"js": "", "css": ""}, "parts": [{"type": "gapfill", "useCustomName": false, "customName": "", "marks": 0, "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "prompt": "<p>We have two <strong>similar</strong> triangles as shown:</p>\n<p>{max_width(30,drawing)}</p>\n<p>Enter the lengths of sides $a$ and $b$:</p>\n<p>$a = $ [[0]]</p>\n<p>$b = $ [[1]]</p>", "gaps": [{"type": "numberentry", "useCustomName": true, "customName": "$a$", "marks": "0.5", "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "minValue": "a", "maxValue": "a", "correctAnswerFraction": false, "allowFractions": true, "mustBeReduced": false, "mustBeReducedPC": 0, "showFractionHint": false, "notationStyles": ["plain", "en", "si-en"], "correctAnswerStyle": "plain"}, {"type": "numberentry", "useCustomName": true, "customName": "$b$", "marks": "0.5", "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "minValue": "b", "maxValue": "b", "correctAnswerFraction": false, "allowFractions": true, "mustBeReduced": false, "mustBeReducedPC": 0, "showFractionHint": false, "notationStyles": ["plain", "en", "si-en"], "correctAnswerStyle": "plain"}], "sortAnswers": false}], "partsMode": "all", "maxMarks": 0, "objectives": [], "penalties": [], "objectiveVisibility": "always", "penaltyVisibility": "always"}, {"name": "Sine and Cosine rules", "extensions": ["geogebra", "quantities"], "custom_part_types": [{"source": {"pk": 12, "author": {"name": "William Haynes", "pk": 2530}, "edit_page": "/part_type/12/edit"}, "name": "Angle quantity 2020", "short_name": "angle", "description": "<p>Adjusts all angles to 0&lt; $\\theta$ &lt; 360.</p>\n<p>Accepts '&deg;' and 'deg' as units.</p>\n<p>Penalizes if not close enough or no units.</p>\n<p>90&deg; = -270&deg; = 450&deg;</p>", "help_url": "", "input_widget": "string", "input_options": {"correctAnswer": "plain_string(settings['expected_answer']) ", "hint": {"static": true, "value": ""}, "allowEmpty": {"static": true, "value": false}}, "can_be_gap": true, "can_be_step": true, "marking_script": "student_unit:\nstudentAnswer[len(matchnumber(studentAnswer,['plain','en'])[0])..len(studentAnswer)]\n\ncorrect_scalar:\nmod(scalar(settings['expected_answer']),360)\n\nmark:\nfeedback('Student Angle = ' + precround(student_scalar,4) + '\u00b0');\nassert(close,incorrect('Angle is more than ' + settings['close_tol'] + '\u00b0 off.'); end()); // got to be close\nif(right, \n   correct('Angle is correct.'), \n   set_credit(1- settings['close_penalty'], 'Angle is close.')); \nassert(good_unit, sub_credit(settings['unit_penalty'],'Wrong or missing units.'))\n\n   \n\n\n\n\n\ninterpreted_answer:\nqty(mod(student_scalar,360),'deg')\n\nstudent_scalar:\nmod(matchnumber(studentAnswer,['plain','en'])[1],360)\n\n\nclose:\nwithintolerance(student_scalar, correct_scalar,decimal(settings['close_tol']))\n\ngood_unit:\nsame(qty(1,interpreted_unit),qty(1,'deg'))\n\ninterpreted_unit:\nif(trim(student_unit)='\u00b0','deg',student_unit)\n\nright:\nwithintolerance(student_scalar, correct_scalar, decimal(settings['right_tol']))\n\noriginal_student_scalar:\nmatchnumber(studentAnswer,['plain','en'])[1]", "marking_notes": [{"name": "student_unit", "description": "", "definition": "studentAnswer[len(matchnumber(studentAnswer,['plain','en'])[0])..len(studentAnswer)]"}, {"name": "correct_scalar", "description": "", "definition": "mod(scalar(settings['expected_answer']),360)"}, {"name": "mark", "description": "This is the main marking note. It should award credit and provide feedback based on the student's answer.", "definition": "feedback('Student Angle = ' + precround(student_scalar,4) + '\u00b0');\nassert(close,incorrect('Angle is more than ' + settings['close_tol'] + '\u00b0 off.'); end()); // got to be close\nif(right, \n   correct('Angle is correct.'), \n   set_credit(1- settings['close_penalty'], 'Angle is close.')); \nassert(good_unit, sub_credit(settings['unit_penalty'],'Wrong or missing units.'))\n\n   \n\n\n\n"}, {"name": "interpreted_answer", "description": "A value representing the student's answer to this part.", "definition": "qty(mod(student_scalar,360),'deg')"}, {"name": "student_scalar", "description": "", "definition": "mod(matchnumber(studentAnswer,['plain','en'])[1],360)\n"}, {"name": "close", "description": "", "definition": "withintolerance(student_scalar, correct_scalar,decimal(settings['close_tol']))"}, {"name": "good_unit", "description": "", "definition": "same(qty(1,interpreted_unit),qty(1,'deg'))"}, {"name": "interpreted_unit", "description": "", "definition": "if(trim(student_unit)='\u00b0','deg',student_unit)"}, {"name": "right", "description": "", "definition": "withintolerance(student_scalar, correct_scalar, decimal(settings['right_tol']))"}, {"name": "original_student_scalar", "description": "<p>numeric part of students answer, which is a quantity.</p>", "definition": "matchnumber(studentAnswer,['plain','en'])[1]"}], "settings": [{"name": "expected_answer", "label": "Expected Answer", "help_url": "", "hint": "Expected angle as a quantity.", "input_type": "code", "default_value": "qty(30,'deg')", "evaluate": true}, {"name": "unit_penalty", "label": "Unit penalty", "help_url": "", "hint": "Penalty for not including degree sign or 'deg'.", "input_type": "percent", "default_value": "20"}, {"name": "close_penalty", "label": "Close Penalty", "help_url": "", "hint": "Penalty for close answer.", "input_type": "percent", "default_value": "20"}, {"name": "close_tol", "label": "Close", "help_url": "", "hint": "Angle must be $\\pm$ this many degrees to be marked close. &nbsp;&nbsp;", "input_type": "code", "default_value": "0.5", "evaluate": false}, {"name": "right_tol", "label": "Right ", "help_url": "", "hint": "Angle must be $\\pm$ this many degrees to be marked correct. &nbsp;", "input_type": "code", "default_value": "0.1", "evaluate": false}], "public_availability": "restricted", "published": false, "extensions": ["quantities"]}, {"source": {"pk": 19, "author": {"name": "William Haynes", "pk": 2530}, "edit_page": "/part_type/19/edit"}, "name": "Engineering Accuracy with units", "short_name": "engineering-answer", "description": "<p>A value with units marked right if within an adjustable % error of the correct value. &nbsp;Marked close if within a wider margin of error.</p>", "help_url": "", "input_widget": "string", "input_options": {"correctAnswer": "siground(settings['correctAnswer'],4)", "hint": {"static": true, "value": ""}, "allowEmpty": {"static": true, "value": true}}, "can_be_gap": true, "can_be_step": true, "marking_script": "mark:\nswitch( \n  right and good_units and right_sign, add_credit(1.0,'Correct.'),\n  right and good_units and not right_sign, add_credit(settings['C2'],'Wrong sign.'),\n  right and right_sign and not good_units, add_credit(settings['C2'],'Correct value, but wrong or missing units.'),\n  close and good_units, add_credit(settings['C1'],'Close.'),\n  close and not good_units, add_credit(settings['C3'],'Answer is close, but wrong or missing units.'),\n  incorrect('Wrong answer.')\n)\n\n\ninterpreted_answer:\nqty(student_scalar, student_units)\n\n\n\ncorrect_quantity:\nsettings[\"correctAnswer\"]\n\n\n\ncorrect_units:\nunits(correct_quantity)\n\n\nallowed_notation_styles:\n[\"plain\",\"en\"]\n\nmatch_student_number:\nmatchnumber(studentAnswer,allowed_notation_styles)\n\nstudent_scalar:\nmatch_student_number[1]\n\nstudent_units:\nreplace_regex('ohms','ohm',\n  replace_regex('\u00b0', ' deg',\n    replace_regex('-', ' ' ,\n      studentAnswer[len(match_student_number[0])..len(studentAnswer)])),\"i\")\n\ngood_units:\ntry(\ncompatible(quantity(1, student_units),correct_units),\nmsg,\nfeedback(msg);false)\n\n\nstudent_quantity:\nswitch(not good_units, \n       student_scalar * correct_units, \n       not right_sign,\n       -quantity(student_scalar, student_units),\n       quantity(student_scalar,student_units)\n)\n  \n\n\npercent_error:\ntry(\nscalar(abs((correct_quantity - student_quantity)/correct_quantity))*100  \n,msg,\nif(student_quantity=correct_quantity,0,100))\n   \n\nright:\npercent_error <= settings['right']\n\n\nclose:\nright_sign and percent_error <= settings['close']\n\nright_sign:\nsign(student_scalar) = sign(correct_quantity)", "marking_notes": [{"name": "mark", "description": "This is the main marking note. It should award credit and provide feedback based on the student's answer.", "definition": "switch( \n  right and good_units and right_sign, add_credit(1.0,'Correct.'),\n  right and good_units and not right_sign, add_credit(settings['C2'],'Wrong sign.'),\n  right and right_sign and not good_units, add_credit(settings['C2'],'Correct value, but wrong or missing units.'),\n  close and good_units, add_credit(settings['C1'],'Close.'),\n  close and not good_units, add_credit(settings['C3'],'Answer is close, but wrong or missing units.'),\n  incorrect('Wrong answer.')\n)\n"}, {"name": "interpreted_answer", "description": "A value representing the student's answer to this part.", "definition": "qty(student_scalar, student_units)\n\n"}, {"name": "correct_quantity", "description": "", "definition": "settings[\"correctAnswer\"]\n\n"}, {"name": "correct_units", "description": "", "definition": "units(correct_quantity)\n"}, {"name": "allowed_notation_styles", "description": "", "definition": "[\"plain\",\"en\"]"}, {"name": "match_student_number", "description": "", "definition": "matchnumber(studentAnswer,allowed_notation_styles)"}, {"name": "student_scalar", "description": "", "definition": "match_student_number[1]"}, {"name": "student_units", "description": "<p>Modify&nbsp;the&nbsp;unit portion of&nbsp;the student's answer by</p>\n<p>1. replacing \"ohms\" with \"ohm\" &nbsp;case insensitive</p>\n<p>2.&nbsp;replacing '-'&nbsp;with ' '&nbsp;</p>\n<p>3. replacing '&deg;' with ' deg'&nbsp;</p>\n<p>to allow answers like 10 ft-lb and 30&deg;</p>", "definition": "replace_regex('ohms','ohm',\n  replace_regex('\u00b0', ' deg',\n    replace_regex('-', ' ' ,\n      studentAnswer[len(match_student_number[0])..len(studentAnswer)])),\"i\")"}, {"name": "good_units", "description": "", "definition": "try(\ncompatible(quantity(1, student_units),correct_units),\nmsg,\nfeedback(msg);false)\n"}, {"name": "student_quantity", "description": "<p>This fixes the student answer for two common errors. &nbsp;</p>\n<p>If student_units are wrong&nbsp;&nbsp;- replace with correct units</p>\n<p>If student_scalar has the wrong sign - replace with right sign</p>\n<p>If student makes both errors, only one gets fixed.</p>", "definition": "switch(not good_units, \n       student_scalar * correct_units, \n       not right_sign,\n       -quantity(student_scalar, student_units),\n       quantity(student_scalar,student_units)\n)\n  \n"}, {"name": "percent_error", "description": "", "definition": "try(\nscalar(abs((correct_quantity - student_quantity)/correct_quantity))*100  \n,msg,\nif(student_quantity=correct_quantity,0,100))\n   "}, {"name": "right", "description": "", "definition": "percent_error <= settings['right']\n"}, {"name": "close", "description": "<p>Only marked close if the student actually has the right sign.</p>", "definition": "right_sign and percent_error <= settings['close']"}, {"name": "right_sign", "description": "", "definition": "sign(student_scalar) = sign(correct_quantity) "}], "settings": [{"name": "correctAnswer", "label": "Correct Quantity.", "help_url": "", "hint": "The correct answer given as a JME quantity.", "input_type": "code", "default_value": "", "evaluate": true}, {"name": "right", "label": "% Accuracy for right.", "help_url": "", "hint": "Question will be considered correct if the scalar part of the student's answer is within this % of correct value.", "input_type": "code", "default_value": "0.2", "evaluate": true}, {"name": "close", "label": "% Accuracy for close.", "help_url": "", "hint": "Question will be considered close if the scalar part of the student's answer is within this % of correct value.", "input_type": "code", "default_value": "1.0", "evaluate": true}, {"name": "C1", "label": "Close with units.", "help_url": "", "hint": "Partial Credit for close value with appropriate units. &nbsp;if correct answer is 100 N and close is &plusmn;1%,<br />99 &nbsp;N is accepted.", "input_type": "percent", "default_value": "75"}, {"name": "C2", "label": "No units or wrong sign", "help_url": "", "hint": "Partial credit for forgetting units or using wrong sign.<br />If the correct answer is 100 N, both 100 and -100 N are accepted.", "input_type": "percent", "default_value": "50"}, {"name": "C3", "label": "Close, no units.", "help_url": "", "hint": "Partial Credit for close value but forgotten units.<br />This value would be close&nbsp;if the expected units were provided. &nbsp;If the correct answer is 100 N, and close is &plusmn;1%,<br />99 is accepted.", "input_type": "percent", "default_value": "25"}], "public_availability": "always", "published": true, "extensions": ["quantities"]}], "resources": [], "navigation": {"allowregen": true, "showfrontpage": false, "preventleave": false}, "contributors": [{"name": "William Haynes", "profile_url": "https://numbas.mathcentre.ac.uk/accounts/profile/2530/"}], "tags": ["mechanics, statics, trigonometry, law of sines, law of cosines"], "metadata": {"description": "<p>Solve a random oblique triangle for sides and angles.</p>", "licence": "Creative Commons Attribution-NonCommercial 4.0 International"}, "statement": "<p>Determine the lengths of the three sides and the measures of the three angles for the case when <em>A</em> = ({A[0]},{A[1]}), <em>B</em> = ({B[0]},{B[1]}), <em>C</em> = ({C[0]},{C[1]}). &nbsp;Length units are {units}.</p>\n<p>Give numeric answers to&nbsp;engineering accuracy&nbsp;and measure angles in degrees.&nbsp;</p>\n<p>{geogebra_applet('HCFekBp8',[['A',A],['B',B],['C',C]])}</p>\n<p></p>\n<div data-jme-visible=\"false\">\n<p>AB: {AB} &nbsp;BC: {BC} CA: {CA}</p>\n<p>alpha: {alpha} beta: {beta} gamma: {gamma}</p>\n</div>", "advice": "<ol>\n<li>Use the <a href=\"https://www.khanacademy.org/math/basic-geo/basic-geometry-pythagorean-theorem/pythagorean-theorem-distance/a/distance-formula\">distance formula</a> to find the lengths of the three sides.</li>\n<li>Use the <a href=\"https://www.khanacademy.org/math/geometry/hs-geo-trig/hs-geo-solving-general-triangles/a/laws-of-sines-and-cosines-review\">Law of Cosines</a> to find one of the angles.</li>\n<li>Use the <a href=\"https://www.mathsisfun.com/algebra/trig-sine-law.html\">Law of Sines</a> to find the other two angles. &nbsp;Beware of the <a href=\"https://www.geogebra.org/m/CvtkyRM5\">ambiguous case</a>. &nbsp;Check your answers against the diagram.</li>\n</ol>", "rulesets": {}, "variables": {"units": {"name": "units", "group": "Inputs", "definition": "random('m','ft','in','cm')", "description": "", "templateType": "anything"}, "alpha": {"name": "alpha", "group": "results", "definition": "degrees(angle((B-A,C-A)))", "description": "", "templateType": "anything"}, "A": {"name": "A", "group": "Inputs", "definition": "vector(random(-8..8),random(-6..6))", "description": "", "templateType": "anything"}, "sum": {"name": "sum", "group": "results", "definition": "alpha+beta+gamma", "description": "", "templateType": "anything"}, "CA": {"name": "CA", "group": "results", "definition": "length(C-A)", "description": "", "templateType": "anything"}, "AB": {"name": "AB", "group": "results", "definition": "length(A-B)", "description": "", "templateType": "anything"}, "gamma": {"name": "gamma", "group": "results", "definition": "degrees(angle((A-C,B-C)))", "description": "", "templateType": "anything"}, "B": {"name": "B", "group": "Inputs", "definition": "vector(random(-8..8),random(-6..6))", "description": "", "templateType": "anything"}, "C": {"name": "C", "group": "Inputs", "definition": "vector(random(-8..8),random(-6..6))", "description": "", "templateType": "anything"}, "BC": {"name": "BC", "group": "results", "definition": "length(B-C)", "description": "", "templateType": "anything"}, "beta": {"name": "beta", "group": "results", "definition": "degrees(angle((C-B,A-B)))", "description": "", "templateType": "anything"}}, "variablesTest": {"condition": "(alpha > 15) and  (beta > 15) and (gamma > 15) and (alpha <> 90)\nand  (beta <> 90) and (gamma <>90)\n", "maxRuns": "200"}, "ungrouped_variables": [], "variable_groups": [{"name": "Inputs", "variables": ["A", "B", "C", "units"]}, {"name": "results", "variables": ["AB", "BC", "CA", "alpha", "beta", "gamma", "sum"]}], "functions": {}, "preamble": {"js": "", "css": ""}, "parts": [{"type": "gapfill", "useCustomName": true, "customName": "Lengths", "marks": 0, "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "prompt": "<p>The lengths of the three sides are:</p>\n<ul>\n<li><em>AB</em> =&nbsp;[[0]]</li>\n<li><em>BC</em> =&nbsp;[[1]]</li>\n<li><em>CA</em> =&nbsp;[[2]]&nbsp;</li>\n</ul>", "gaps": [{"type": "engineering-answer", "useCustomName": true, "customName": "AB", "marks": "5", "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "settings": {"correctAnswer": "quantity(AB,units)", "right": "0.1", "close": "1.0", "C1": "75", "C2": "50", "C3": "25"}}, {"type": "engineering-answer", "useCustomName": true, "customName": "BC", "marks": "5", "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "settings": {"correctAnswer": "quantity(BC,units)", "right": "0.1", "close": "1.0", "C1": "75", "C2": "50", "C3": "25"}}, {"type": "engineering-answer", "useCustomName": true, "customName": "CA", "marks": "5", "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": false, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "settings": {"correctAnswer": "quantity(CA,units)", "right": "0.1", "close": "1.0", "C1": "75", "C2": "50", "C3": "25"}}], "sortAnswers": false}, {"type": "gapfill", "useCustomName": true, "customName": "Angles", "marks": 0, "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "prompt": "<p>The&nbsp;three angles&nbsp;are:</p>\n<ul>\n<li><em>$\\alpha$</em>&nbsp;=&nbsp;[[0]]</li>\n<li><em>$\\beta$</em>&nbsp;=&nbsp;[[1]]</li>\n<li><em>$\\gamma$</em>&nbsp;=&nbsp;[[2]]</li>\n</ul>", "gaps": [{"type": "angle", "useCustomName": true, "customName": "alpha", "marks": "5", "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "settings": {"expected_answer": "qty(alpha,'deg')", "unit_penalty": "20", "close_penalty": "20", "close_tol": "0.5", "right_tol": "0.1"}}, {"type": "angle", "useCustomName": true, "customName": "beta", "marks": "5", "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "settings": {"expected_answer": "qty(beta,'deg')", "unit_penalty": "20", "close_penalty": "20", "close_tol": "0.5", "right_tol": "0.1"}}, {"type": "angle", "useCustomName": true, "customName": "gamma", "marks": "5", "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "settings": {"expected_answer": "qty(gamma,'deg')", "unit_penalty": "20", "close_penalty": "20", "close_tol": "0.5", "right_tol": "0.1"}}], "sortAnswers": false}], "partsMode": "all", "maxMarks": 0, "objectives": [], "penalties": [], "objectiveVisibility": "always", "penaltyVisibility": "always"}, {"name": "Trig: Diagonal of a parallelogram", "extensions": ["geogebra", "quantities"], "custom_part_types": [{"source": {"pk": 19, "author": {"name": "William Haynes", "pk": 2530}, "edit_page": "/part_type/19/edit"}, "name": "Engineering Accuracy with units", "short_name": "engineering-answer", "description": "<p>A value with units marked right if within an adjustable % error of the correct value. &nbsp;Marked close if within a wider margin of error.</p>", "help_url": "", "input_widget": "string", "input_options": {"correctAnswer": "siground(settings['correctAnswer'],4)", "hint": {"static": true, "value": ""}, "allowEmpty": {"static": true, "value": true}}, "can_be_gap": true, "can_be_step": true, "marking_script": "mark:\nswitch( \n  right and good_units and right_sign, add_credit(1.0,'Correct.'),\n  right and good_units and not right_sign, add_credit(settings['C2'],'Wrong sign.'),\n  right and right_sign and not good_units, add_credit(settings['C2'],'Correct value, but wrong or missing units.'),\n  close and good_units, add_credit(settings['C1'],'Close.'),\n  close and not good_units, add_credit(settings['C3'],'Answer is close, but wrong or missing units.'),\n  incorrect('Wrong answer.')\n)\n\n\ninterpreted_answer:\nqty(student_scalar, student_units)\n\n\n\ncorrect_quantity:\nsettings[\"correctAnswer\"]\n\n\n\ncorrect_units:\nunits(correct_quantity)\n\n\nallowed_notation_styles:\n[\"plain\",\"en\"]\n\nmatch_student_number:\nmatchnumber(studentAnswer,allowed_notation_styles)\n\nstudent_scalar:\nmatch_student_number[1]\n\nstudent_units:\nreplace_regex('ohms','ohm',\n  replace_regex('\u00b0', ' deg',\n    replace_regex('-', ' ' ,\n      studentAnswer[len(match_student_number[0])..len(studentAnswer)])),\"i\")\n\ngood_units:\ntry(\ncompatible(quantity(1, student_units),correct_units),\nmsg,\nfeedback(msg);false)\n\n\nstudent_quantity:\nswitch(not good_units, \n       student_scalar * correct_units, \n       not right_sign,\n       -quantity(student_scalar, student_units),\n       quantity(student_scalar,student_units)\n)\n  \n\n\npercent_error:\ntry(\nscalar(abs((correct_quantity - student_quantity)/correct_quantity))*100  \n,msg,\nif(student_quantity=correct_quantity,0,100))\n   \n\nright:\npercent_error <= settings['right']\n\n\nclose:\nright_sign and percent_error <= settings['close']\n\nright_sign:\nsign(student_scalar) = sign(correct_quantity)", "marking_notes": [{"name": "mark", "description": "This is the main marking note. It should award credit and provide feedback based on the student's answer.", "definition": "switch( \n  right and good_units and right_sign, add_credit(1.0,'Correct.'),\n  right and good_units and not right_sign, add_credit(settings['C2'],'Wrong sign.'),\n  right and right_sign and not good_units, add_credit(settings['C2'],'Correct value, but wrong or missing units.'),\n  close and good_units, add_credit(settings['C1'],'Close.'),\n  close and not good_units, add_credit(settings['C3'],'Answer is close, but wrong or missing units.'),\n  incorrect('Wrong answer.')\n)\n"}, {"name": "interpreted_answer", "description": "A value representing the student's answer to this part.", "definition": "qty(student_scalar, student_units)\n\n"}, {"name": "correct_quantity", "description": "", "definition": "settings[\"correctAnswer\"]\n\n"}, {"name": "correct_units", "description": "", "definition": "units(correct_quantity)\n"}, {"name": "allowed_notation_styles", "description": "", "definition": "[\"plain\",\"en\"]"}, {"name": "match_student_number", "description": "", "definition": "matchnumber(studentAnswer,allowed_notation_styles)"}, {"name": "student_scalar", "description": "", "definition": "match_student_number[1]"}, {"name": "student_units", "description": "<p>Modify&nbsp;the&nbsp;unit portion of&nbsp;the student's answer by</p>\n<p>1. replacing \"ohms\" with \"ohm\" &nbsp;case insensitive</p>\n<p>2.&nbsp;replacing '-'&nbsp;with ' '&nbsp;</p>\n<p>3. replacing '&deg;' with ' deg'&nbsp;</p>\n<p>to allow answers like 10 ft-lb and 30&deg;</p>", "definition": "replace_regex('ohms','ohm',\n  replace_regex('\u00b0', ' deg',\n    replace_regex('-', ' ' ,\n      studentAnswer[len(match_student_number[0])..len(studentAnswer)])),\"i\")"}, {"name": "good_units", "description": "", "definition": "try(\ncompatible(quantity(1, student_units),correct_units),\nmsg,\nfeedback(msg);false)\n"}, {"name": "student_quantity", "description": "<p>This fixes the student answer for two common errors. &nbsp;</p>\n<p>If student_units are wrong&nbsp;&nbsp;- replace with correct units</p>\n<p>If student_scalar has the wrong sign - replace with right sign</p>\n<p>If student makes both errors, only one gets fixed.</p>", "definition": "switch(not good_units, \n       student_scalar * correct_units, \n       not right_sign,\n       -quantity(student_scalar, student_units),\n       quantity(student_scalar,student_units)\n)\n  \n"}, {"name": "percent_error", "description": "", "definition": "try(\nscalar(abs((correct_quantity - student_quantity)/correct_quantity))*100  \n,msg,\nif(student_quantity=correct_quantity,0,100))\n   "}, {"name": "right", "description": "", "definition": "percent_error <= settings['right']\n"}, {"name": "close", "description": "<p>Only marked close if the student actually has the right sign.</p>", "definition": "right_sign and percent_error <= settings['close']"}, {"name": "right_sign", "description": "", "definition": "sign(student_scalar) = sign(correct_quantity) "}], "settings": [{"name": "correctAnswer", "label": "Correct Quantity.", "help_url": "", "hint": "The correct answer given as a JME quantity.", "input_type": "code", "default_value": "", "evaluate": true}, {"name": "right", "label": "% Accuracy for right.", "help_url": "", "hint": "Question will be considered correct if the scalar part of the student's answer is within this % of correct value.", "input_type": "code", "default_value": "0.2", "evaluate": true}, {"name": "close", "label": "% Accuracy for close.", "help_url": "", "hint": "Question will be considered close if the scalar part of the student's answer is within this % of correct value.", "input_type": "code", "default_value": "1.0", "evaluate": true}, {"name": "C1", "label": "Close with units.", "help_url": "", "hint": "Partial Credit for close value with appropriate units. &nbsp;if correct answer is 100 N and close is &plusmn;1%,<br />99 &nbsp;N is accepted.", "input_type": "percent", "default_value": "75"}, {"name": "C2", "label": "No units or wrong sign", "help_url": "", "hint": "Partial credit for forgetting units or using wrong sign.<br />If the correct answer is 100 N, both 100 and -100 N are accepted.", "input_type": "percent", "default_value": "50"}, {"name": "C3", "label": "Close, no units.", "help_url": "", "hint": "Partial Credit for close value but forgotten units.<br />This value would be close&nbsp;if the expected units were provided. &nbsp;If the correct answer is 100 N, and close is &plusmn;1%,<br />99 is accepted.", "input_type": "percent", "default_value": "25"}], "public_availability": "always", "published": true, "extensions": ["quantities"]}], "resources": [], "navigation": {"allowregen": true, "showfrontpage": false, "preventleave": false}, "contributors": [{"name": "William Haynes", "profile_url": "https://numbas.mathcentre.ac.uk/accounts/profile/2530/"}], "tags": ["geometry", "Statics", "statics", "trig"], "metadata": {"description": "<p>Find an interior angle and length of a diagonal of a random parallelogram.</p>", "licence": "Creative Commons Attribution-NonCommercial 4.0 International"}, "statement": "<p>{applet()}</p>\n<p>The lengths of the sides of parallelogram are $\\overline{AB} =\\overline{CD} = \\var{qty(AB,units)}$ and&nbsp;$\\overline{AD} =\\overline{BC} = \\var{qty(AD,units)}$, and the known angles are $\\theta = \\var{theta}^\\circ$ and $\\phi = \\var{phi}^\\circ$.</p>\n<p>Determine $\\angle{ABC}$ and the length of the diagonal $\\overline{AC}$.</p>\n<p></p>", "advice": "<p><b>From geometry:</b></p>\n<p>$\\begin{align} \\angle ABC &amp;= \\theta + (90&deg; - \\phi)\\\\&nbsp;&amp;= &nbsp;\\var{theta}^{\\circ} + (90^{\\circ}&nbsp;- \\var{phi}^\\circ) \\\\&amp;= \\var{ABC}^{\\circ}\\end{align}$</p>\n<p><strong>From the law of cosines:</strong></p>\n<p>$\\begin{align} (\\overline{AC})^2&amp;= (\\overline{AB})^2 + (\\overline{AD})^2 - 2(\\overline{AB})(\\overline{AD})\\cos{\\angle ABC}\\\\&amp;= \\var{AB}^2&nbsp; + \\var{AD}^2 - 2&nbsp;(\\var{AB})&nbsp;(\\var{AD}) \\cos{\\var{ABC}}\\\\&amp;= \\var{qty(siground(AC ^2,4),units+'^2')}\\\\&nbsp;\\\\\\overline{AC} &amp;= \\sqrt{\\var{qty(siground(AC ^2,4),units+'^2')}}\\\\ &amp;= \\var{qty(AC,units)}\\end{align}$</p>", "rulesets": {}, "variables": {"theta": {"name": "theta", "group": "Ungrouped variables", "definition": "random(20..60#5)", "description": "", "templateType": "anything"}, "phi": {"name": "phi", "group": "Ungrouped variables", "definition": "random(30..75#5)\n", "description": "", "templateType": "anything"}, "AB": {"name": "AB", "group": "Ungrouped variables", "definition": "random(4..10)", "description": "", "templateType": "anything"}, "AD": {"name": "AD", "group": "Ungrouped variables", "definition": "random(4..12)", "description": "", "templateType": "anything"}, "B": {"name": "B", "group": "Ungrouped variables", "definition": "vector(cos(radians(90-theta)), sin(radians(90-theta))) AB", "description": "", "templateType": "anything"}, "D": {"name": "D", "group": "Ungrouped variables", "definition": "vector(cos(radians(-phi)), sin(radians(-phi))) AD", "description": "", "templateType": "anything"}, "C": {"name": "C", "group": "Ungrouped variables", "definition": "B+D", "description": "", "templateType": "anything"}, "units": {"name": "units", "group": "Ungrouped variables", "definition": "random(['in','ft','mm','m'])", "description": "", "templateType": "anything"}, "ABC": {"name": "ABC", "group": "Solution", "definition": "theta + 90 - phi", "description": "<p>angle ABC</p>", "templateType": "anything"}, "AC": {"name": "AC", "group": "Solution", "definition": "siground(sqrt(C[0]^2 + C[1]^2),4)", "description": "", "templateType": "anything"}}, "variablesTest": {"condition": "AB <> AD and C[1] > 1 and ABC <> 90", "maxRuns": 100}, "ungrouped_variables": ["theta", "phi", "AB", "AD", "B", "D", "C", "units"], "variable_groups": [{"name": "Solution", "variables": ["ABC", "AC"]}], "functions": {"applet": {"parameters": [], "type": "ggbapplet", "language": "javascript", "definition": "// Create the worksheet. \n// This function returns an object with a container `element` and a `promise` resolving to a GeoGebra applet.\nvar params = {\n  material_id: 'nxg7xva7'\n};\n\nvar result = Numbas.extensions.geogebra.createGeogebraApplet(params);\n\n// Once the applet has loaded, run some commands to manipulate the worksheet.\nresult.promise.then(function(d) {\n  var app = d.app;\n  question.applet = d;\n   \n  function setGGBPoint(name, nname=name) {\n    // moves point in GGB to Numbas value\n    var pt = Numbas.jme.unwrapValue(question.scope.getVariable(nname));\n    app.setFixed(name,false,false);\n    app.setCoords(name, pt[0], pt[1]);\n    app.setFixed(name,true,true);\n  }\n  \n  setGGBPoint(\"B\");\n  setGGBPoint(\"D\");\n  app.setValue(\"show\",false);\n  app.setVisible(\"f\",false); // diagonal\n  //app.setLabelStyle('\u03b8',2);\n  //app.setLabelStyle('\u03a6',2);\n  //app.setVisible(\"MP\",true);\n  \n});\n\n// This function returns the result of `createGeogebraApplet` as an object \n// with the JME data type 'ggbapplet', which can be substituted into the question's content.\nreturn new Numbas.jme.types.ggbapplet(result);"}}, "preamble": {"js": "question.signals.on('adviceDisplayed',function() {\n  try{\n    var app = question.applet.app;\n   app.setVisible(\"f\",true);\n  app.setValue(\"show\",true);\n  app.setVisible(\"show\",true);\n  app.setLabelVisible(\"show\",false);\n  \n  }\n  catch(err){}  \n})\n\n", "css": ""}, "parts": [{"type": "gapfill", "useCustomName": false, "customName": "", "marks": 0, "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "prompt": "<p>$\\angle ABC = $&nbsp; &nbsp;[[0]] &nbsp; &nbsp;$\\overline{AC} = $&nbsp;[[1]]&nbsp;&nbsp;</p>", "gaps": [{"type": "engineering-answer", "useCustomName": true, "customName": "$\\angle AC$", "marks": "10", "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "settings": {"correctAnswer": "qty(ABC,'deg')", "right": "0.2", "close": "1.0", "C1": "75", "C2": "50", "C3": "25"}}, {"type": "engineering-answer", "useCustomName": true, "customName": "AC", "marks": "10", "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "settings": {"correctAnswer": "qty(ac,units)", "right": "0.2", "close": "1.0", "C1": "75", "C2": "50", "C3": "25"}}], "sortAnswers": false}], "partsMode": "all", "maxMarks": 0, "objectives": [], "penalties": [], "objectiveVisibility": "always", "penaltyVisibility": "always"}, {"name": "cos rule - find a side", "extensions": [], "custom_part_types": [], "resources": [["question-resources/AcuteTriangle_tSonQMW.svg", "/srv/numbas/media/question-resources/AcuteTriangle_tSonQMW.svg"], ["question-resources/ObtuseTriangle_Fe8ESh4.svg", "/srv/numbas/media/question-resources/ObtuseTriangle_Fe8ESh4.svg"]], "navigation": {"allowregen": true, "showfrontpage": false, "preventleave": false}, "contributors": [{"name": "Merryn Horrocks", "profile_url": "https://numbas.mathcentre.ac.uk/accounts/profile/4052/"}], "tags": [], "metadata": {"description": "<p>Student is given a triangle with the value of&nbsp;2 sides and 1 or 2 angles and asked to find the value of&nbsp;the third side using the cosine rule. Triangle can be acute or obtuse.</p>\n<p>Side and angle lengths are randomised. Units are randomised.</p>", "licence": "Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International"}, "statement": "<p>Use the cosine rule to find the value of {dspchosenside}.&nbsp;Give your answer rounded to the 1 decimal place.</p>\n<p><span data-jme-visible=\"obtuse=0\">&nbsp;<img src=\"resources/question-resources/AcuteTriangle_tSonQMW.svg\"/>&nbsp;</span>&nbsp;<span data-jme-visible=\"obtuse=1\">&nbsp;<img src=\"resources/question-resources/ObtuseTriangle_Fe8ESh4.svg\"/>&nbsp;</span>&nbsp;&nbsp;</p>\n<p><em>not to scale</em></p>\n<p></p>", "advice": "<p>To find the value of <em>{dspchosenside}</em> we need to use the cosine rule.</p>\n<p>We need to use the angle opposite&nbsp;<em>{dspchosenside}</em> <span data-jme-visible=\"dsp1angle=0\">but this is not given so we need to work it out:</span></p>\n<p><span data-jme-visible=\"dsp1angle=0\">angle = 180&deg; - {angle_dsp_vals[helpingvar]} - {angle_dsp_vals[othervar]} = {angle_dsp_vals[findvar]}</span></p>\n<p>$\\var{dspchosenside}^2 = \\var{side_dsp_vals[helpingvar]}^2&nbsp;+&nbsp;\\var{side_dsp_vals[othervar]}^2 - 2 \\times&nbsp;\\var{side_dsp_vals[helpingvar]} \\times \\var{side_dsp_vals[othervar]} \\times \\cos(\\var{angle_dsp_vals[findvar]})$</p>\n<p>Take the square root of both sides:</p>\n<p>$\\var{dspchosenside} = \\sqrt{\\var{side_dsp_vals[helpingvar]}^2 +&nbsp;\\var{side_dsp_vals[othervar]}^2 - 2 \\times&nbsp;\\var{side_dsp_vals[helpingvar]} \\times \\var{side_dsp_vals[othervar]} \\times \\cos(\\var{angle_dsp_vals[findvar]})}=\\var{side_dsp_vals[findvar]}$ {units}</p>\n<p></p>", "rulesets": {}, "variables": {"obtuse": {"name": "obtuse", "group": "build the triangle", "definition": "if(angle_C_val>pi/2,1,0)", "description": "", "templateType": "anything"}, "findvar": {"name": "findvar", "group": "set up the problem", "definition": "random(0,1,2)", "description": "<p>0 = A, 1 = B, 2 = C</p>", "templateType": "anything"}, "side_b_val": {"name": "side_b_val", "group": "build the triangle", "definition": "decimal(random(5..200)/10)", "description": "", "templateType": "anything"}, "side_c_val": {"name": "side_c_val", "group": "build the triangle", "definition": "decimal(random(side_b_val*10..min(250,2*side_b_val*10))/10)", "description": "", "templateType": "anything"}, "angle_A_deg": {"name": "angle_A_deg", "group": "build the triangle", "definition": "random(10..50)", "description": "", "templateType": "anything"}, "angle_A_min": {"name": "angle_A_min", "group": "build the triangle", "definition": "random(0..59)", "description": "", "templateType": "anything"}, "angle_A_val": {"name": "angle_A_val", "group": "build the triangle", "definition": "radians(angle_A_deg + angle_A_min/60)", "description": "", "templateType": "anything"}, "side_a_val": {"name": "side_a_val", "group": "build the triangle", "definition": "precround(cosrule_side(side_b_val,side_c_val,angle_A_val),1)", "description": "", "templateType": "anything"}, "angle_B_val": {"name": "angle_B_val", "group": "build the triangle", "definition": "round_to_min(cosrule_angle(side_a_val,side_c_val,side_b_val))", "description": "", "templateType": "anything"}, "angle_C_val": {"name": "angle_C_val", "group": "build the triangle", "definition": "round_to_min(pi-angle_A_val-angle_B_val)", "description": "", "templateType": "anything"}, "aA": {"name": "aA", "group": "display vars", "definition": "if (findvar=0 and dsp1angle=1,angle_dsp_vals[0],if(findvar<>0 and dsp1angle=0,angle_dsp_vals[0],''))", "description": "", "templateType": "anything"}, "aB": {"name": "aB", "group": "display vars", "definition": "if (findvar=1 and dsp1angle=1,angle_dsp_vals[1],if(findvar<>1 and dsp1angle=0,angle_dsp_vals[1],''))", "description": "", "templateType": "anything"}, "aC": {"name": "aC", "group": "display vars", "definition": "if (findvar=2 and dsp1angle=1,angle_dsp_vals[2],if(findvar<>2 and dsp1angle=0,angle_dsp_vals[2],''))", "description": "", "templateType": "anything"}, "sa": {"name": "sa", "group": "display vars", "definition": "if(findvar=0,'a',side_dsp_vals[0])", "description": "", "templateType": "anything"}, "sb": {"name": "sb", "group": "display vars", "definition": "if(findvar=1,'b',side_dsp_vals[1])", "description": "", "templateType": "anything"}, "sc": {"name": "sc", "group": "display vars", "definition": "if(findvar=2,'c',side_dsp_vals[2])", "description": "", "templateType": "anything"}, "helpingvar": {"name": "helpingvar", "group": "set up the problem", "definition": "if(findvar=0,random(1,2),if(findvar=1,random(0,2),random(0,1)))", "description": "<p>0=a, 1=b, 2=c</p>", "templateType": "anything"}, "side_vals": {"name": "side_vals", "group": "set up the problem", "definition": "[side_a_val,side_b_val,side_c_val]", "description": "", "templateType": "anything"}, "angle_dsp_names": {"name": "angle_dsp_names", "group": "set up the problem", "definition": "['A','B','C']", "description": "", "templateType": "anything"}, "side_dsp_vals": {"name": "side_dsp_vals", "group": "set up the problem", "definition": "[precround(side_a_val,1),precround(side_b_val,1),precround(side_c_val,1)]", "description": "", "templateType": "anything"}, "angle_dsp_vals": {"name": "angle_dsp_vals", "group": "set up the problem", "definition": "[deg_to_degmin(degrees(angle_A_val)),deg_to_degmin(degrees(angle_B_val)),deg_to_degmin(degrees(angle_C_val))]", "description": "", "templateType": "anything"}, "unitchoices": {"name": "unitchoices", "group": "display vars", "definition": "['mm','cm','m','km']", "description": "", "templateType": "anything"}, "units": {"name": "units", "group": "display vars", "definition": "random(unitchoices)", "description": "", "templateType": "anything"}, "othervar": {"name": "othervar", "group": "set up the problem", "definition": "3-findvar-helpingvar", "description": "", "templateType": "anything"}, "answer": {"name": "answer", "group": "set up the problem", "definition": "precround(cosrule_side(side_vals[helpingvar],side_vals[othervar],angle_vals[findvar]),1)", "description": "", "templateType": "anything"}, "dspchosenside": {"name": "dspchosenside", "group": "set up the problem", "definition": "side_dsp_names[findvar]", "description": "", "templateType": "anything"}, "dsp1angle": {"name": "dsp1angle", "group": "display vars", "definition": "random(0,1)", "description": "<p>0 =&nbsp;no: the other 2 angles are given</p>\n<p>1 = yes: the opposite angle is given</p>", "templateType": "anything"}, "test": {"name": "test", "group": "build the triangle", "definition": "round_to_min(cosrule_angle(side_a_val,side_c_val,side_b_val))", "description": "", "templateType": "anything"}, "side_dsp_names": {"name": "side_dsp_names", "group": "set up the problem", "definition": "['a','b','c']", "description": "", "templateType": "anything"}, "angle_vals": {"name": "angle_vals", "group": "set up the problem", "definition": "[angle_A_val,angle_B_val,angle_C_val]", "description": "", "templateType": "anything"}}, "variablesTest": {"condition": "", "maxRuns": 100}, "ungrouped_variables": [], "variable_groups": [{"name": "build the triangle", "variables": ["side_a_val", "side_b_val", "side_c_val", "angle_A_deg", "angle_A_min", "angle_A_val", "angle_B_val", "angle_C_val", "obtuse", "test"]}, {"name": "display vars", "variables": ["aA", "aB", "aC", "sa", "sb", "sc", "unitchoices", "units", "dsp1angle"]}, {"name": "set up the problem", "variables": ["findvar", "helpingvar", "othervar", "answer", "side_vals", "side_dsp_vals", "side_dsp_names", "angle_vals", "angle_dsp_vals", "angle_dsp_names", "dspchosenside"]}], "functions": {"deg_to_degmin": {"parameters": [["deg", "number"]], "type": "string", "language": "javascript", "definition": "min=Math.round((deg-Math.trunc(deg))*60);\ndegstr=String(Math.trunc(deg))+\"\u00b0\"+String(min)+\"'\";\nreturn degstr;"}, "dms": {"parameters": [["deg", "number"]], "type": "string", "language": "javascript", "definition": "degrees = Math.trunc(deg);\nmin = (deg - Math.trunc(deg))*60;\nminutes = Math.round(min);\nseconds = Math.round((min - Math.trunc(min))*6000)/100;\ndegstr=String(degrees)+\"\u00b0\"+String(minutes)+\"'\"+String(seconds)+\"''\";\nreturn degstr;"}, "cosrule_side": {"parameters": [["a", "number"], ["b", "number"], ["C", "number"]], "type": "number", "language": "javascript", "definition": "tmp=Math.pow(a,2) + Math.pow(b,2) - 2*a*b*Math.cos(C);\ntmp2 = Math.sqrt(tmp);\nreturn tmp2;"}, "sinerule_angle": {"parameters": [["a", "number"], ["b", "number"], ["angB", "number"]], "type": "number", "language": "javascript", "definition": "return Math.asin(a*Math.sin(angB)/b)"}, "cosrule_angle": {"parameters": [["a", "number"], ["b", "number"], ["c", "number"]], "type": "number", "language": "javascript", "definition": "num = Math.pow(a,2) + Math.pow(b,2) - Math.pow(c,2);\nden = 2 * a * b\nreturn Math.acos(num/den);"}, "round_to_min": {"parameters": [["angle", "number"]], "type": "number", "language": "javascript", "definition": "deg = angle * 180 / Math.PI;\ndegrees = Math.trunc(deg);\nmin = (deg - Math.trunc(deg))*60;\nminutes = Math.round(min);\nrounded = degrees + minutes/60;\nreturn rounded * Math.PI / 180;"}}, "preamble": {"js": "", "css": ""}, "parts": [{"type": "gapfill", "useCustomName": false, "customName": "", "marks": 0, "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "prompt": "<p>{dspchosenangle} = [[0]]&nbsp;{units}</p>", "gaps": [{"type": "numberentry", "useCustomName": true, "customName": "length", "marks": 1, "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "minValue": "answer", "maxValue": "answer", "correctAnswerFraction": false, "allowFractions": false, "mustBeReduced": false, "mustBeReducedPC": 0, "showFractionHint": true, "notationStyles": ["plain", "en", "si-en"], "correctAnswerStyle": "plain"}], "sortAnswers": false}], "partsMode": "all", "maxMarks": 0, "objectives": [], "penalties": [], "objectiveVisibility": "always", "penaltyVisibility": "always"}, {"name": "cos rule - find an angle", "extensions": [], "custom_part_types": [], "resources": [["question-resources/AcuteTriangle_tSonQMW.svg", "/srv/numbas/media/question-resources/AcuteTriangle_tSonQMW.svg"], ["question-resources/ObtuseTriangle_Fe8ESh4.svg", "/srv/numbas/media/question-resources/ObtuseTriangle_Fe8ESh4.svg"]], "navigation": {"allowregen": true, "showfrontpage": false, "preventleave": false}, "contributors": [{"name": "Merryn Horrocks", "profile_url": "https://numbas.mathcentre.ac.uk/accounts/profile/4052/"}], "tags": [], "metadata": {"description": "<p>Student is given a triangle with the value of&nbsp;3 sides and asked to find the value of an&nbsp;angle. Triangle can be acute or obtuse.</p>\n<p>Side and angle lengths are randomised. Units are randomised.</p>", "licence": "Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International"}, "statement": "<p>Use the cosine rule to find the value of&nbsp;angle {dspchosenangle}.&nbsp;&nbsp;<span data-jme-visible=\"angle_vals[findvar]&gt;radians(90)\" style=\"border: 1px dotted red; margin: 0.2em 0px; padding-top: 0.5em; position: relative; line-height: 2em; color: #000000; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: #ffffff; text-decoration-style: initial; text-decoration-color: initial;\">Angle {dspchosenangle} is obtuse.</span></p>\n<p>Give your answer rounded to the nearest minute.</p>\n<p><span data-jme-visible=\"obtuse=0\">&nbsp;<img src=\"resources/question-resources/AcuteTriangle_tSonQMW.svg\"/>&nbsp;</span>&nbsp;<span data-jme-visible=\"obtuse=1\">&nbsp;<img src=\"resources/question-resources/ObtuseTriangle_Fe8ESh4.svg\"/>&nbsp;</span>&nbsp;&nbsp;</p>\n<p><em>not to scale</em></p>\n<p></p>", "advice": "<p>To find the value of <em>{dspchosenangle}</em> we need to use the cosine rule.</p>\n<p>$\\cos(\\var{dspchosenangle}) = \\frac{\\var{side_dsp_vals[helpingvar]}^2 + \\var{side_dsp_vals[othervar]}^2 - \\var{side_dsp_vals[findvar]}^2}{2 \\times \\var{side_dsp_vals[helpingvar]} \\times \\var{side_dsp_vals[othervar]}}$</p>\n<p>Take the inverse cos of both sides:</p>\n<p>$\\var{dspchosenangle} = \\cos^{-1}(\\frac{\\var{side_dsp_vals[helpingvar]}^2 +\\var{side_dsp_vals[othervar]}^2 -\\var{side_dsp_vals[findvar]}^2}{2 \\times \\var{side_dsp_vals[helpingvar]} \\times \\var{side_dsp_vals[othervar]}})&nbsp;= \\var{answer_deg}$&deg; $\\var{answer_min}$'</p>\n<p></p>", "rulesets": {}, "variables": {"obtuse": {"name": "obtuse", "group": "build the triangle", "definition": "if(angle_C_val>pi/2,1,0)", "description": "", "templateType": "anything"}, "findvar": {"name": "findvar", "group": "set up the problem", "definition": "random(0,1,2)", "description": "<p>0 = A, 1 = B, 2 = C</p>", "templateType": "anything"}, "side_b_val": {"name": "side_b_val", "group": "build the triangle", "definition": "decimal(random(5..200)/10)", "description": "", "templateType": "anything"}, "side_c_val": {"name": "side_c_val", "group": "build the triangle", "definition": "decimal(random(side_b_val*10..min(250,2*side_b_val*10))/10)", "description": "", "templateType": "anything"}, "angle_A_deg": {"name": "angle_A_deg", "group": "build the triangle", "definition": "random(10..50)", "description": "", "templateType": "anything"}, "angle_A_min": {"name": "angle_A_min", "group": "build the triangle", "definition": "random(0..59)", "description": "", "templateType": "anything"}, "angle_A_val": {"name": "angle_A_val", "group": "build the triangle", "definition": "radians(angle_A_deg + angle_A_min/60)", "description": "", "templateType": "anything"}, "side_a_val": {"name": "side_a_val", "group": "build the triangle", "definition": "precround(cosrule_side(side_b_val,side_c_val,angle_A_val),1)", "description": "", "templateType": "anything"}, "angle_B_val": {"name": "angle_B_val", "group": "build the triangle", "definition": "round_to_min(cosrule_angle(side_a_val,side_c_val,side_b_val))", "description": "", "templateType": "anything"}, "angle_C_val": {"name": "angle_C_val", "group": "build the triangle", "definition": "round_to_min(pi-angle_A_val-angle_B_val)", "description": "", "templateType": "anything"}, "aA": {"name": "aA", "group": "display vars", "definition": "if (findvar=0,'A','')", "description": "", "templateType": "anything"}, "aB": {"name": "aB", "group": "display vars", "definition": "if (findvar=1,'B','')", "description": "", "templateType": "anything"}, "aC": {"name": "aC", "group": "display vars", "definition": "if(findvar=2,'C','')", "description": "", "templateType": "anything"}, "sa": {"name": "sa", "group": "display vars", "definition": "side_dsp_vals[0]", "description": "", "templateType": "anything"}, "sb": {"name": "sb", "group": "display vars", "definition": "side_dsp_vals[1]", "description": "", "templateType": "anything"}, "sc": {"name": "sc", "group": "display vars", "definition": "side_dsp_vals[2]", "description": "", "templateType": "anything"}, "helpingvar": {"name": "helpingvar", "group": "set up the problem", "definition": "if(findvar=0,random(1,2),if(findvar=1,random(0,2),random(0,1)))", "description": "<p>0=a, 1=b, 2=c</p>", "templateType": "anything"}, "side_vals": {"name": "side_vals", "group": "set up the problem", "definition": "[side_a_val,side_b_val,side_c_val]", "description": "", "templateType": "anything"}, "angle_dsp_names": {"name": "angle_dsp_names", "group": "set up the problem", "definition": "['A','B','C']", "description": "", "templateType": "anything"}, "side_dsp_vals": {"name": "side_dsp_vals", "group": "set up the problem", "definition": "[precround(side_a_val,1),precround(side_b_val,1),precround(side_c_val,1)]", "description": "", "templateType": "anything"}, "angle_dsp_vals": {"name": "angle_dsp_vals", "group": "set up the problem", "definition": "[deg_to_degmin(degrees(angle_A_val)),deg_to_degmin(degrees(angle_B_val)),deg_to_degmin(degrees(angle_C_val))]", "description": "", "templateType": "anything"}, "unitchoices": {"name": "unitchoices", "group": "display vars", "definition": "['mm','cm','m','km']", "description": "", "templateType": "anything"}, "units": {"name": "units", "group": "display vars", "definition": "random(unitchoices)", "description": "", "templateType": "anything"}, "othervar": {"name": "othervar", "group": "set up the problem", "definition": "3-findvar-helpingvar", "description": "", "templateType": "anything"}, "answer": {"name": "answer", "group": "set up the problem", "definition": "cosrule_angle(side_vals[helpingvar],side_vals[othervar],side_vals[findvar])", "description": "", "templateType": "anything"}, "dspchosenangle": {"name": "dspchosenangle", "group": "set up the problem", "definition": "angle_dsp_names[findvar]", "description": "", "templateType": "anything"}, "dsp3rdside": {"name": "dsp3rdside", "group": "display vars", "definition": "random(0,1)", "description": "<p>0 =&nbsp;no</p>\n<p>1 = yes</p>", "templateType": "anything"}, "answer_deg": {"name": "answer_deg", "group": "set up the problem", "definition": "decimal(split(deg_to_degmin(degrees(answer)),'\u00b0')[0])", "description": "", "templateType": "anything"}, "test": {"name": "test", "group": "build the triangle", "definition": "round_to_min(cosrule_angle(side_a_val,side_c_val,side_b_val))", "description": "", "templateType": "anything"}, "side_dsp_names": {"name": "side_dsp_names", "group": "set up the problem", "definition": "['a','b','c']", "description": "", "templateType": "anything"}, "angleA": {"name": "angleA", "group": "display vars", "definition": "deg_to_degmin(degrees(angle_A_val))", "description": "", "templateType": "anything"}, "answer_min": {"name": "answer_min", "group": "set up the problem", "definition": "decimal(split(split(deg_to_degmin(degrees(answer)),'\u00b0')[1],\"'\")[0])", "description": "", "templateType": "anything"}, "angleB": {"name": "angleB", "group": "display vars", "definition": "deg_to_degmin(degrees(angle_B_val))", "description": "", "templateType": "anything"}, "angleC": {"name": "angleC", "group": "display vars", "definition": "deg_to_degmin(degrees(angle_C_val))", "description": "", "templateType": "anything"}, "angle_vals": {"name": "angle_vals", "group": "set up the problem", "definition": "[angle_A_val,angle_B_val,angle_C_val]", "description": "", "templateType": "anything"}}, "variablesTest": {"condition": "", "maxRuns": 100}, "ungrouped_variables": [], "variable_groups": [{"name": "build the triangle", "variables": ["side_a_val", "side_b_val", "side_c_val", "angle_A_deg", "angle_A_min", "angle_A_val", "angle_B_val", "angle_C_val", "obtuse", "test"]}, {"name": "display vars", "variables": ["aA", "aB", "aC", "sa", "sb", "sc", "unitchoices", "units", "dsp3rdside", "angleA", "angleB", "angleC"]}, {"name": "set up the problem", "variables": ["findvar", "helpingvar", "othervar", "answer", "answer_deg", "answer_min", "side_vals", "side_dsp_vals", "side_dsp_names", "angle_dsp_vals", "angle_dsp_names", "dspchosenangle", "angle_vals"]}], "functions": {"deg_to_degmin": {"parameters": [["deg", "number"]], "type": "string", "language": "javascript", "definition": "min=Math.round((deg-Math.trunc(deg))*60);\ndegstr=String(Math.trunc(deg))+\"\u00b0\"+String(min)+\"'\";\nreturn degstr;"}, "dms": {"parameters": [["deg", "number"]], "type": "string", "language": "javascript", "definition": "degrees = Math.trunc(deg);\nmin = (deg - Math.trunc(deg))*60;\nminutes = Math.round(min);\nseconds = Math.round((min - Math.trunc(min))*6000)/100;\ndegstr=String(degrees)+\"\u00b0\"+String(minutes)+\"'\"+String(seconds)+\"''\";\nreturn degstr;"}, "cosrule_side": {"parameters": [["a", "number"], ["b", "number"], ["C", "number"]], "type": "number", "language": "javascript", "definition": "tmp=Math.pow(a,2) + Math.pow(b,2) - 2*a*b*Math.cos(C);\ntmp2 = Math.sqrt(tmp);\nreturn tmp2;"}, "sinerule_angle": {"parameters": [["a", "number"], ["b", "number"], ["angB", "number"]], "type": "number", "language": "javascript", "definition": "return Math.asin(a*Math.sin(angB)/b)"}, "cosrule_angle": {"parameters": [["a", "number"], ["b", "number"], ["c", "number"]], "type": "number", "language": "javascript", "definition": "num = Math.pow(a,2) + Math.pow(b,2) - Math.pow(c,2);\nden = 2 * a * b\nreturn Math.acos(num/den);"}, "round_to_min": {"parameters": [["angle", "number"]], "type": "number", "language": "javascript", "definition": "deg = angle * 180 / Math.PI;\ndegrees = Math.trunc(deg);\nmin = (deg - Math.trunc(deg))*60;\nminutes = Math.round(min);\nrounded = degrees + minutes/60;\nreturn rounded * Math.PI / 180;"}}, "preamble": {"js": "", "css": ""}, "parts": [{"type": "gapfill", "useCustomName": false, "customName": "", "marks": 0, "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "prompt": "<p>{dspchosenangle} = [[0]]&nbsp;&deg;[[1]]'</p>", "gaps": [{"type": "numberentry", "useCustomName": true, "customName": "degrees", "marks": 1, "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "minValue": "answer_deg", "maxValue": "answer_deg", "correctAnswerFraction": false, "allowFractions": false, "mustBeReduced": false, "mustBeReducedPC": 0, "showFractionHint": true, "notationStyles": ["plain", "en", "si-en"], "correctAnswerStyle": "plain"}, {"type": "numberentry", "useCustomName": true, "customName": "minutes", "marks": 1, "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "minValue": "answer_min", "maxValue": "answer_min", "correctAnswerFraction": false, "allowFractions": false, "mustBeReduced": false, "mustBeReducedPC": 0, "showFractionHint": true, "notationStyles": ["plain", "en", "si-en"], "correctAnswerStyle": "plain"}], "sortAnswers": false}], "partsMode": "all", "maxMarks": 0, "objectives": [], "penalties": [], "objectiveVisibility": "always", "penaltyVisibility": "always"}, {"name": "sine rule - find a side", "extensions": [], "custom_part_types": [], "resources": [["question-resources/AcuteTriangle_tSonQMW.svg", "/srv/numbas/media/question-resources/AcuteTriangle_tSonQMW.svg"], ["question-resources/ObtuseTriangle_Fe8ESh4.svg", "/srv/numbas/media/question-resources/ObtuseTriangle_Fe8ESh4.svg"]], "navigation": {"allowregen": true, "showfrontpage": false, "preventleave": false}, "contributors": [{"name": "Merryn Horrocks", "profile_url": "https://numbas.mathcentre.ac.uk/accounts/profile/4052/"}], "tags": [], "metadata": {"description": "<p>Student is given a triangle with the value of 1 side and 2 or 3 angles and asked to find the value of another side. Triangle can be acute or obtuse.</p>\n<p>Side and angle lengths are randomised. Units are randomised.</p>", "licence": "Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International"}, "statement": "<p>Find the value of side {dspchosenside}. Round your answer to 1 decimal place.</p>\n<p><span data-jme-visible=\"obtuse=0\">&nbsp;<img src=\"resources/question-resources/AcuteTriangle_tSonQMW.svg\"/>&nbsp;</span>&nbsp;<span data-jme-visible=\"obtuse=1\">&nbsp;<img src=\"resources/question-resources/ObtuseTriangle_Fe8ESh4.svg\"/>&nbsp;</span>&nbsp;&nbsp;</p>\n<p><em>not to scale</em></p>\n<p></p>", "advice": "<p>To find the value of <em>{dspchosenside}</em> we need to use the sine rule.</p>\n<p>This means that we need to find the value of the angle opposite side <em>{dspchosenside}</em> and one other side and opposite angle.</p>\n<p><span data-jme-visible=\"dsp3rdangle=0\">Since the angle opposite {dspchosenside} is not given, we need to work it out, using the fact that the angles in the triangle sum to 180&ordm;.</span></p>\n<p><span data-jme-visible=\"dsp3rdangle=0\">angle = 180&ordm; - {angle_dsp_vals[helpingvar]}&nbsp;- {angle_dsp_vals[othervar]} = {angle_dsp_vals[findvar]}</span></p>\n<p>$\\frac{\\var{dspchosenside}}{\\sin(\\var{angle_dsp_vals[findvar]})}=\\frac{\\var{side_dsp_vals[helpingvar]}}{\\sin(\\var{angle_dsp_vals[helpingvar]})}$</p>\n<p>Next we multiply both sides by ${\\sin(\\var{angle_dsp_vals[findvar]})}$</p>\n<p>$\\var{dspchosenside}=\\frac{\\sin(\\var{angle_dsp_vals[findvar]})\\times \\var{side_dsp_vals[helpingvar]}}{\\sin(\\var{angle_dsp_vals[helpingvar]})} = \\var{answer}$ {units}</p>", "rulesets": {}, "variables": {"obtuse": {"name": "obtuse", "group": "build the triangle", "definition": "if(angle_C_val>pi/2,1,0)", "description": "", "templateType": "anything"}, "findvar": {"name": "findvar", "group": "set up the problem", "definition": "random(0,1,2)", "description": "<p>0 = A, 1 = B, 2 = C</p>", "templateType": "anything"}, "side_b_val": {"name": "side_b_val", "group": "build the triangle", "definition": "decimal(random(5..200)/10)", "description": "", "templateType": "anything"}, "side_c_val": {"name": "side_c_val", "group": "build the triangle", "definition": "decimal(random(side_b_val*10..min(250,2*side_b_val*10))/10)", "description": "", "templateType": "anything"}, "angle_A_deg": {"name": "angle_A_deg", "group": "build the triangle", "definition": "random(10..50)", "description": "", "templateType": "anything"}, "angle_A_min": {"name": "angle_A_min", "group": "build the triangle", "definition": "random(0..59)", "description": "", "templateType": "anything"}, "angle_A_val": {"name": "angle_A_val", "group": "build the triangle", "definition": "radians(angle_A_deg + angle_A_min/60)", "description": "", "templateType": "anything"}, "side_a_val": {"name": "side_a_val", "group": "build the triangle", "definition": "precround(cosrule_side(side_b_val,side_c_val,angle_A_val),1)", "description": "", "templateType": "anything"}, "angle_B_val": {"name": "angle_B_val", "group": "build the triangle", "definition": "cosrule_angle(side_a_val,side_c_val,side_b_val)", "description": "", "templateType": "anything"}, "angle_C_val": {"name": "angle_C_val", "group": "build the triangle", "definition": "pi-angle_A_val-angle_B_val", "description": "", "templateType": "anything"}, "aA": {"name": "aA", "group": "display vars", "definition": "if ((findvar=0 and dsp3rdangle <> 0) or (helpingvar=0) or (findvar<>0 and helpingvar <>0 and dsp3rdangle<>1), angle_dsp_vals[0],'')", "description": "", "templateType": "anything"}, "aB": {"name": "aB", "group": "display vars", "definition": "if ((findvar=1 and dsp3rdangle <> 0) or (helpingvar=1) or (findvar<>1 and helpingvar <>1 and dsp3rdangle<>1), angle_dsp_vals[1],'')", "description": "", "templateType": "anything"}, "aC": {"name": "aC", "group": "display vars", "definition": "if ((findvar=2 and dsp3rdangle <> 0) or (helpingvar=2) or (findvar<>2 and helpingvar <>2 and dsp3rdangle<>1), angle_dsp_vals[2],'')", "description": "", "templateType": "anything"}, "sa": {"name": "sa", "group": "display vars", "definition": "if(findvar=0,'a',if(helpingvar=0,string(side_dsp_vals[0])+' ' +units,''))", "description": "", "templateType": "anything"}, "sb": {"name": "sb", "group": "display vars", "definition": "if(findvar=1,'b',if(helpingvar=1,string(side_dsp_vals[1])+' ' +units,''))", "description": "", "templateType": "anything"}, "sc": {"name": "sc", "group": "display vars", "definition": "if(findvar=2,'c',if(helpingvar=2,string(side_dsp_vals[2])+' ' +units,''))", "description": "", "templateType": "anything"}, "helpingvar": {"name": "helpingvar", "group": "set up the problem", "definition": "if(findvar=0,random(1,2),if(findvar=1,random(0,2),random(0,1)))", "description": "<p>0=a, 1=b, 2=c</p>", "templateType": "anything"}, "side_vals": {"name": "side_vals", "group": "set up the problem", "definition": "[side_a_val,side_b_val,side_c_val]", "description": "", "templateType": "anything"}, "angle_vals": {"name": "angle_vals", "group": "set up the problem", "definition": "[angle_A_val,angle_B_val,angle_C_val]", "description": "", "templateType": "anything"}, "side_dsp_names": {"name": "side_dsp_names", "group": "set up the problem", "definition": "['a','b','c']", "description": "", "templateType": "anything"}, "angle_dsp_names": {"name": "angle_dsp_names", "group": "set up the problem", "definition": "['A','B','C']", "description": "", "templateType": "anything"}, "side_dsp_vals": {"name": "side_dsp_vals", "group": "set up the problem", "definition": "[precround(side_a_val,1),precround(side_b_val,1),precround(side_c_val,1)]", "description": "", "templateType": "anything"}, "angle_dsp_vals": {"name": "angle_dsp_vals", "group": "set up the problem", "definition": "[deg_to_degmin(degrees(angle_A_val)),deg_to_degmin(degrees(angle_B_val)),deg_to_degmin(degrees(angle_C_val))]", "description": "", "templateType": "anything"}, "unitchoices": {"name": "unitchoices", "group": "display vars", "definition": "['mm','cm','m','km']", "description": "", "templateType": "anything"}, "units": {"name": "units", "group": "display vars", "definition": "random(unitchoices)", "description": "", "templateType": "anything"}, "dsp3rdangle": {"name": "dsp3rdangle", "group": "display vars", "definition": "random(0,1,2)", "description": "<p>0 = display 2nd angle</p>\n<p>1 = display 3rd angle</p>\n<p>2 = display both</p>", "templateType": "anything"}, "dspchosenside": {"name": "dspchosenside", "group": "set up the problem", "definition": "side_dsp_names[findvar]", "description": "", "templateType": "anything"}, "othervar": {"name": "othervar", "group": "set up the problem", "definition": "3-findvar-helpingvar", "description": "", "templateType": "anything"}, "answer": {"name": "answer", "group": "set up the problem", "definition": "precround(sin(angle_vals[findvar])*side_vals[helpingvar]/sin(angle_vals[helpingvar]),1)", "description": "", "templateType": "anything"}}, "variablesTest": {"condition": "", "maxRuns": 100}, "ungrouped_variables": [], "variable_groups": [{"name": "build the triangle", "variables": ["side_a_val", "side_b_val", "side_c_val", "angle_A_deg", "angle_A_min", "angle_A_val", "angle_B_val", "angle_C_val", "obtuse"]}, {"name": "display vars", "variables": ["aA", "aB", "aC", "sa", "sb", "sc", "unitchoices", "units", "dsp3rdangle"]}, {"name": "set up the problem", "variables": ["findvar", "helpingvar", "othervar", "side_vals", "side_dsp_vals", "side_dsp_names", "angle_vals", "angle_dsp_vals", "angle_dsp_names", "dspchosenside", "answer"]}], "functions": {"deg_to_degmin": {"parameters": [["deg", "number"]], "type": "string", "language": "javascript", "definition": "min=Math.round((deg-Math.trunc(deg))*60);\ndegstr=String(Math.trunc(deg))+\"\u00b0\"+String(min)+\"'\";\nreturn degstr;"}, "dms": {"parameters": [["deg", "number"]], "type": "string", "language": "javascript", "definition": "degrees = Math.trunc(deg);\nmin = (deg - Math.trunc(deg))*60;\nminutes = Math.round(min);\nseconds = Math.round((min - Math.trunc(min))*6000)/100;\ndegstr=String(degrees)+\"\u00b0\"+String(minutes)+\"'\"+String(seconds)+\"''\";\nreturn degstr;"}, "cosrule_side": {"parameters": [["a", "number"], ["b", "number"], ["C", "number"]], "type": "number", "language": "javascript", "definition": "tmp=Math.pow(a,2) + Math.pow(b,2) - 2*a*b*Math.cos(C);\ntmp2 = Math.sqrt(tmp);\nreturn tmp2;"}, "sinerule_angle": {"parameters": [["a", "number"], ["b", "number"], ["angB", "number"]], "type": "number", "language": "javascript", "definition": "return Math.asin(a*Math.sin(angB)/b)"}, "cosrule_angle": {"parameters": [["a", "number"], ["b", "number"], ["c", "number"]], "type": "number", "language": "javascript", "definition": "num = Math.pow(a,2) + Math.pow(b,2) - Math.pow(c,2);\nden = 2 * a * b\nreturn Math.acos(num/den);"}}, "preamble": {"js": "", "css": ""}, "parts": [{"type": "gapfill", "useCustomName": false, "customName": "", "marks": 0, "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "prompt": "<p>{dspchosenside} = [[0]] {units}</p>", "gaps": [{"type": "numberentry", "useCustomName": false, "customName": "", "marks": 1, "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "minValue": "answer", "maxValue": "answer", "correctAnswerFraction": false, "allowFractions": false, "mustBeReduced": false, "mustBeReducedPC": 0, "showFractionHint": true, "notationStyles": ["plain", "en", "si-en"], "correctAnswerStyle": "plain"}], "sortAnswers": false}], "partsMode": "all", "maxMarks": 0, "objectives": [], "penalties": [], "objectiveVisibility": "always", "penaltyVisibility": "always"}, {"name": "sine rule - find an angle", "extensions": [], "custom_part_types": [], "resources": [["question-resources/AcuteTriangle_tSonQMW.svg", "/srv/numbas/media/question-resources/AcuteTriangle_tSonQMW.svg"], ["question-resources/ObtuseTriangle_Fe8ESh4.svg", "/srv/numbas/media/question-resources/ObtuseTriangle_Fe8ESh4.svg"]], "navigation": {"allowregen": true, "showfrontpage": false, "preventleave": false}, "contributors": [{"name": "Merryn Horrocks", "profile_url": "https://numbas.mathcentre.ac.uk/accounts/profile/4052/"}], "tags": [], "metadata": {"description": "<p>Student is given a triangle with 2 or 3 side lengths given and asked to use the sine rule to find the value of an angle. Triangle can be acute or obtuse.</p>\n<p>Side and angle lengths are randomised. Units are randomised.</p>", "licence": "Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International"}, "statement": "<p>Use the sine rule to find the value of&nbsp;angle {dspchosenangle}.&nbsp;<span data-jme-visible=\"angle_vals[findvar]&gt;radians(90)\">Angle {dspchosenangle} is obtuse.</span></p>\n<p>Give your answer rounded to the nearest minute.</p>\n<p><span data-jme-visible=\"obtuse=0\">&nbsp;<img src=\"resources/question-resources/AcuteTriangle_tSonQMW.svg\"/>&nbsp;</span>&nbsp;<span data-jme-visible=\"obtuse=1\">&nbsp;<img src=\"resources/question-resources/ObtuseTriangle_Fe8ESh4.svg\"/>&nbsp;</span>&nbsp;&nbsp;</p>\n<p><em>not to scale</em></p>", "advice": "<p>To find the value of <em>{dspchosenangle}</em> we need to use the sine rule.</p>\n<p>This means that we need to find the value of the&nbsp;side opposite angle<em>{dspchosenangle}</em> and one other side and opposite angle.</p>\n<p>$\\frac{\\var{side_dsp_vals[findvar]}}{\\sin(\\var{dspchosenangle})}=\\frac{\\var{side_dsp_vals[helpingvar]}}{\\sin(\\var{angle_dsp_vals[helpingvar]})}$</p>\n<p>Next we multiply both sides by ${\\sin(\\var{dspchosenangle})}$:</p>\n<p>$\\var{side_dsp_vals[findvar]}=\\frac{\\sin(\\var{dspchosenangle})\\times \\var{side_dsp_vals[helpingvar]}}{\\sin(\\var{angle_dsp_vals[helpingvar]})}$</p>\n<p>Multiply both sides by $\\sin(\\var{angle_dsp_vals[helpingvar]})$:</p>\n<p>$\\var{side_dsp_vals[findvar]}\\times \\sin(\\var{angle_dsp_vals[helpingvar]}) =\\sin(\\var{dspchosenangle})\\times \\var{side_dsp_vals[helpingvar]}$</p>\n<p>Divide both sides by $\\var{side_dsp_vals[helpingvar]}$:</p>\n<p>$\\frac{\\var{side_dsp_vals[findvar]}\\times\\sin(\\var{angle_dsp_vals[helpingvar]})}{\\var{side_dsp_vals[helpingvar]}} =\\sin(\\var{dspchosenangle})$</p>\n<p>Swap the sides around and take the inverse sin of both sides:&nbsp;</p>\n<p>$\\sin(\\var{dspchosenangle})=\\frac{\\var{side_dsp_vals[findvar]}\\times\\sin(\\var{angle_dsp_vals[helpingvar]})}{\\var{side_dsp_vals[helpingvar]}}$</p>\n<p>$&nbsp;\\var{dspchosenangle} = sin^{-1}(\\frac{\\var{side_dsp_vals[findvar]}\\times\\sin(\\var{angle_dsp_vals[helpingvar]})}{\\var{side_dsp_vals[helpingvar]}}) = \\var{answer_deg}$&deg; $\\var{answer_min}$'</p>", "rulesets": {}, "variables": {"obtuse": {"name": "obtuse", "group": "build the triangle", "definition": "if(angle_C_val>pi/2,1,0)", "description": "", "templateType": "anything"}, "findvar": {"name": "findvar", "group": "set up the problem", "definition": "random(0,1,2)", "description": "<p>0 = A, 1 = B, 2 = C</p>", "templateType": "anything"}, "side_b_val": {"name": "side_b_val", "group": "build the triangle", "definition": "decimal(random(5..200)/10)", "description": "", "templateType": "anything"}, "side_c_val": {"name": "side_c_val", "group": "build the triangle", "definition": "decimal(random(side_b_val*10..min(250,2*side_b_val*10))/10)", "description": "", "templateType": "anything"}, "angle_A_deg": {"name": "angle_A_deg", "group": "build the triangle", "definition": "random(10..50)", "description": "", "templateType": "anything"}, "angle_A_min": {"name": "angle_A_min", "group": "build the triangle", "definition": "random(0..59)", "description": "", "templateType": "anything"}, "angle_A_val": {"name": "angle_A_val", "group": "build the triangle", "definition": "radians(angle_A_deg + angle_A_min/60)", "description": "", "templateType": "anything"}, "side_a_val": {"name": "side_a_val", "group": "build the triangle", "definition": "precround(cosrule_side(side_b_val,side_c_val,angle_A_val),1)", "description": "", "templateType": "anything"}, "angle_B_val": {"name": "angle_B_val", "group": "build the triangle", "definition": "round_to_min(cosrule_angle(side_a_val,side_c_val,side_b_val))", "description": "", "templateType": "anything"}, "angle_C_val": {"name": "angle_C_val", "group": "build the triangle", "definition": "round_to_min(pi-angle_A_val-angle_B_val)", "description": "", "templateType": "anything"}, "aA": {"name": "aA", "group": "display vars", "definition": "if (findvar=0,'A',if(helpingvar=0,angle_dsp_vals[0],''))", "description": "", "templateType": "anything"}, "aB": {"name": "aB", "group": "display vars", "definition": "if (findvar=1,'B',if(helpingvar=1,angle_dsp_vals[1],''))", "description": "", "templateType": "anything"}, "aC": {"name": "aC", "group": "display vars", "definition": "if (findvar=2,'C',if(helpingvar=2,angle_dsp_vals[2],''))", "description": "", "templateType": "anything"}, "sa": {"name": "sa", "group": "display vars", "definition": "if(findvar=0,string(side_dsp_vals[0])+' ' +units,if(helpingvar=0 or dsp3rdside=1,string(side_dsp_vals[0])+' ' +units,''))", "description": "", "templateType": "anything"}, "sb": {"name": "sb", "group": "display vars", "definition": "if(findvar=1,string(side_dsp_vals[1])+' ' +units,if(helpingvar=1 or dsp3rdside=1,string(side_dsp_vals[1])+' ' +units,''))", "description": "", "templateType": "anything"}, "sc": {"name": "sc", "group": "display vars", "definition": "if(findvar=2,string(side_dsp_vals[2])+' ' +units,if(helpingvar=2 or dsp3rdside=1,string(side_dsp_vals[2])+' ' +units,''))", "description": "", "templateType": "anything"}, "helpingvar": {"name": "helpingvar", "group": "set up the problem", "definition": "if(findvar=0,random(1,2),if(findvar=1,random(0,2),random(0,1)))", "description": "<p>0=a, 1=b, 2=c</p>", "templateType": "anything"}, "side_vals": {"name": "side_vals", "group": "set up the problem", "definition": "[side_a_val,side_b_val,side_c_val]", "description": "", "templateType": "anything"}, "angle_vals": {"name": "angle_vals", "group": "set up the problem", "definition": "[angle_A_val,angle_B_val,angle_C_val]", "description": "", "templateType": "anything"}, "side_dsp_names": {"name": "side_dsp_names", "group": "set up the problem", "definition": "['a','b','c']", "description": "", "templateType": "anything"}, "angle_dsp_names": {"name": "angle_dsp_names", "group": "set up the problem", "definition": "['A','B','C']", "description": "", "templateType": "anything"}, "side_dsp_vals": {"name": "side_dsp_vals", "group": "set up the problem", "definition": "[precround(side_a_val,1),precround(side_b_val,1),precround(side_c_val,1)]", "description": "", "templateType": "anything"}, "angle_dsp_vals": {"name": "angle_dsp_vals", "group": "set up the problem", "definition": "[deg_to_degmin(degrees(angle_A_val)),deg_to_degmin(degrees(angle_B_val)),deg_to_degmin(degrees(angle_C_val))]", "description": "", "templateType": "anything"}, "unitchoices": {"name": "unitchoices", "group": "display vars", "definition": "['mm','cm','m','km']", "description": "", "templateType": "anything"}, "units": {"name": "units", "group": "display vars", "definition": "random(unitchoices)", "description": "", "templateType": "anything"}, "othervar": {"name": "othervar", "group": "set up the problem", "definition": "3-findvar-helpingvar", "description": "", "templateType": "anything"}, "answer_acute": {"name": "answer_acute", "group": "set up the problem", "definition": "arcsin(side_vals[findvar]*sin(angle_vals[helpingvar])/side_vals[helpingvar])", "description": "", "templateType": "anything"}, "dspchosenangle": {"name": "dspchosenangle", "group": "set up the problem", "definition": "angle_dsp_names[findvar]", "description": "", "templateType": "anything"}, "dsp3rdside": {"name": "dsp3rdside", "group": "display vars", "definition": "random(0,1)", "description": "<p>0 =&nbsp;no</p>\n<p>1 = yes</p>", "templateType": "anything"}, "answer_deg": {"name": "answer_deg", "group": "set up the problem", "definition": "decimal(split(deg_to_degmin(degrees(answer)),'\u00b0')[0])", "description": "", "templateType": "anything"}, "answer_min": {"name": "answer_min", "group": "set up the problem", "definition": "decimal(split(split(deg_to_degmin(degrees(answer)),'\u00b0')[1],\"'\")[0])", "description": "", "templateType": "anything"}, "test": {"name": "test", "group": "set up the problem", "definition": "angle_vals[findvar]>radians(90)", "description": "", "templateType": "anything"}, "answer": {"name": "answer", "group": "set up the problem", "definition": "if(angle_vals[findvar]>radians(90),radians(180)-answer_acute,answer_acute)", "description": "", "templateType": "anything"}}, "variablesTest": {"condition": "", "maxRuns": 100}, "ungrouped_variables": [], "variable_groups": [{"name": "build the triangle", "variables": ["side_a_val", "side_b_val", "side_c_val", "angle_A_deg", "angle_A_min", "angle_A_val", "angle_B_val", "angle_C_val", "obtuse", "test"]}, {"name": "display vars", "variables": ["aA", "aB", "aC", "sa", "sb", "sc", "unitchoices", "units", "dsp3rdside"]}, {"name": "set up the problem", "variables": ["findvar", "helpingvar", "othervar", "side_vals", "side_dsp_vals", "side_dsp_names", "angle_vals", "angle_dsp_vals", "angle_dsp_names", "answer_acute", "dspchosenangle", "answer_deg", "answer_min", "answer", "test"]}], "functions": {"deg_to_degmin": {"parameters": [["deg", "number"]], "type": "string", "language": "javascript", "definition": "min=Math.round((deg-Math.trunc(deg))*60);\ndegstr=String(Math.trunc(deg))+\"\u00b0\"+String(min)+\"'\";\nreturn degstr;"}, "dms": {"parameters": [["deg", "number"]], "type": "string", "language": "javascript", "definition": "degrees = Math.trunc(deg);\nmin = (deg - Math.trunc(deg))*60;\nminutes = Math.round(min);\nseconds = Math.round((min - Math.trunc(min))*6000)/100;\ndegstr=String(degrees)+\"\u00b0\"+String(minutes)+\"'\"+String(seconds)+\"''\";\nreturn degstr;"}, "cosrule_side": {"parameters": [["a", "number"], ["b", "number"], ["C", "number"]], "type": "number", "language": "javascript", "definition": "tmp=Math.pow(a,2) + Math.pow(b,2) - 2*a*b*Math.cos(C);\ntmp2 = Math.sqrt(tmp);\nreturn tmp2;"}, "sinerule_angle": {"parameters": [["a", "number"], ["b", "number"], ["angB", "number"]], "type": "number", "language": "javascript", "definition": "return Math.asin(a*Math.sin(angB)/b)"}, "cosrule_angle": {"parameters": [["a", "number"], ["b", "number"], ["c", "number"]], "type": "number", "language": "javascript", "definition": "num = Math.pow(a,2) + Math.pow(b,2) - Math.pow(c,2);\nden = 2 * a * b\nreturn Math.acos(num/den);"}, "round_to_min": {"parameters": [["angle", "number"]], "type": "number", "language": "javascript", "definition": "deg = angle * 180 / Math.PI;\ndegrees = Math.trunc(deg);\nmin = (deg - Math.trunc(deg))*60;\nminutes = Math.round(min);\nrounded = degrees + minutes/60;\nreturn rounded * Math.PI / 180;"}}, "preamble": {"js": "", "css": ""}, "parts": [{"type": "gapfill", "useCustomName": false, "customName": "", "marks": 0, "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "prompt": "<p>{dspchosenangle} = [[0]]&nbsp;&deg;[[1]]'</p>", "gaps": [{"type": "numberentry", "useCustomName": true, "customName": "degrees", "marks": 1, "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "minValue": "answer_deg", "maxValue": "answer_deg", "correctAnswerFraction": false, "allowFractions": false, "mustBeReduced": false, "mustBeReducedPC": 0, "showFractionHint": true, "notationStyles": ["plain", "en", "si-en"], "correctAnswerStyle": "plain"}, {"type": "numberentry", "useCustomName": true, "customName": "minutes", "marks": 1, "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "minValue": "answer_min", "maxValue": "answer_min", "correctAnswerFraction": false, "allowFractions": false, "mustBeReduced": false, "mustBeReducedPC": 0, "showFractionHint": true, "notationStyles": ["plain", "en", "si-en"], "correctAnswerStyle": "plain"}], "sortAnswers": false}], "partsMode": "all", "maxMarks": 0, "objectives": [], "penalties": [], "objectiveVisibility": "always", "penaltyVisibility": "always"}, {"name": "right angle trig - find the angle", "extensions": [], "custom_part_types": [], "resources": [["question-resources/RATriangle1_b6o8mmj.svg", "/srv/numbas/media/question-resources/RATriangle1_b6o8mmj.svg"], ["question-resources/RATriangle2_cpZr4Au.svg", "/srv/numbas/media/question-resources/RATriangle2_cpZr4Au.svg"], ["question-resources/RATriangle3_1rlsOwN.svg", "/srv/numbas/media/question-resources/RATriangle3_1rlsOwN.svg"], ["question-resources/RATriangle4_UsnxMD2.svg", "/srv/numbas/media/question-resources/RATriangle4_UsnxMD2.svg"]], "navigation": {"allowregen": true, "showfrontpage": false, "preventleave": false}, "contributors": [{"name": "Merryn Horrocks", "profile_url": "https://numbas.mathcentre.ac.uk/accounts/profile/4052/"}], "tags": [], "metadata": {"description": "<p>Students are shown a right angled triangle and asked to&nbsp;find the value of an angle&nbsp;using a trig identity.</p>\n<p>The triangle is a fixed image, but the angles and side lengths are randomly selected.</p>\n<p>The angle is to be given in degrees and minutes.</p>\n<p>There are 4 orientations of the triangle in the diagram. The orientation is randomly chosen.</p>", "licence": "Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International"}, "statement": "<p><span data-jme-visible=\"triangle = 0\">&nbsp;<img src=\"resources/question-resources/RATriangle1_b6o8mmj.svg\"/></span>&nbsp;<span data-jme-visible=\"triangle = 1\">&nbsp;<img src=\"resources/question-resources/RATriangle2_cpZr4Au.svg\" alt=\"A right angle triangle\"/>&nbsp;</span>&nbsp; <span data-jme-visible=\"triangle = 2\">&nbsp;<img src=\"resources/question-resources/RATriangle3_1rlsOwN.svg\" alt=\"A right angle triangle\"/>&nbsp;</span>&nbsp;<span data-jme-visible=\"triangle = 3\">&nbsp;<img src=\"resources/question-resources/RATriangle4_UsnxMD2.svg\" alt=\"A right angle triangle\"/>&nbsp;</span></p>\n<p>Note that this diagram is not drawn to scale.</p>", "advice": "<p>To find the value for&nbsp;<em>{chosenangle}</em> in this diagram, we need to use the {chosensct} ratio.</p>\n<p>$\\var{chosensct}(\\var{anglestring}) = \\frac{\\var{num}}{\\var{den}} $</p>\n<p>$\\var{anglestring}= \\var{chosensct}^{-1}(\\frac{\\var{num}}{\\var{den}})$</p>\n<p>$\\var{anglestring}=\\var{matrix2row[0]}$</p>\n<p>When we convert this to degrees, minutes and seconds we get:</p>\n<p>$\\var{anglestring}=\\var{answerfull}$</p>\n<p>When we round this to the nearest minute, we get:</p>\n<p>$\\var{anglestring}=\\var{answer}$</p>", "rulesets": {}, "variables": {"sct": {"name": "sct", "group": "random variables", "definition": "random(0,1,2)", "description": "<p>0 = sin</p>\n<p>1 = cos</p>\n<p>2 = tan</p>", "templateType": "anything"}, "angleA": {"name": "angleA", "group": "random variables", "definition": "dec(random(1500..4000)/100)", "description": "", "templateType": "anything"}, "angleB": {"name": "angleB", "group": "random variables", "definition": "90-angleA", "description": "", "templateType": "anything"}, "sidec": {"name": "sidec", "group": "random variables", "definition": "dec(random(10..500)/10)", "description": "", "templateType": "anything"}, "sideb": {"name": "sideb", "group": "random variables", "definition": "dec(round(sidec*cos(angleArad)*10)/10)", "description": "", "templateType": "anything"}, "angleArad": {"name": "angleArad", "group": "Ungrouped variables", "definition": "radians(angleA)", "description": "", "templateType": "anything"}, "angleBrad": {"name": "angleBrad", "group": "Ungrouped variables", "definition": "radians(angleB)", "description": "", "templateType": "anything"}, "sidea": {"name": "sidea", "group": "random variables", "definition": "dec((round(sidec*sin(angleArad)*10))/10)", "description": "", "templateType": "anything"}, "matrix1": {"name": "matrix1", "group": "Ungrouped variables", "definition": "[['A', '', sidea, '', sidec],\n  ['','B', '', sideb, sidec],\n  ['A', '', '', sideb, sidec],\n  ['', 'B', sidea, '', sidec],\n  ['A', '', sidea, sideb, ''],\n  ['', 'B', sidea, sideb, '']]", "description": "<p>columns: sin A, sin B, cos A, cos B, tan A, tan B</p>\n<p>rows: angle A, angle B, side a, side b, side c</p>", "templateType": "anything"}, "angle": {"name": "angle", "group": "random variables", "definition": "random(0,1)", "description": "<p>0 means angle A is given</p>\n<p>1 means angle B is given</p>", "templateType": "anything"}, "matrix1row": {"name": "matrix1row", "group": "Ungrouped variables", "definition": "matrix1[2*sct+angle]", "description": "", "templateType": "anything"}, "aA": {"name": "aA", "group": "display variables", "definition": "if(matrix1row[0]='','','A')", "description": "", "templateType": "anything"}, "aB": {"name": "aB", "group": "display variables", "definition": "if(matrix1row[1]='','','B')", "description": "", "templateType": "anything"}, "a": {"name": "a", "group": "display variables", "definition": "matrix1row[2]", "description": "", "templateType": "anything"}, "b": {"name": "b", "group": "display variables", "definition": "matrix1row[3]", "description": "", "templateType": "anything"}, "c": {"name": "c", "group": "display variables", "definition": "matrix1row[4]", "description": "", "templateType": "anything"}, "sctchoices": {"name": "sctchoices", "group": "display variables", "definition": "['sin','cos','tan']", "description": "", "templateType": "anything"}, "anglechoices": {"name": "anglechoices", "group": "display variables", "definition": "['A','B']", "description": "", "templateType": "anything"}, "chosenangle": {"name": "chosenangle", "group": "display variables", "definition": "anglechoices[angle]", "description": "", "templateType": "anything"}, "chosensct": {"name": "chosensct", "group": "display variables", "definition": "sctchoices[sct]", "description": "", "templateType": "anything"}, "answer": {"name": "answer", "group": "the answer", "definition": "deg_to_degmin(matrix2row[0])", "description": "", "templateType": "anything"}, "anglestringchoices": {"name": "anglestringchoices", "group": "display variables", "definition": "[aA,aB]", "description": "", "templateType": "anything"}, "anglestring": {"name": "anglestring", "group": "display variables", "definition": "anglestringchoices[angle]", "description": "", "templateType": "anything"}, "matrix2": {"name": "matrix2", "group": "Ungrouped variables", "definition": "[\n  [degrees(arcsin(sidea/sidec)), sidea, sidec],\n  [degrees(arcsin(sideb/sidec)), sideb, sidec],\n  [degrees(arccos(sideb/sidec)), sideb, sidec],\n  [degrees(arccos(sidea/sidec)), sidea, sidec],\n  [degrees(arctan(sidea/sideb)), sidea, sideb],\n  [degrees(arctan(sideb/sidea)), sideb, sidea]\n]", "description": "<p>columns: sin A, sin B, cos A, cos B, tan A, tan B</p>\n<p>row: [angle numerator denominator]</p>", "templateType": "anything"}, "matrix2row": {"name": "matrix2row", "group": "Ungrouped variables", "definition": "matrix2[2*sct+angle]", "description": "", "templateType": "anything"}, "answerdeg": {"name": "answerdeg", "group": "the answer", "definition": "int(decimal(split(answer,\"\u00b0\")[0]))", "description": "", "templateType": "anything"}, "answermin": {"name": "answermin", "group": "the answer", "definition": "int(decimal(split(split(answer,\"\u00b0\")[1],\"'\")[0]))", "description": "", "templateType": "anything"}, "num": {"name": "num", "group": "display variables", "definition": "matrix2row[1]", "description": "<p>the numerator</p>", "templateType": "anything"}, "den": {"name": "den", "group": "display variables", "definition": "matrix2row[2]", "description": "<p>the denominator</p>", "templateType": "anything"}, "answerfull": {"name": "answerfull", "group": "the answer", "definition": "dms(matrix2row[0])", "description": "", "templateType": "anything"}, "triangle": {"name": "triangle", "group": "display variables", "definition": "random(0..3)", "description": "", "templateType": "anything"}}, "variablesTest": {"condition": "", "maxRuns": 100}, "ungrouped_variables": ["angleArad", "angleBrad", "matrix1", "matrix2", "matrix1row", "matrix2row"], "variable_groups": [{"name": "display variables", "variables": ["aA", "aB", "a", "b", "c", "sctchoices", "chosensct", "anglechoices", "chosenangle", "anglestringchoices", "anglestring", "num", "den", "triangle"]}, {"name": "worked solution variables", "variables": []}, {"name": "the answer", "variables": ["answer", "answerdeg", "answermin", "answerfull"]}, {"name": "random variables", "variables": ["sct", "angle", "angleA", "angleB", "sidea", "sideb", "sidec"]}], "functions": {"deg_to_degmin": {"parameters": [["deg", "number"]], "type": "string", "language": "javascript", "definition": "min=Math.round((deg-Math.trunc(deg))*60);\ndegstr=String(Math.trunc(deg))+\"\u00b0\"+String(min)+\"'\";\nreturn degstr;"}, "dms": {"parameters": [["deg", "number"]], "type": "string", "language": "javascript", "definition": "degrees = Math.trunc(deg)\nmin = (deg - Math.trunc(deg))*60;\nminutes = Math.round(min);\nseconds = Math.round((min - Math.trunc(min))*6000)/100;\ndegstr=String(degrees)+\"\u00b0\"+String(minutes)+\"'\"+String(seconds)+\"''\";\nreturn degstr;"}}, "preamble": {"js": "", "css": ""}, "parts": [{"type": "gapfill", "useCustomName": false, "customName": "", "marks": 0, "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "prompt": "<p>Find the value of angle $\\var{chosenangle}$</p>\n<p>Round your answer to the nearest minute.</p>\n<p>$\\var{chosenangle} =$&nbsp;[[0]]&deg;[[1]]'</p>", "gaps": [{"type": "numberentry", "useCustomName": false, "customName": "", "marks": 1, "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "minValue": "answerdeg", "maxValue": "answerdeg", "correctAnswerFraction": false, "allowFractions": false, "mustBeReduced": false, "mustBeReducedPC": 0, "showFractionHint": true, "notationStyles": ["plain", "en", "si-en"], "correctAnswerStyle": "plain"}, {"type": "numberentry", "useCustomName": false, "customName": "", "marks": 1, "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "minValue": "answermin", "maxValue": "answermin", "correctAnswerFraction": false, "allowFractions": false, "mustBeReduced": false, "mustBeReducedPC": 0, "showFractionHint": true, "notationStyles": ["plain", "en", "si-en"], "correctAnswerStyle": "plain"}], "sortAnswers": false}], "partsMode": "all", "maxMarks": 0, "objectives": [], "penalties": [], "objectiveVisibility": "always", "penaltyVisibility": "always"}, {"name": "right angle trig - find the side", "extensions": [], "custom_part_types": [], "resources": [["question-resources/RATriangle1_b6o8mmj.svg", "/srv/numbas/media/question-resources/RATriangle1_b6o8mmj.svg"], ["question-resources/RATriangle2_V82JKE5.svg", "/srv/numbas/media/question-resources/RATriangle2_V82JKE5.svg"], ["question-resources/RATriangle3_cVqd6sf.svg", "/srv/numbas/media/question-resources/RATriangle3_cVqd6sf.svg"], ["question-resources/RATriangle4_03OZUzG.svg", "/srv/numbas/media/question-resources/RATriangle4_03OZUzG.svg"]], "navigation": {"allowregen": true, "showfrontpage": false, "preventleave": false}, "contributors": [{"name": "Merryn Horrocks", "profile_url": "https://numbas.mathcentre.ac.uk/accounts/profile/4052/"}], "tags": [], "metadata": {"description": "<p>Students are shown a right angled triangle and asked to compute a side length using a trig identity.</p>\n<p>The triangle is a fixed image, but the angles and side lengths are randomly selected.</p>\n<p>The angle is given in degrees and minutes, and students are asked for the side length correct to 1 decimal place.</p>\n<p>There are 4&nbsp;different triangle orientations that can display.</p>", "licence": "Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International"}, "statement": "<p><span data-jme-visible=\"triangle = 0\">&nbsp;<img src=\"resources/question-resources/RATriangle1_b6o8mmj.svg\"/></span>&nbsp;&nbsp;<span data-jme-visible=\"triangle = 1\"><img src=\"resources/question-resources/RATriangle2_V82JKE5.svg\"/>&nbsp;</span>&nbsp;<span data-jme-visible=\"triangle = 2\"> <img src=\"resources/question-resources/RATriangle3_cVqd6sf.svg\"/></span>&nbsp;<span data-jme-visible=\"triangle = 3\"><img src=\"resources/question-resources/RATriangle4_03OZUzG.svg\"/>&nbsp;</span></p>\n<p></p>\n<p>Note that this diagram is not drawn to scale.</p>", "advice": "<p>To find the value for&nbsp;<em>{chosenside}</em> in this diagram, we need to use the {chosensct} ratio.</p>\n<p>$\\var{chosensct}(\\var{anglestring}) = \\frac{\\var{chosennum}}{\\var{chosenden}} $</p>\n<p>$\\var{chosensct}(\\var{anglestring})= \\frac{\\var{numval}}{\\var{denval}}$</p>\n<p><span data-jme-visible=\"var_on_num\">$\\var{numval} =&nbsp;{\\var{denval}} \\times \\var{chosensct}(\\var{anglestring})$</span></p>\n<p><span data-jme-visible=\"var_on_num\">$\\var{numval} = \\var{longanswer}$</span></p>\n<p><span data-jme-visible=\"var_on_num\">which we round to 1 decimal place (to match the precision of the given side) to get</span></p>\n<p><span data-jme-visible=\"var_on_num\">$\\var{numval} = \\var{preciseanswer}$</span></p>\n<p><span data-jme-visible=\"not (var_on_num)\">$\\var{denval} \\times&nbsp;\\var{chosensct}(\\var{anglestring}) =&nbsp;\\var{numval}$</span></p>\n<p><span data-jme-visible=\"not (var_on_num)\">$\\var{denval} = \\frac{\\var{numval}}{\\var{chosensct}(\\var{anglestring})}$</span></p>\n<p><span data-jme-visible=\"not (var_on_num)\">$\\var{denval} = \\var{longanswer}$</span></p>\n<p><span data-jme-visible=\"not (var_on_num)\">which we round to 1 decimal place (to match the precision of the given side) to get</span></p>\n<p><span data-jme-visible=\"not (var_on_num)\">$\\var{denval} = \\var{preciseanswer}$</span></p>\n<p></p>", "rulesets": {}, "variables": {"sct": {"name": "sct", "group": "randomly chosen variables", "definition": "random(0,1,2)", "description": "<p>0 = sin</p>\n<p>1 = cos</p>\n<p>2 = tan</p>", "templateType": "anything"}, "angleA": {"name": "angleA", "group": "randomly chosen variables", "definition": "dec(random(15..40)+random(0..59)/60)", "description": "", "templateType": "anything"}, "angleB": {"name": "angleB", "group": "randomly chosen variables", "definition": "90-angleA", "description": "", "templateType": "anything"}, "sidec": {"name": "sidec", "group": "randomly chosen variables", "definition": "dec(random(10..500)/10)", "description": "", "templateType": "anything"}, "sideb": {"name": "sideb", "group": "randomly chosen variables", "definition": "dec(round(sidec*cos(angleArad)*10)/10)", "description": "", "templateType": "anything"}, "angleArad": {"name": "angleArad", "group": "Ungrouped variables", "definition": "angleA/180*pi", "description": "", "templateType": "anything"}, "angleBrad": {"name": "angleBrad", "group": "Ungrouped variables", "definition": "angleB/180*pi", "description": "", "templateType": "anything"}, "sidea": {"name": "sidea", "group": "randomly chosen variables", "definition": "dec((round(sidec*sin(angleArad)*10))/10)", "description": "", "templateType": "anything"}, "angle": {"name": "angle", "group": "randomly chosen variables", "definition": "random(0,1)", "description": "<p>0 means angle A is given</p>\n<p>1 means angle B is given</p>", "templateType": "anything"}, "matrixrow": {"name": "matrixrow", "group": "Ungrouped variables", "definition": "displaymatrix[angle][sct][ndvar]", "description": "", "templateType": "anything"}, "aA": {"name": "aA", "group": "display variables", "definition": "if(matrixrow[0]='','',deg_to_degmin(matrixrow[0]))", "description": "", "templateType": "anything"}, "aB": {"name": "aB", "group": "display variables", "definition": "if(matrixrow[1]='','',deg_to_degmin(matrixrow[1]))", "description": "", "templateType": "anything"}, "a": {"name": "a", "group": "display variables", "definition": "matrixrow[2]", "description": "", "templateType": "anything"}, "b": {"name": "b", "group": "display variables", "definition": "matrixrow[3]", "description": "", "templateType": "anything"}, "c": {"name": "c", "group": "display variables", "definition": "matrixrow[4]", "description": "", "templateType": "anything"}, "sctchoices": {"name": "sctchoices", "group": "display variables", "definition": "['sin','cos','tan']", "description": "", "templateType": "anything"}, "anglechoices": {"name": "anglechoices", "group": "display variables", "definition": "['A','B']", "description": "", "templateType": "anything"}, "chosenangle": {"name": "chosenangle", "group": "display variables", "definition": "anglechoices[angle]", "description": "", "templateType": "anything"}, "chosensct": {"name": "chosensct", "group": "display variables", "definition": "sctchoices[sct]", "description": "", "templateType": "anything"}, "sidechoices": {"name": "sidechoices", "group": "display variables", "definition": "[\n  [\n    [['a'],['c']],\n    [['b'],['c']],\n    [['a'],['b']]\n  ],\n  [\n    [['b'],['c']],\n    [['a'],['c']],\n    [['b'],['a']]\n  ]\n]", "description": "", "templateType": "anything"}, "chosenside": {"name": "chosenside", "group": "display variables", "definition": "sidechoices[angle][sct][ndvar][0]", "description": "", "templateType": "anything"}, "answer": {"name": "answer", "group": "the answer", "definition": "if(chosenside='a',sidea,if(chosenside='b',sideb,sidec))", "description": "", "templateType": "anything"}, "chosennum": {"name": "chosennum", "group": "display variables", "definition": "if(sct=1,'adjacent','opposite')", "description": "", "templateType": "anything"}, "chosenden": {"name": "chosenden", "group": "display variables", "definition": "if(sct=2,'adjacent','hypotenuse')", "description": "", "templateType": "anything"}, "numval": {"name": "numval", "group": "Ungrouped variables", "definition": "andmatrixrow[1]", "description": "", "templateType": "anything"}, "denval": {"name": "denval", "group": "Ungrouped variables", "definition": "andmatrixrow[2]", "description": "", "templateType": "anything"}, "anglevals": {"name": "anglevals", "group": "Ungrouped variables", "definition": "[radians(angleA),radians(angleB)]", "description": "", "templateType": "anything"}, "var_on_num": {"name": "var_on_num", "group": "worked solution variables", "definition": "(numval = 'a') or (numval='b') or (numval='c')", "description": "", "templateType": "anything"}, "ourangle": {"name": "ourangle", "group": "the answer", "definition": "anglevals[angle]", "description": "", "templateType": "anything"}, "preciseanswer": {"name": "preciseanswer", "group": "the answer", "definition": "precround(if(var_on_num,denval*if(sct=0,sin(ourangle),if(sct=1,cos(ourangle),tan(ourangle))),numval/if(sct=0,sin(ourangle),if(sct=1,cos(ourangle),tan(ourangle)))),1)", "description": "", "templateType": "anything"}, "anglestringchoices": {"name": "anglestringchoices", "group": "display variables", "definition": "[aA,aB]", "description": "", "templateType": "anything"}, "anglestring": {"name": "anglestring", "group": "display variables", "definition": "anglestringchoices[angle]", "description": "", "templateType": "anything"}, "longanswer": {"name": "longanswer", "group": "the answer", "definition": "precround(if(var_on_num,denval*if(sct=0,sin(ourangle),if(sct=1,cos(ourangle),tan(ourangle))),numval/if(sct=0,sin(ourangle),if(sct=1,cos(ourangle),tan(ourangle)))),3)", "description": "", "templateType": "anything"}, "displaymatrix": {"name": "displaymatrix", "group": "display variables", "definition": "[\n  [\n    [[angleA,'','a','',sidec],[angleA,'',sidea,'','c']],\n    [[angleA,'','','b',sidec],[angleA,'','',sideb,'c']],\n    [[angleA,'','a',sideb,''],[angleA,'',sidea,'b','']]\n  ],\n  [\n    [['', AngleB, '', 'b', sidec],['', AngleB, '', sideb, 'c']],\n    [['', AngleB, 'a', '', sidec],['', AngleB, sidea, '', 'c']],\n    [['', AngleB, sidea, 'b', ''],['', AngleB, 'a', sideb, '']]\n  ]\n]", "description": "<p>This 3d matrix lists the variables as they are to be displayed. The first dimension is the choice of angle, the second dimension is the trig function to be used, and the third dimension is whether the numerator or the denominator is the variable to be determined.</p>\n<p>[A B][sin cos tan][num den]</p>", "templateType": "anything"}, "andmatrix": {"name": "andmatrix", "group": "Ungrouped variables", "definition": "[\n  [\n    [[angleA,'a',sidec],[angleA,sidea,'c']],\n    [[angleA,'b',sidec],[angleA,sideb,'c']],\n    [[angleA,'a',sideb],[angleA,sidea,'b']]\n  ],\n  [\n    [[AngleB, 'b', sidec],[AngleB, sideb, 'c']],\n    [[AngleB, 'a', sidec],[AngleB, sidea, 'c']],\n    [[AngleB, 'b', sidea],[AngleB, sideb, 'a']]\n  ]\n]", "description": "<p>angle numerator denominator for each combination</p>", "templateType": "anything"}, "ndvar": {"name": "ndvar", "group": "randomly chosen variables", "definition": "random(0,1)", "description": "<p>which&nbsp;variable to determine the denominator?</p>\n<p>0 = numerator</p>\n<p>1 = denominator</p>", "templateType": "anything"}, "andmatrixrow": {"name": "andmatrixrow", "group": "Ungrouped variables", "definition": "andmatrix[angle][sct][ndvar]", "description": "", "templateType": "anything"}, "triangle": {"name": "triangle", "group": "randomly chosen variables", "definition": "random(0..3)", "description": "", "templateType": "anything"}}, "variablesTest": {"condition": "", "maxRuns": 100}, "ungrouped_variables": ["angleArad", "angleBrad", "matrixrow", "numval", "denval", "anglevals", "andmatrix", "andmatrixrow"], "variable_groups": [{"name": "display variables", "variables": ["displaymatrix", "aA", "aB", "a", "b", "c", "sctchoices", "chosensct", "anglechoices", "chosenangle", "sidechoices", "chosenside", "chosennum", "chosenden", "anglestringchoices", "anglestring"]}, {"name": "worked solution variables", "variables": ["var_on_num"]}, {"name": "the answer", "variables": ["answer", "anglevals", "ourangle", "preciseanswer", "longanswer"]}, {"name": "randomly chosen variables", "variables": ["sct", "angleA", "angleB", "sidea", "sideb", "sidec", "angle", "ndvar", "triangle"]}], "functions": {"deg_to_degmin": {"parameters": [["deg", "number"]], "type": "string", "language": "javascript", "definition": "min=Math.round((deg-Math.trunc(deg))*60);\ndegstr=String(Math.trunc(deg))+\"\u00b0\"+String(min)+\"'\";\nreturn degstr;"}}, "preamble": {"js": "", "css": ""}, "parts": [{"type": "numberentry", "useCustomName": false, "customName": "", "marks": 1, "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "prompt": "<p>Find the value of <em>{chosenside}</em>&nbsp;in the diagram.</p>\n<p>Give your answer to 1 decimal place.</p>", "minValue": "preciseanswer", "maxValue": "preciseanswer", "correctAnswerFraction": false, "allowFractions": false, "mustBeReduced": false, "mustBeReducedPC": 0, "showFractionHint": true, "notationStyles": ["plain", "en", "si-en"], "correctAnswerStyle": "plain"}], "partsMode": "all", "maxMarks": 0, "objectives": [], "penalties": [], "objectiveVisibility": "always", "penaltyVisibility": "always"}, {"name": "Apply the cosine rule (3 sides given, degrees)", "extensions": [], "custom_part_types": [], "resources": [["question-resources/Triangle_700_JKWvhba.gif", "/srv/numbas/media/question-resources/Triangle_700_JKWvhba.gif"]], "navigation": {"allowregen": true, "showfrontpage": false, "preventleave": false}, "contributors": [{"name": "Newcastle University Mathematics and Statistics", "profile_url": "https://numbas.mathcentre.ac.uk/accounts/profile/697/"}, {"name": "Andrew Chuter", "profile_url": "https://numbas.mathcentre.ac.uk/accounts/profile/4565/"}], "tags": [], "metadata": {"description": "<p>A question testing the application of the Cosine Rule when given three side lengths. In this question, the triangle is always acute. A secondary application is finding the area of a triangle.</p>", "licence": "Creative Commons Attribution 4.0 International"}, "statement": "<p>Suppose that $\\Delta ABC$ is a triangle with all interior angles less than $90^{\\circ}$.&nbsp;Sides and angles are labelled&nbsp;as shown in the diagram below (not to scale).</p>\n<p style=\"margin: 0px;\">Given the following three side lengths, determine the three angles using the Cosine Rule. Give your answers correct to the nearest degree.</p>\n<p style=\"margin: 0px;\"></p>\n<p style=\"margin: 0px;\"><img src=\"resources/question-resources/Triangle_700_JKWvhba.gif\"/></p>", "advice": "<p>Use the Cosine Rule to find $\\cos A$: $\\cos A =\\dfrac{b^2+c^2-a^2}{2bc}$. Therefore</p>\n<p>\\[\\cos A =\\dfrac{\\var{b0}^2+\\var{c0}^2-\\var{a0}^2}{2 \\times \\var{b0} \\times \\var{c0}}=\\dfrac{\\var{b0^2+c0^2-a0^2}}{\\var{2 *b0*c0}}\\]</p>\n<p>\\[=\\var{(b0^2+c0^2-a0^2)/(2 *b0*c0)}\\]</p>\n<p>and so $A=\\cos^{-1}(\\var{(b0^2+c0^2-a0^2)/(2 *b0*c0)})=\\var{aa0}$.</p>\n<p></p>\n<p>Similarly $\\cos B =\\dfrac{a^2+c^2-b^2}{2ac}$ and $\\cos C =\\dfrac{a^2+b^2-c^2}{2ab}$. So</p>\n<p>\\[\\cos B =\\dfrac{\\var{a0}^2+\\var{c0}^2-\\var{b0}^2}{2 \\times \\var{a0} \\times \\var{c0}}=\\var{(a0^2+c0^2-b0^2)/(2 *a0*c0)}\\]</p>\n<p>and so $B=\\cos^{-1}(\\var{(a0^2+c0^2-b0^2)/(2 *a0*c0)})=\\var{bb0}$.</p>\n<p>\\[\\cos C =\\dfrac{\\var{a0}^2+\\var{b0}^2-\\var{c0}^2}{2 \\times \\var{a0} \\times \\var{b0}}=\\var{(a0^2+b0^2-c0^2)/(2 *a0*b0)}\\]</p>\n<p>and so $C=\\cos^{-1}(\\var{(a0^2+b0^2-c0^2)/(2 *a0*b0)})=\\var{cc0}$.</p>\n<p></p>", "rulesets": {"std": ["all", "!collectNumbers", "fractionNumbers", "!noLeadingMinus"]}, "variables": {"cc4": {"name": "cc4", "group": "Ungrouped variables", "definition": "pi-AA3-BB3", "description": "", "templateType": "anything"}, "cc1": {"name": "cc1", "group": "Ungrouped variables", "definition": "pi-aa0-bb0", "description": "", "templateType": "anything"}, "b3": {"name": "b3", "group": "Ungrouped variables", "definition": "random(7..20)", "description": "", "templateType": "anything"}, "s5": {"name": "s5", "group": "Ungrouped variables", "definition": "sin(AA5)", "description": "", "templateType": "anything"}, "c31": {"name": "c31", "group": "Ungrouped variables", "definition": "ceil(sqrt(x4))", "description": "", "templateType": "anything"}, "area": {"name": "area", "group": "Ungrouped variables", "definition": "precround(b0*c0*s0/2,3)", "description": "", "templateType": "anything"}, "c2": {"name": "c2", "group": "Ungrouped variables", "definition": "floor(sqrt(x2))", "description": "", "templateType": "anything"}, "check2": {"name": "check2", "group": "Ungrouped variables", "definition": "pi-AA3-BB3-CC3", "description": "", "templateType": "anything"}, "t3": {"name": "t3", "group": "Ungrouped variables", "definition": "sin(BB3)", "description": "", "templateType": "anything"}, "aa2": {"name": "aa2", "group": "Ungrouped variables", "definition": "precround(aa1,3)", "description": "", "templateType": "anything"}, "c3": {"name": "c3", "group": "Ungrouped variables", "definition": "random(c4..c5 except 0)", "description": "", "templateType": "anything"}, "r3": {"name": "r3", "group": "Ungrouped variables", "definition": "(a3^2+b3^2-c3^2)/(2*a3*b3)", "description": "", "templateType": "anything"}, "x4": {"name": "x4", "group": "Ungrouped variables", "definition": "abs(a3^2-b3^2)", "description": "", "templateType": "anything"}, "aa0": {"name": "aa0", "group": "Ungrouped variables", "definition": "precround(arccos(p0)*180/pi,0)", "description": "", "templateType": "anything"}, "bb1": {"name": "bb1", "group": "Ungrouped variables", "definition": "pi-aa0-cc0", "description": "", "templateType": "anything"}, "aa1": {"name": "aa1", "group": "Ungrouped variables", "definition": "pi-bb0-cc0", "description": "", "templateType": "anything"}, "x5": {"name": "x5", "group": "Ungrouped variables", "definition": "a3^2+b3^2", "description": "", "templateType": "anything"}, "aa4": {"name": "aa4", "group": "Ungrouped variables", "definition": "pi-BB3-CC3", "description": "", "templateType": "anything"}, "cc0": {"name": "cc0", "group": "Ungrouped variables", "definition": "precround(arccos(r0)*180/pi,0)", "description": "", "templateType": "anything"}, "c1": {"name": "c1", "group": "Ungrouped variables", "definition": "max(c01,c02)", "description": "", "templateType": "anything"}, "bb5": {"name": "bb5", "group": "Ungrouped variables", "definition": "precround(BB4,3)", "description": "", "templateType": "anything"}, "bb2": {"name": "bb2", "group": "Ungrouped variables", "definition": "precround(bb1,3)", "description": "", "templateType": "anything"}, "p0": {"name": "p0", "group": "Ungrouped variables", "definition": "(c0^2+b0^2-a0^2)/(2*c0*b0)", "description": "", "templateType": "anything"}, "bb4": {"name": "bb4", "group": "Ungrouped variables", "definition": "pi-AA3-CC3", "description": "", "templateType": "anything"}, "check1": {"name": "check1", "group": "Ungrouped variables", "definition": "pi-AA0-BB0-CC0", "description": "", "templateType": "anything"}, "r0": {"name": "r0", "group": "Ungrouped variables", "definition": "(a0^2+b0^2-c0^2)/(2*a0*b0)", "description": "", "templateType": "anything"}, "aa3": {"name": "aa3", "group": "Ungrouped variables", "definition": "precround(arccos(p3),4)", "description": "", "templateType": "anything"}, "temp1": {"name": "temp1", "group": "Ungrouped variables", "definition": "a0*t0/s0", "description": "", "templateType": "anything"}, "c01": {"name": "c01", "group": "Ungrouped variables", "definition": "ceil(sqrt(x1))", "description": "", "templateType": "anything"}, "u2": {"name": "u2", "group": "Ungrouped variables", "definition": "sin(cc2)", "description": "", "templateType": "anything"}, "cc3": {"name": "cc3", "group": "Ungrouped variables", "definition": "precround(arccos(r3),4)", "description": "", "templateType": "anything"}, "c4": {"name": "c4", "group": "Ungrouped variables", "definition": "max(c31,c32)", "description": "", "templateType": "anything"}, "bb3": {"name": "bb3", "group": "Ungrouped variables", "definition": "precround(arccos(q3),4)", "description": "", "templateType": "anything"}, "p3": {"name": "p3", "group": "Ungrouped variables", "definition": "(c3^2+b3^2-a3^2)/(2*c3*b3)", "description": "", "templateType": "anything"}, "s2": {"name": "s2", "group": "Ungrouped variables", "definition": "sin(aa2)", "description": "", "templateType": "anything"}, "u5": {"name": "u5", "group": "Ungrouped variables", "definition": "sin(CC5)", "description": "", "templateType": "anything"}, "c02": {"name": "c02", "group": "Ungrouped variables", "definition": "ceil(min(a0,b0)*0.05)", "description": "", "templateType": "anything"}, "q0": {"name": "q0", "group": "Ungrouped variables", "definition": "(a0^2+c0^2-b0^2)/(2*a0*c0)", "description": "", "templateType": "anything"}, "u3": {"name": "u3", "group": "Ungrouped variables", "definition": "sin(CC3)", "description": "", "templateType": "anything"}, "cc5": {"name": "cc5", "group": "Ungrouped variables", "definition": "precround(CC4,3)", "description": "", "templateType": "anything"}, "bb0": {"name": "bb0", "group": "Ungrouped variables", "definition": "precround(arccos(q0)*180/pi,0)", "description": "", "templateType": "anything"}, "c0": {"name": "c0", "group": "Ungrouped variables", "definition": "random(c1..c2 except 0)", "description": "", "templateType": "anything"}, "t5": {"name": "t5", "group": "Ungrouped variables", "definition": "sin(BB5)", "description": "", "templateType": "anything"}, "a0": {"name": "a0", "group": "Ungrouped variables", "definition": "random(10..25)", "description": "", "templateType": "anything"}, "x2": {"name": "x2", "group": "Ungrouped variables", "definition": "a0^2+b0^2", "description": "", "templateType": "anything"}, "s0": {"name": "s0", "group": "Ungrouped variables", "definition": "sin(aa0)", "description": "", "templateType": "anything"}, "cc2": {"name": "cc2", "group": "Ungrouped variables", "definition": "precround(cc1,3)", "description": "", "templateType": "anything"}, "c5": {"name": "c5", "group": "Ungrouped variables", "definition": "floor(sqrt(x5))", "description": "", "templateType": "anything"}, "b0": {"name": "b0", "group": "Ungrouped variables", "definition": "random(10..25)", "description": "", "templateType": "anything"}, "t2": {"name": "t2", "group": "Ungrouped variables", "definition": "sin(bb2)", "description": "", "templateType": "anything"}, "t0": {"name": "t0", "group": "Ungrouped variables", "definition": "sin(bb0)", "description": "", "templateType": "anything"}, "q3": {"name": "q3", "group": "Ungrouped variables", "definition": "(a3^2+c3^2-b3^2)/(2*a3*c3)", "description": "", "templateType": "anything"}, "x1": {"name": "x1", "group": "Ungrouped variables", "definition": "abs(a0^2-b0^2)", "description": "", "templateType": "anything"}, "u0": {"name": "u0", "group": "Ungrouped variables", "definition": "sin(cc0)", "description": "", "templateType": "anything"}, "a3": {"name": "a3", "group": "Ungrouped variables", "definition": "random(7..20)", "description": "", "templateType": "anything"}, "s3": {"name": "s3", "group": "Ungrouped variables", "definition": "sin(AA3)", "description": "", "templateType": "anything"}, "aa5": {"name": "aa5", "group": "Ungrouped variables", "definition": "precround(AA4,3)", "description": "", "templateType": "anything"}, "c32": {"name": "c32", "group": "Ungrouped variables", "definition": "ceil(min(a3,b3)*0.05)", "description": "", "templateType": "anything"}, "temp2": {"name": "temp2", "group": "Ungrouped variables", "definition": "b0-temp1", "description": "", "templateType": "anything"}}, "variablesTest": {"condition": "", "maxRuns": 100}, "ungrouped_variables": ["c4", "s3", "cc0", "temp2", "temp1", "b0", "cc3", "b3", "u2", "q0", "q3", "c0", "area", "cc5", "s2", "s0", "cc1", "u0", "u3", "cc2", "aa5", "aa4", "aa1", "aa0", "aa3", "aa2", "x2", "c31", "c32", "a0", "a3", "bb0", "s5", "c3", "c2", "c1", "x1", "c02", "x4", "x5", "p3", "p0", "r0", "r3", "bb3", "t5", "t2", "t3", "t0", "u5", "c5", "cc4", "c01", "bb5", "bb4", "check2", "bb2", "bb1", "check1"], "variable_groups": [], "functions": {}, "preamble": {"js": "", "css": ""}, "parts": [{"type": "gapfill", "useCustomName": false, "customName": "", "marks": 0, "showCorrectAnswer": true, "showFeedbackIcon": true, "scripts": {}, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "adaptiveMarkingPenalty": 0, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "prompt": "<p>$a=\\var{a0}$, $b=\\var{b0}$, $c=\\var{c0}$</p>\n      <p>Angle $A=$ [[0]]</p>\n      <p>Angle $B=$ [[1]]</p>\n      <p>Angle $C=$ [[2]]</p>", "stepsPenalty": 1, "steps": [{"type": "information", "useCustomName": false, "customName": "", "marks": 0, "showCorrectAnswer": true, "showFeedbackIcon": true, "scripts": {}, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "adaptiveMarkingPenalty": 0, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "prompt": "<p>Use the Cosine Rule to find $\\cos A$: $\\cos A =\\dfrac{b^2+c^2-a^2}{2bc}$. Then use $\\cos^{-1}$ to find $A$. Apply similar rules to find $B$ and $C$.</p>"}], "gaps": [{"type": "numberentry", "useCustomName": false, "customName": "", "marks": 2, "showCorrectAnswer": true, "showFeedbackIcon": true, "scripts": {}, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "adaptiveMarkingPenalty": 0, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "minValue": "{aa0}", "maxValue": "{aa0}", "correctAnswerFraction": false, "allowFractions": false, "mustBeReduced": false, "mustBeReducedPC": 0, "precisionType": "dp", "precision": "0", "precisionPartialCredit": 0, "precisionMessage": "You have not given your answer to the correct precision.", "strictPrecision": false, "showPrecisionHint": false, "notationStyles": ["plain", "en", "si-en"], "correctAnswerStyle": "plain"}, {"type": "numberentry", "useCustomName": false, "customName": "", "marks": 2, "showCorrectAnswer": true, "showFeedbackIcon": true, "scripts": {}, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "adaptiveMarkingPenalty": 0, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "minValue": "{bb0}", "maxValue": "{bb0}", "correctAnswerFraction": false, "allowFractions": false, "mustBeReduced": false, "mustBeReducedPC": 0, "precisionType": "dp", "precision": "0", "precisionPartialCredit": 0, "precisionMessage": "You have not given your answer to the correct precision.", "strictPrecision": false, "showPrecisionHint": false, "notationStyles": ["plain", "en", "si-en"], "correctAnswerStyle": "plain"}, {"type": "numberentry", "useCustomName": false, "customName": "", "marks": 2, "showCorrectAnswer": true, "showFeedbackIcon": true, "scripts": {}, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "adaptiveMarkingPenalty": 0, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "minValue": "{cc0}", "maxValue": "{cc0}", "correctAnswerFraction": false, "allowFractions": false, "mustBeReduced": false, "mustBeReducedPC": 0, "precisionType": "dp", "precision": "0", "precisionPartialCredit": 0, "precisionMessage": "You have not given your answer to the correct precision.", "strictPrecision": false, "showPrecisionHint": false, "notationStyles": ["plain", "en", "si-en"], "correctAnswerStyle": "plain"}], "sortAnswers": false}]}, {"name": "Apply the cosine rule (2 sides, 1 angle, degrees)", "extensions": [], "custom_part_types": [], "resources": [["question-resources/Triangle_700.gif", "/srv/numbas/media/question-resources/Triangle_700.gif"]], "navigation": {"allowregen": true, "showfrontpage": false, "preventleave": false}, "contributors": [{"name": "Newcastle University Mathematics and Statistics", "profile_url": "https://numbas.mathcentre.ac.uk/accounts/profile/697/"}, {"name": "Andrew Chuter", "profile_url": "https://numbas.mathcentre.ac.uk/accounts/profile/4565/"}], "tags": [], "metadata": {"description": "<p>Two questions testing the application of the Cosine Rule when given two sides and an angle. In these questions, the triangle is always acute and both of the given side lengths are adjacent to the given angle.</p>", "licence": "Creative Commons Attribution 4.0 International"}, "statement": "<p>Suppose that $\\Delta ABC$ is a triangle with all interior angles less than $90^\\circ&nbsp;$. Sides and angles are labelled&nbsp;as shown in the diagram below (not to scale).</p>\n<p style=\"margin: 0px;\">Given the following two sides and an angle, determine the third side length. Write down the side length as a whole number.</p>\n<p style=\"margin: 0px;\"></p>\n<p style=\"margin: 0px;\"><img src=\"resources/question-resources/Triangle_700.gif\"/></p>", "advice": "<p>a) Use the Cosine Rule to find $a$: $a^2=b^2+c^2-2bc \\cos A$. &nbsp;&nbsp;</p>\n<p>\\[a^2=\\var{b0}^2+\\var{c0}^2-2 \\times \\var{b0}\\times\\var{c0} \\times \\cos (\\var{aa0})=\\var{b0^2}+\\var{c0^2}-\\var{2*b0*c0} \\times \\var{cos (aa0*pi/180)}\\]</p>\n<p>\\[=\\var{b0^2+c0^2-2*b0*c0* cos (aa0*pi/180)}.\\]</p>\n<p>Hence $a=\\sqrt{\\var{b0^2+c0^2-2*b0*c0* cos (aa0*pi/180)}}=\\var{sqrt(b0^2+c0^2-2*b0*c0* cos (aa0*pi/180))}$. To the nearest integer, this is $\\var{a0}$.</p>\n<p>b) Use the Cosine Rule to find $b$: $b^2=a^2+c^2-2ac \\cos B$. &nbsp;&nbsp;</p>\n<p>\\[b^2=\\var{a3}^2+\\var{c3}^2-2 \\times \\var{a3}\\times\\var{c3} \\times \\cos (\\var{bb3})=\\var{a3^2}+\\var{c3^2}-\\var{2*a3*c3} \\times \\var{cos (bb3*pi/180)}\\]</p>\n<p>\\[=\\var{a3^2+c3^2-2*a3*c3* cos (bb3*pi/180)}.\\]</p>\n<p>Hence $b=\\sqrt{\\var{a3^2+c3^2-2*a3*c3* cos (bb3*pi/180)}}=\\var{sqrt(a3^2+c3^2-2*a3*c3* cos (bb3*pi/180))}$. To the nearest integer, this is $\\var{b3}$.</p>", "rulesets": {"std": ["all", "!collectNumbers", "fractionNumbers", "!noLeadingMinus"]}, "variables": {"cc4": {"name": "cc4", "group": "Ungrouped variables", "definition": "pi-AA3-BB3", "description": "", "templateType": "anything"}, "cc1": {"name": "cc1", "group": "Ungrouped variables", "definition": "pi-aa0-bb0", "description": "", "templateType": "anything"}, "b3": {"name": "b3", "group": "Ungrouped variables", "definition": "random(7..20)", "description": "", "templateType": "anything"}, "s5": {"name": "s5", "group": "Ungrouped variables", "definition": "sin(AA5)", "description": "", "templateType": "anything"}, "c31": {"name": "c31", "group": "Ungrouped variables", "definition": "ceil(sqrt(x4))", "description": "", "templateType": "anything"}, "c2": {"name": "c2", "group": "Ungrouped variables", "definition": "floor(sqrt(x2))", "description": "", "templateType": "anything"}, "check2": {"name": "check2", "group": "Ungrouped variables", "definition": "pi-AA3-BB3-CC3", "description": "", "templateType": "anything"}, "t3": {"name": "t3", "group": "Ungrouped variables", "definition": "sin(BB3)", "description": "", "templateType": "anything"}, "aa2": {"name": "aa2", "group": "Ungrouped variables", "definition": "precround(aa1,3)", "description": "", "templateType": "anything"}, "c3": {"name": "c3", "group": "Ungrouped variables", "definition": "random(c4..c5 except 0)", "description": "", "templateType": "anything"}, "q3": {"name": "q3", "group": "Ungrouped variables", "definition": "(a3^2+c3^2-b3^2)/(2*a3*c3)", "description": "", "templateType": "anything"}, "x4": {"name": "x4", "group": "Ungrouped variables", "definition": "abs(a3^2-b3^2)", "description": "", "templateType": "anything"}, "aa0": {"name": "aa0", "group": "Ungrouped variables", "definition": "precround(arccos(p0)*180/pi,0)", "description": "", "templateType": "anything"}, "bb1": {"name": "bb1", "group": "Ungrouped variables", "definition": "pi-aa0-cc0", "description": "", "templateType": "anything"}, "aa1": {"name": "aa1", "group": "Ungrouped variables", "definition": "pi-bb0-cc0", "description": "", "templateType": "anything"}, "x5": {"name": "x5", "group": "Ungrouped variables", "definition": "a3^2+b3^2", "description": "", "templateType": "anything"}, "aa4": {"name": "aa4", "group": "Ungrouped variables", "definition": "pi-BB3-CC3", "description": "", "templateType": "anything"}, "cc0": {"name": "cc0", "group": "Ungrouped variables", "definition": "precround(arccos(r0),4)", "description": "", "templateType": "anything"}, "c1": {"name": "c1", "group": "Ungrouped variables", "definition": "max(c01,c02)", "description": "", "templateType": "anything"}, "bb5": {"name": "bb5", "group": "Ungrouped variables", "definition": "precround(BB4,3)", "description": "", "templateType": "anything"}, "bb2": {"name": "bb2", "group": "Ungrouped variables", "definition": "precround(bb1,3)", "description": "", "templateType": "anything"}, "p0": {"name": "p0", "group": "Ungrouped variables", "definition": "(c0^2+b0^2-a0^2)/(2*c0*b0)", "description": "", "templateType": "anything"}, "bb4": {"name": "bb4", "group": "Ungrouped variables", "definition": "pi-AA3-CC3", "description": "", "templateType": "anything"}, "check1": {"name": "check1", "group": "Ungrouped variables", "definition": "pi-AA0-BB0-CC0", "description": "", "templateType": "anything"}, "r0": {"name": "r0", "group": "Ungrouped variables", "definition": "(a0^2+b0^2-c0^2)/(2*a0*b0)", "description": "", "templateType": "anything"}, "aa3": {"name": "aa3", "group": "Ungrouped variables", "definition": "precround(arccos(p3),4)", "description": "", "templateType": "anything"}, "temp1": {"name": "temp1", "group": "Ungrouped variables", "definition": "a0*t0/s0", "description": "", "templateType": "anything"}, "c01": {"name": "c01", "group": "Ungrouped variables", "definition": "ceil(sqrt(x1))", "description": "", "templateType": "anything"}, "u2": {"name": "u2", "group": "Ungrouped variables", "definition": "sin(cc2)", "description": "", "templateType": "anything"}, "cc3": {"name": "cc3", "group": "Ungrouped variables", "definition": "precround(arccos(r3),4)", "description": "", "templateType": "anything"}, "c4": {"name": "c4", "group": "Ungrouped variables", "definition": "max(c31,c32)", "description": "", "templateType": "anything"}, "bb3": {"name": "bb3", "group": "Ungrouped variables", "definition": "precround(arccos(q3)*180/pi,0)", "description": "", "templateType": "anything"}, "p3": {"name": "p3", "group": "Ungrouped variables", "definition": "(c3^2+b3^2-a3^2)/(2*c3*b3)", "description": "", "templateType": "anything"}, "s2": {"name": "s2", "group": "Ungrouped variables", "definition": "sin(aa2)", "description": "", "templateType": "anything"}, "u5": {"name": "u5", "group": "Ungrouped variables", "definition": "sin(CC5)", "description": "", "templateType": "anything"}, "c02": {"name": "c02", "group": "Ungrouped variables", "definition": "ceil(min(a0,b0)*0.05)", "description": "", "templateType": "anything"}, "q0": {"name": "q0", "group": "Ungrouped variables", "definition": "(a0^2+c0^2-b0^2)/(2*a0*c0)", "description": "", "templateType": "anything"}, "u3": {"name": "u3", "group": "Ungrouped variables", "definition": "sin(CC3)", "description": "", "templateType": "anything"}, "cc5": {"name": "cc5", "group": "Ungrouped variables", "definition": "precround(CC4,3)", "description": "", "templateType": "anything"}, "bb0": {"name": "bb0", "group": "Ungrouped variables", "definition": "precround(arccos(q0),4)", "description": "", "templateType": "anything"}, "c0": {"name": "c0", "group": "Ungrouped variables", "definition": "random(c1..c2 except 0)", "description": "", "templateType": "anything"}, "t5": {"name": "t5", "group": "Ungrouped variables", "definition": "sin(BB5)", "description": "", "templateType": "anything"}, "a0": {"name": "a0", "group": "Ungrouped variables", "definition": "random(10..25)", "description": "", "templateType": "anything"}, "x2": {"name": "x2", "group": "Ungrouped variables", "definition": "a0^2+b0^2", "description": "", "templateType": "anything"}, "s0": {"name": "s0", "group": "Ungrouped variables", "definition": "sin(aa0)", "description": "", "templateType": "anything"}, "cc2": {"name": "cc2", "group": "Ungrouped variables", "definition": "precround(cc1,3)", "description": "", "templateType": "anything"}, "c5": {"name": "c5", "group": "Ungrouped variables", "definition": "floor(sqrt(x5))", "description": "", "templateType": "anything"}, "b0": {"name": "b0", "group": "Ungrouped variables", "definition": "random(10..25)", "description": "", "templateType": "anything"}, "t2": {"name": "t2", "group": "Ungrouped variables", "definition": "sin(bb2)", "description": "", "templateType": "anything"}, "t0": {"name": "t0", "group": "Ungrouped variables", "definition": "sin(bb0)", "description": "", "templateType": "anything"}, "r3": {"name": "r3", "group": "Ungrouped variables", "definition": "(a3^2+b3^2-c3^2)/(2*a3*b3)", "description": "", "templateType": "anything"}, "x1": {"name": "x1", "group": "Ungrouped variables", "definition": "abs(a0^2-b0^2)", "description": "", "templateType": "anything"}, "u0": {"name": "u0", "group": "Ungrouped variables", "definition": "sin(cc0)", "description": "", "templateType": "anything"}, "a3": {"name": "a3", "group": "Ungrouped variables", "definition": "random(7..20)", "description": "", "templateType": "anything"}, "s3": {"name": "s3", "group": "Ungrouped variables", "definition": "sin(AA3)", "description": "", "templateType": "anything"}, "aa5": {"name": "aa5", "group": "Ungrouped variables", "definition": "precround(AA4,3)", "description": "", "templateType": "anything"}, "c32": {"name": "c32", "group": "Ungrouped variables", "definition": "ceil(min(a3,b3)*0.05)", "description": "", "templateType": "anything"}, "temp2": {"name": "temp2", "group": "Ungrouped variables", "definition": "b0-temp1", "description": "", "templateType": "anything"}}, "variablesTest": {"condition": "", "maxRuns": 100}, "ungrouped_variables": ["c4", "s3", "cc0", "temp2", "temp1", "b0", "cc3", "b3", "u2", "q0", "q3", "c0", "cc5", "s2", "s0", "cc1", "u0", "u3", "cc2", "aa5", "aa4", "aa1", "aa0", "aa3", "aa2", "x2", "c31", "c32", "a0", "a3", "bb0", "s5", "c3", "c2", "c1", "x1", "c02", "x4", "x5", "p3", "p0", "r0", "r3", "bb3", "t5", "t2", "t3", "t0", "u5", "c5", "cc4", "c01", "bb5", "bb4", "check2", "bb2", "bb1", "check1"], "variable_groups": [], "functions": {}, "preamble": {"js": "", "css": ""}, "parts": [{"type": "gapfill", "useCustomName": false, "customName": "", "marks": 0, "showCorrectAnswer": true, "showFeedbackIcon": true, "scripts": {}, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "adaptiveMarkingPenalty": 0, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "prompt": "<p>$A=\\var{AA0}^\\circ$, $b=\\var{b0}$, $c=\\var{c0}$</p>\n<p>Side length $a=$ [[0]]</p>", "stepsPenalty": 1, "steps": [{"type": "information", "useCustomName": false, "customName": "", "marks": 0, "showCorrectAnswer": true, "showFeedbackIcon": true, "scripts": {}, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "adaptiveMarkingPenalty": 0, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "prompt": "<p>Use the Cosine Rule to find $a$: $a^2=b^2+c^2-2bc \\cos A$.</p>"}], "gaps": [{"type": "numberentry", "useCustomName": false, "customName": "", "marks": 2, "showCorrectAnswer": true, "showFeedbackIcon": true, "scripts": {}, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "adaptiveMarkingPenalty": 0, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "minValue": "{a0}", "maxValue": "{a0}", "correctAnswerFraction": false, "allowFractions": false, "mustBeReduced": false, "mustBeReducedPC": 0, "showFractionHint": true, "notationStyles": ["plain", "en", "si-en"], "correctAnswerStyle": "plain"}], "sortAnswers": false}, {"type": "gapfill", "useCustomName": false, "customName": "", "marks": 0, "showCorrectAnswer": true, "showFeedbackIcon": true, "scripts": {}, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "adaptiveMarkingPenalty": 0, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "prompt": "<p>$B=\\var{BB3}^\\circ$, $a=\\var{a3}$, $c=\\var{c3}$</p>\n<p>Side length $b=$ [[0]]</p>", "gaps": [{"type": "numberentry", "useCustomName": false, "customName": "", "marks": 2, "showCorrectAnswer": true, "showFeedbackIcon": true, "scripts": {}, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "adaptiveMarkingPenalty": 0, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "minValue": "{b3}", "maxValue": "{b3}", "correctAnswerFraction": false, "allowFractions": false, "mustBeReduced": false, "mustBeReducedPC": 0, "showFractionHint": true, "notationStyles": ["plain", "en", "si-en"], "correctAnswerStyle": "plain"}], "sortAnswers": false}]}, {"name": "Geometry. Right-angled triangle. Lengths given, sin, cos, tan asked for", "extensions": [], "custom_part_types": [], "resources": [["question-resources/triangle_6nKlln9.png", "/srv/numbas/media/question-resources/triangle_6nKlln9.png"]], "navigation": {"allowregen": true, "showfrontpage": false, "preventleave": false}, "contributors": [{"name": "Lovkush Agarwal", "profile_url": "https://numbas.mathcentre.ac.uk/accounts/profile/1358/"}], "advice": "<p>See 3.4 and 3.5 for background and examples</p>", "preamble": {"js": "", "css": ""}, "variable_groups": [], "tags": [], "variables": {"b": {"name": "b", "description": "", "group": "Ungrouped variables", "templateType": "anything", "definition": "bc[0][0]"}, "a": {"name": "a", "description": "", "group": "Ungrouped variables", "templateType": "anything", "definition": "precround(sqrt(b^2+c^2),1)"}, "bc": {"name": "bc", "description": "", "group": "Ungrouped variables", "templateType": "anything", "definition": "[[1,2],[1,3],[1,4],[2,3],[2,5],[3,4],[3,5],[6,9],[6,10],[8,10]]"}, "c": {"name": "c", "description": "", "group": "Ungrouped variables", "templateType": "anything", "definition": "bc[0][1]"}, "q": {"name": "q", "description": "", "group": "Ungrouped variables", "templateType": "anything", "definition": "shuffle([[expression('sin(x)'),expression('{b}/{a}')],\n  [expression('cos(x)'),expression('{c}/{a}')],\n  [expression('tan(x)'),expression('{b}/{c}')],\n  [expression('sin(y)'),expression('{c}/{a}')],\n  [expression('cos(y)'),expression('{b}/{a}')],\n  [expression('tan(y)'),expression('{c}/{b}')]\n  ])"}}, "rulesets": {}, "ungrouped_variables": ["bc", "b", "c", "a", "q"], "variablesTest": {"condition": "", "maxRuns": 100}, "metadata": {"licence": "Creative Commons Attribution 4.0 International", "description": "Lengths in right-angled triangle a provided. sin, cos and tan of angle asked for"}, "parts": [{"scripts": {}, "prompt": "<p>$a=\\var{a}, b=\\var{b}$ and $c = \\var{c}$.</p>\n<p>What calculation would you do to determine the following. You can leave your answer as a fraction; it does not need to be simplified.</p>\n<p>$\\simplify{{q[0][0]}} =$ [[0]]</p>\n<p>$\\simplify{{q[1][0]}} =$ [[1]]</p>\n<p>$\\simplify{{q[2][0]}} =$ [[2]]</p>\n<p>$\\simplify{{q[3][0]}} =$ [[3]]</p>", "marks": 0, "gaps": [{"scripts": {}, "valuegenerators": [], "variableReplacements": [], "adaptiveMarkingPenalty": 0, "showFeedbackIcon": true, "failureRate": 1, "extendBaseMarkingAlgorithm": true, "checkingType": "absdiff", "vsetRangePoints": 5, "answer": "{q[0][1]}", "type": "jme", "unitTests": [], "customMarkingAlgorithm": "", "vsetRange": [0, 1], "checkingAccuracy": 0.001, "customName": "", "variableReplacementStrategy": "originalfirst", "showPreview": true, "showCorrectAnswer": true, "marks": "0.5", "answerSimplification": "!all", "checkVariableNames": false, "useCustomName": false}, {"scripts": {}, "valuegenerators": [], "variableReplacements": [], "adaptiveMarkingPenalty": 0, "showFeedbackIcon": true, "failureRate": 1, "extendBaseMarkingAlgorithm": true, "checkingType": "absdiff", "vsetRangePoints": 5, "answer": "{q[1][1]}", "type": "jme", "unitTests": [], "customMarkingAlgorithm": "", "vsetRange": [0, 1], "checkingAccuracy": 0.001, "customName": "", "variableReplacementStrategy": "originalfirst", "showPreview": true, "showCorrectAnswer": true, "marks": "0.5", "checkVariableNames": false, "useCustomName": false}, {"scripts": {}, "valuegenerators": [], "variableReplacements": [], "adaptiveMarkingPenalty": 0, "showFeedbackIcon": true, "failureRate": 1, "extendBaseMarkingAlgorithm": true, "checkingType": "absdiff", "vsetRangePoints": 5, "answer": "{q[2][1]}", "type": "jme", "unitTests": [], "customMarkingAlgorithm": "", "vsetRange": [0, 1], "checkingAccuracy": 0.001, "customName": "", "variableReplacementStrategy": "originalfirst", "showPreview": true, "showCorrectAnswer": true, "marks": "0.5", "checkVariableNames": false, "useCustomName": false}, {"scripts": {}, "valuegenerators": [], "variableReplacements": [], "adaptiveMarkingPenalty": 0, "showFeedbackIcon": true, "failureRate": 1, "extendBaseMarkingAlgorithm": true, "checkingType": "absdiff", "vsetRangePoints": 5, "answer": "{q[3][1]}", "type": "jme", "unitTests": [], "customMarkingAlgorithm": "", "vsetRange": [0, 1], "checkingAccuracy": 0.001, "customName": "", "variableReplacementStrategy": "originalfirst", "showPreview": true, "showCorrectAnswer": true, "marks": "0.5", "checkVariableNames": false, "useCustomName": false}], "unitTests": [], "variableReplacements": [], "customMarkingAlgorithm": "", "customName": "", "showFeedbackIcon": true, "variableReplacementStrategy": "originalfirst", "extendBaseMarkingAlgorithm": true, "showCorrectAnswer": true, "useCustomName": false, "sortAnswers": false, "adaptiveMarkingPenalty": 0, "type": "gapfill"}], "statement": "<p style=\"text-align: center;\"><img src=\"resources/question-resources/triangle_6nKlln9.png\"/></p>\n<p style=\"text-align: center;\">(Note the diagram is not drawn to scale)</p>", "functions": {}}, {"name": "Pyramid volume", "extensions": [], "custom_part_types": [], "resources": [["question-resources/square_based_pyramid_pOX5FsT.png", "/srv/numbas/media/question-resources/square_based_pyramid_pOX5FsT.png"]], "navigation": {"allowregen": true, "showfrontpage": false, "preventleave": false}, "contributors": [{"name": "Rachel Staddon", "profile_url": "https://numbas.mathcentre.ac.uk/accounts/profile/901/"}], "functions": {}, "ungrouped_variables": ["py", "x", "y", "volume"], "tags": [], "advice": "<p>The volume of pyramids and cones is:</p>\n<p>$\\frac{1}{3} x base area x height$</p>", "rulesets": {}, "parts": [{"prompt": "<p>What is the volume of the pyramid in cm$^3$?</p>", "allowFractions": false, "variableReplacements": [], "maxValue": "{volume}+0.1", "minValue": "{volume}-0.1", "variableReplacementStrategy": "originalfirst", "correctAnswerFraction": false, "showCorrectAnswer": true, "scripts": {}, "marks": 1, "type": "numberentry", "showPrecisionHint": false}], "statement": "<p>The diagram below shows a square-based pyramid.</p>\n<p>{image('resources/question-resources/'+py)}</p>\n<p>x = {x} cm</p>\n<p>y = {y} cm</p>", "variable_groups": [], "variablesTest": {"maxRuns": 100, "condition": ""}, "preamble": {"css": "", "js": ""}, "variables": {"y": {"definition": "random(5..25)", "templateType": "anything", "group": "Ungrouped variables", "name": "y", "description": ""}, "x": {"definition": "random(1..20)", "templateType": "anything", "group": "Ungrouped variables", "name": "x", "description": ""}, "py": {"definition": "'square_based_pyramid_pOX5FsT.png'", "templateType": "anything", "group": "Ungrouped variables", "name": "py", "description": ""}, "volume": {"definition": "(1/3)*(x*x)*y", "templateType": "anything", "group": "Ungrouped variables", "name": "volume", "description": ""}}, "metadata": {"description": "<p>Volume of pyramids (also works for cones)</p>", "licence": "Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International"}, "type": "question", "showQuestionGroupNames": false, "question_groups": [{"name": "", "pickingStrategy": "all-ordered", "pickQuestions": 0, "questions": []}]}, {"name": "Volume of a sphere", "extensions": [], "custom_part_types": [], "resources": [["question-resources/sphere_T3D0QWG.png", "/srv/numbas/media/question-resources/sphere_T3D0QWG.png"]], "navigation": {"allowregen": true, "showfrontpage": false, "preventleave": false}, "contributors": [{"name": "Rachel Staddon", "profile_url": "https://numbas.mathcentre.ac.uk/accounts/profile/901/"}], "functions": {}, "ungrouped_variables": ["sphere", "z", "volume"], "tags": [], "advice": "<p>The volume of a sphere is $\\frac{4}{3}\\pi r^3$.</p>", "rulesets": {}, "parts": [{"prompt": "<p>Calculate the volume of the sphere in cm$^3$. Give your answer to 2 decimal places.</p>", "allowFractions": false, "variableReplacements": [], "maxValue": "{volume}+0.1", "minValue": "{volume}-0.1", "variableReplacementStrategy": "originalfirst", "correctAnswerFraction": false, "showCorrectAnswer": true, "scripts": {}, "marks": 1, "type": "numberentry", "showPrecisionHint": false}], "statement": "<p>The diagram below shows a sphere.</p>\n<p>{image('resources/question-resources/'+sphere)}</p>\n<p>z = {z} cm</p>\n<p>Take $\\pi$ to be 3.14</p>", "variable_groups": [], "variablesTest": {"maxRuns": 100, "condition": ""}, "preamble": {"css": "", "js": ""}, "variables": {"volume": {"definition": "(4/3)*3.14*(z^3)", "templateType": "anything", "group": "Ungrouped variables", "name": "volume", "description": ""}, "sphere": {"definition": "'sphere_T3D0QWG.png'", "templateType": "anything", "group": "Ungrouped variables", "name": "sphere", "description": ""}, "z": {"definition": "random(1..25)", "templateType": "anything", "group": "Ungrouped variables", "name": "z", "description": ""}}, "metadata": {"description": "<p>Question about the volume of spheres</p>", "licence": "Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International"}, "type": "question", "showQuestionGroupNames": false, "question_groups": [{"name": "", "pickingStrategy": "all-ordered", "pickQuestions": 0, "questions": []}]}, {"name": "Volume and surface area of cuboids", "extensions": [], "custom_part_types": [], "resources": [["question-resources/cuboid_bc6LBWh.png", "/srv/numbas/media/question-resources/cuboid_bc6LBWh.png"]], "navigation": {"allowregen": true, "showfrontpage": false, "preventleave": false}, "contributors": [{"name": "Rachel Staddon", "profile_url": "https://numbas.mathcentre.ac.uk/accounts/profile/901/"}], "functions": {}, "ungrouped_variables": ["cub", "s", "t", "u", "volume", "surfacearea"], "tags": [], "advice": "<p>The volume of a cuboid is the height x width x depth.</p>\n<p>The surface area is the area of the 6 different sides added together. Remember to calculate the area of each pair of sides individually.</p>", "rulesets": {}, "parts": [{"integerPartialCredit": 0, "prompt": "<p>What is the volume of the cuboid in cm$^3$?</p>", "integerAnswer": true, "allowFractions": false, "variableReplacements": [], "maxValue": "{volume}", "minValue": "{volume}", "variableReplacementStrategy": "originalfirst", "correctAnswerFraction": false, "showCorrectAnswer": true, "scripts": {}, "marks": 1, "type": "numberentry", "showPrecisionHint": false}, {"integerPartialCredit": 0, "prompt": "<p>What is the&nbsp;surface area&nbsp;of the cuboid in cm$^2$?</p>", "integerAnswer": true, "allowFractions": false, "variableReplacements": [], "maxValue": "{surfacearea}", "minValue": "{surfacearea}", "variableReplacementStrategy": "originalfirst", "correctAnswerFraction": false, "showCorrectAnswer": true, "scripts": {}, "marks": 1, "type": "numberentry", "showPrecisionHint": false}], "statement": "<p>The diagram below shows a cuboid.</p>\n<p>{image('resources/question-resources/'+cub)}</p>\n<p>s = {s} cm</p>\n<p>t = {t} cm</p>\n<p>u = {u} cm</p>", "variable_groups": [], "variablesTest": {"maxRuns": 100, "condition": ""}, "preamble": {"css": "", "js": ""}, "variables": {"volume": {"definition": "s*t*u", "templateType": "anything", "group": "Ungrouped variables", "name": "volume", "description": ""}, "s": {"definition": "random(15..25)", "templateType": "anything", "group": "Ungrouped variables", "name": "s", "description": ""}, "u": {"definition": "random(5..15)", "templateType": "anything", "group": "Ungrouped variables", "name": "u", "description": ""}, "cub": {"definition": "'cuboid_bc6LBWh.png'", "templateType": "anything", "group": "Ungrouped variables", "name": "cub", "description": ""}, "surfacearea": {"definition": "(2*(s*t))+(2*(s*u))+(2*(t*u))", "templateType": "anything", "group": "Ungrouped variables", "name": "surfacearea", "description": ""}, "t": {"definition": "random(1..10)", "templateType": "anything", "group": "Ungrouped variables", "name": "t", "description": ""}}, "metadata": {"description": "<p>Questions about the volumes and surface areas of cuboids.</p>", "licence": "Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International"}, "type": "question", "showQuestionGroupNames": false, "question_groups": [{"name": "", "pickingStrategy": "all-ordered", "pickQuestions": 0, "questions": []}]}, {"name": "Perpendicular distance between a point and line", "extensions": ["geogebra", "quantities"], "custom_part_types": [{"source": {"pk": 12, "author": {"name": "William Haynes", "pk": 2530}, "edit_page": "/part_type/12/edit"}, "name": "Angle quantity 2020", "short_name": "angle", "description": "<p>Adjusts all angles to 0&lt; $\\theta$ &lt; 360.</p>\n<p>Accepts '&deg;' and 'deg' as units.</p>\n<p>Penalizes if not close enough or no units.</p>\n<p>90&deg; = -270&deg; = 450&deg;</p>", "help_url": "", "input_widget": "string", "input_options": {"correctAnswer": "plain_string(settings['expected_answer']) ", "hint": {"static": true, "value": ""}, "allowEmpty": {"static": true, "value": false}}, "can_be_gap": true, "can_be_step": true, "marking_script": "student_unit:\nstudentAnswer[len(matchnumber(studentAnswer,['plain','en'])[0])..len(studentAnswer)]\n\ncorrect_scalar:\nmod(scalar(settings['expected_answer']),360)\n\nmark:\nfeedback('Student Angle = ' + precround(student_scalar,4) + '\u00b0');\nassert(close,incorrect('Angle is more than ' + settings['close_tol'] + '\u00b0 off.'); end()); // got to be close\nif(right, \n   correct('Angle is correct.'), \n   set_credit(1- settings['close_penalty'], 'Angle is close.')); \nassert(good_unit, sub_credit(settings['unit_penalty'],'Wrong or missing units.'))\n\n   \n\n\n\n\n\ninterpreted_answer:\nqty(mod(student_scalar,360),'deg')\n\nstudent_scalar:\nmod(matchnumber(studentAnswer,['plain','en'])[1],360)\n\n\nclose:\nwithintolerance(student_scalar, correct_scalar,decimal(settings['close_tol']))\n\ngood_unit:\nsame(qty(1,interpreted_unit),qty(1,'deg'))\n\ninterpreted_unit:\nif(trim(student_unit)='\u00b0','deg',student_unit)\n\nright:\nwithintolerance(student_scalar, correct_scalar, decimal(settings['right_tol']))\n\noriginal_student_scalar:\nmatchnumber(studentAnswer,['plain','en'])[1]", "marking_notes": [{"name": "student_unit", "description": "", "definition": "studentAnswer[len(matchnumber(studentAnswer,['plain','en'])[0])..len(studentAnswer)]"}, {"name": "correct_scalar", "description": "", "definition": "mod(scalar(settings['expected_answer']),360)"}, {"name": "mark", "description": "This is the main marking note. It should award credit and provide feedback based on the student's answer.", "definition": "feedback('Student Angle = ' + precround(student_scalar,4) + '\u00b0');\nassert(close,incorrect('Angle is more than ' + settings['close_tol'] + '\u00b0 off.'); end()); // got to be close\nif(right, \n   correct('Angle is correct.'), \n   set_credit(1- settings['close_penalty'], 'Angle is close.')); \nassert(good_unit, sub_credit(settings['unit_penalty'],'Wrong or missing units.'))\n\n   \n\n\n\n"}, {"name": "interpreted_answer", "description": "A value representing the student's answer to this part.", "definition": "qty(mod(student_scalar,360),'deg')"}, {"name": "student_scalar", "description": "", "definition": "mod(matchnumber(studentAnswer,['plain','en'])[1],360)\n"}, {"name": "close", "description": "", "definition": "withintolerance(student_scalar, correct_scalar,decimal(settings['close_tol']))"}, {"name": "good_unit", "description": "", "definition": "same(qty(1,interpreted_unit),qty(1,'deg'))"}, {"name": "interpreted_unit", "description": "", "definition": "if(trim(student_unit)='\u00b0','deg',student_unit)"}, {"name": "right", "description": "", "definition": "withintolerance(student_scalar, correct_scalar, decimal(settings['right_tol']))"}, {"name": "original_student_scalar", "description": "<p>numeric part of students answer, which is a quantity.</p>", "definition": "matchnumber(studentAnswer,['plain','en'])[1]"}], "settings": [{"name": "expected_answer", "label": "Expected Answer", "help_url": "", "hint": "Expected angle as a quantity.", "input_type": "code", "default_value": "qty(30,'deg')", "evaluate": true}, {"name": "unit_penalty", "label": "Unit penalty", "help_url": "", "hint": "Penalty for not including degree sign or 'deg'.", "input_type": "percent", "default_value": "20"}, {"name": "close_penalty", "label": "Close Penalty", "help_url": "", "hint": "Penalty for close answer.", "input_type": "percent", "default_value": "20"}, {"name": "close_tol", "label": "Close", "help_url": "", "hint": "Angle must be $\\pm$ this many degrees to be marked close. &nbsp;&nbsp;", "input_type": "code", "default_value": "0.5", "evaluate": false}, {"name": "right_tol", "label": "Right ", "help_url": "", "hint": "Angle must be $\\pm$ this many degrees to be marked correct. &nbsp;", "input_type": "code", "default_value": "0.1", "evaluate": false}], "public_availability": "restricted", "published": false, "extensions": ["quantities"]}, {"source": {"pk": 19, "author": {"name": "William Haynes", "pk": 2530}, "edit_page": "/part_type/19/edit"}, "name": "Engineering Accuracy with units", "short_name": "engineering-answer", "description": "<p>A value with units marked right if within an adjustable % error of the correct value. &nbsp;Marked close if within a wider margin of error.</p>", "help_url": "", "input_widget": "string", "input_options": {"correctAnswer": "siground(settings['correctAnswer'],4)", "hint": {"static": true, "value": ""}, "allowEmpty": {"static": true, "value": true}}, "can_be_gap": true, "can_be_step": true, "marking_script": "mark:\nswitch( \n  right and good_units and right_sign, add_credit(1.0,'Correct.'),\n  right and good_units and not right_sign, add_credit(settings['C2'],'Wrong sign.'),\n  right and right_sign and not good_units, add_credit(settings['C2'],'Correct value, but wrong or missing units.'),\n  close and good_units, add_credit(settings['C1'],'Close.'),\n  close and not good_units, add_credit(settings['C3'],'Answer is close, but wrong or missing units.'),\n  incorrect('Wrong answer.')\n)\n\n\ninterpreted_answer:\nqty(student_scalar, student_units)\n\n\n\ncorrect_quantity:\nsettings[\"correctAnswer\"]\n\n\n\ncorrect_units:\nunits(correct_quantity)\n\n\nallowed_notation_styles:\n[\"plain\",\"en\"]\n\nmatch_student_number:\nmatchnumber(studentAnswer,allowed_notation_styles)\n\nstudent_scalar:\nmatch_student_number[1]\n\nstudent_units:\nreplace_regex('ohms','ohm',\n  replace_regex('\u00b0', ' deg',\n    replace_regex('-', ' ' ,\n      studentAnswer[len(match_student_number[0])..len(studentAnswer)])),\"i\")\n\ngood_units:\ntry(\ncompatible(quantity(1, student_units),correct_units),\nmsg,\nfeedback(msg);false)\n\n\nstudent_quantity:\nswitch(not good_units, \n       student_scalar * correct_units, \n       not right_sign,\n       -quantity(student_scalar, student_units),\n       quantity(student_scalar,student_units)\n)\n  \n\n\npercent_error:\ntry(\nscalar(abs((correct_quantity - student_quantity)/correct_quantity))*100  \n,msg,\nif(student_quantity=correct_quantity,0,100))\n   \n\nright:\npercent_error <= settings['right']\n\n\nclose:\nright_sign and percent_error <= settings['close']\n\nright_sign:\nsign(student_scalar) = sign(correct_quantity)", "marking_notes": [{"name": "mark", "description": "This is the main marking note. It should award credit and provide feedback based on the student's answer.", "definition": "switch( \n  right and good_units and right_sign, add_credit(1.0,'Correct.'),\n  right and good_units and not right_sign, add_credit(settings['C2'],'Wrong sign.'),\n  right and right_sign and not good_units, add_credit(settings['C2'],'Correct value, but wrong or missing units.'),\n  close and good_units, add_credit(settings['C1'],'Close.'),\n  close and not good_units, add_credit(settings['C3'],'Answer is close, but wrong or missing units.'),\n  incorrect('Wrong answer.')\n)\n"}, {"name": "interpreted_answer", "description": "A value representing the student's answer to this part.", "definition": "qty(student_scalar, student_units)\n\n"}, {"name": "correct_quantity", "description": "", "definition": "settings[\"correctAnswer\"]\n\n"}, {"name": "correct_units", "description": "", "definition": "units(correct_quantity)\n"}, {"name": "allowed_notation_styles", "description": "", "definition": "[\"plain\",\"en\"]"}, {"name": "match_student_number", "description": "", "definition": "matchnumber(studentAnswer,allowed_notation_styles)"}, {"name": "student_scalar", "description": "", "definition": "match_student_number[1]"}, {"name": "student_units", "description": "<p>Modify&nbsp;the&nbsp;unit portion of&nbsp;the student's answer by</p>\n<p>1. replacing \"ohms\" with \"ohm\" &nbsp;case insensitive</p>\n<p>2.&nbsp;replacing '-'&nbsp;with ' '&nbsp;</p>\n<p>3. replacing '&deg;' with ' deg'&nbsp;</p>\n<p>to allow answers like 10 ft-lb and 30&deg;</p>", "definition": "replace_regex('ohms','ohm',\n  replace_regex('\u00b0', ' deg',\n    replace_regex('-', ' ' ,\n      studentAnswer[len(match_student_number[0])..len(studentAnswer)])),\"i\")"}, {"name": "good_units", "description": "", "definition": "try(\ncompatible(quantity(1, student_units),correct_units),\nmsg,\nfeedback(msg);false)\n"}, {"name": "student_quantity", "description": "<p>This fixes the student answer for two common errors. &nbsp;</p>\n<p>If student_units are wrong&nbsp;&nbsp;- replace with correct units</p>\n<p>If student_scalar has the wrong sign - replace with right sign</p>\n<p>If student makes both errors, only one gets fixed.</p>", "definition": "switch(not good_units, \n       student_scalar * correct_units, \n       not right_sign,\n       -quantity(student_scalar, student_units),\n       quantity(student_scalar,student_units)\n)\n  \n"}, {"name": "percent_error", "description": "", "definition": "try(\nscalar(abs((correct_quantity - student_quantity)/correct_quantity))*100  \n,msg,\nif(student_quantity=correct_quantity,0,100))\n   "}, {"name": "right", "description": "", "definition": "percent_error <= settings['right']\n"}, {"name": "close", "description": "<p>Only marked close if the student actually has the right sign.</p>", "definition": "right_sign and percent_error <= settings['close']"}, {"name": "right_sign", "description": "", "definition": "sign(student_scalar) = sign(correct_quantity) "}], "settings": [{"name": "correctAnswer", "label": "Correct Quantity.", "help_url": "", "hint": "The correct answer given as a JME quantity.", "input_type": "code", "default_value": "", "evaluate": true}, {"name": "right", "label": "% Accuracy for right.", "help_url": "", "hint": "Question will be considered correct if the scalar part of the student's answer is within this % of correct value.", "input_type": "code", "default_value": "0.2", "evaluate": true}, {"name": "close", "label": "% Accuracy for close.", "help_url": "", "hint": "Question will be considered close if the scalar part of the student's answer is within this % of correct value.", "input_type": "code", "default_value": "1.0", "evaluate": true}, {"name": "C1", "label": "Close with units.", "help_url": "", "hint": "Partial Credit for close value with appropriate units. &nbsp;if correct answer is 100 N and close is &plusmn;1%,<br />99 &nbsp;N is accepted.", "input_type": "percent", "default_value": "75"}, {"name": "C2", "label": "No units or wrong sign", "help_url": "", "hint": "Partial credit for forgetting units or using wrong sign.<br />If the correct answer is 100 N, both 100 and -100 N are accepted.", "input_type": "percent", "default_value": "50"}, {"name": "C3", "label": "Close, no units.", "help_url": "", "hint": "Partial Credit for close value but forgotten units.<br />This value would be close&nbsp;if the expected units were provided. &nbsp;If the correct answer is 100 N, and close is &plusmn;1%,<br />99 is accepted.", "input_type": "percent", "default_value": "25"}], "public_availability": "always", "published": true, "extensions": ["quantities"]}], "resources": [["question-resources/perpdist.ggb", "/srv/numbas/media/question-resources/perpdist.ggb"]], "navigation": {"allowregen": true, "showfrontpage": false, "preventleave": false}, "contributors": [{"name": "William Haynes", "profile_url": "https://numbas.mathcentre.ac.uk/accounts/profile/2530/"}], "tags": [], "metadata": {"description": "<p>Given a point and a line, determine the distance between them.</p>", "licence": "Creative Commons Attribution-NonCommercial 4.0 International"}, "statement": "<p>{applet()}</p>\n<p>Determine the perpendicular distance between point <em>B</em> = ({B[0]}, {B[1]}) &nbsp;and the line passing through point <em>A</em> = ({A[0]}, {A[1]}) . &nbsp;Grid units are {units}.</p>\n<p></p>\n<p><span data-jme-visible=\"debug\">alpha: {alpha} beta: {beta} d: {d} dperp: {dperp}</span></p>\n<p></p>", "advice": "<ol>\n<li>Draw a diagram showing a triangle with sides that are the perpendicular distance $d_\\perp$ and direct distance $d = \\overline{AB}$.&nbsp;</li>\n<li>Use the distance formula to find the length of segment AB.</li>\n<li>Use trig&nbsp;to find the angle that segment AB makes with the <em>x</em>- or <em>y</em>- axis.</li>\n<li>Use geometry to determine an angle in the triangle. &nbsp;Note that the angle that $d_\\perp$ makes with the vertical is the same as the angle that the line makes with the horizontal. &nbsp;Perpendicular lines have negative reciprocal slopes.</li>\n<li>Use trig with the known hypotenuse $d$&nbsp;and the angle to solve for perpendicular distance $d_\\perp$.</li>\n</ol>", "rulesets": {}, "variables": {"dperp": {"name": "dperp", "group": "Ungrouped variables", "definition": "abs(d * sin(radians(alpha-beta)))", "description": "<p>perpendicular distance from&nbsp;B to line</p>", "templateType": "anything"}, "alpha": {"name": "alpha", "group": "input", "definition": "random(20..160#5 except 90)", "description": "", "templateType": "anything"}, "debug": {"name": "debug", "group": "Ungrouped variables", "definition": "false", "description": "", "templateType": "anything"}, "d": {"name": "d", "group": "Ungrouped variables", "definition": "sqrt((A[0] - B[0])^2 + (A[1] - B[1])^2)", "description": "<p>distance from A to B</p>", "templateType": "anything"}, "A": {"name": "A", "group": "input", "definition": "vector(random(-8..8),random(-8..8))", "description": "", "templateType": "anything"}, "B": {"name": "B", "group": "input", "definition": "vector(random(-8..8),random(-8..8))", "description": "", "templateType": "anything"}, "beta": {"name": "beta", "group": "Ungrouped variables", "definition": "degrees(arctan((A[1]-B[1])/(A[0]-B[0])))", "description": "<p>angle d makes with horizontal</p>", "templateType": "anything"}, "units": {"name": "units", "group": "Ungrouped variables", "definition": "random('in','ft','mm','cm','m')", "description": "", "templateType": "anything"}}, "variablesTest": {"condition": "dperp > 5 and (alpha-beta) > 20 and beta<>0 and beta<> 90", "maxRuns": 100}, "ungrouped_variables": ["d", "beta", "dperp", "debug", "units"], "variable_groups": [{"name": "input", "variables": ["A", "B", "alpha"]}], "functions": {"applet": {"parameters": [], "type": "ggbapplet", "language": "javascript", "definition": "// Create the worksheet. \n// This function returns an object with a container `element` and a `promise` resolving to a GeoGebra applet.\nvar params = {\n  material_id: 'ptkds8nz'\n};\nvar result = Numbas.extensions.geogebra.createGeogebraApplet(params);\n\n// Once the applet has loaded, run some commands to manipulate the worksheet.\nresult.promise.then(function(d) {\n  var app = d.app;\n  question.applet = d;\n   \n  function setGGBPoint(name, nname=name) {\n    // moves point in GGB to Numbas value\n    var pt = Numbas.jme.unwrapValue(question.scope.getVariable(nname));\n    app.setFixed(name,false,false);\n    app.setCoords(name, pt[0], pt[1]);\n    app.setFixed(name,true,true);\n  }\n  \n   function setGGBAngle(gname, nname=gname) {\n    // Sets angle in GGB to a Numbas Variable given in degrees.\n    var v = Math.PI / 180 * Numbas.jme.unwrapValue(question.scope.getVariable(nname));\n    app.setValue(gname,v);\n  }  \n  \n  \n  setGGBPoint(\"A\");\n  setGGBPoint(\"B\");\n  setGGBAngle(\"\u03b1\",\"alpha\");\n  \n  \n});\n\n// This function returns the result of `createGeogebraApplet` as an object \n// with the JME data type 'ggbapplet', which can be substituted into the question's content.\nreturn new Numbas.jme.types.ggbapplet(result)"}}, "preamble": {"js": "question.signals.on('adviceDisplayed',function() {\n  //var app = Numbas.exam.currentQuestion.applet.app;\n  try{\n    var app = question.applet.app;\n  \n app.setValue(\"show\",true);\n  app.setVisible(\"show\",true);\n  app.setLabelVisible(\"show\",false);\n  \n  }\n  catch(err){}  \n})\n\n", "css": ""}, "parts": [{"type": "gapfill", "useCustomName": true, "customName": "Solutions", "marks": 0, "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "prompt": "<p>Find:</p>\n<p style=\"padding-left: 30px;\">The length of the segment <em>AB</em>:</p>\n<p style=\"padding-left: 60px;\">$d = $&nbsp;[[0]]</p>\n<p style=\"padding-left: 30px;\">The angle&nbsp;that AB&nbsp;makes with the horizontal:&nbsp;</p>\n<p style=\"padding-left: 60px;\">$\\beta = $&nbsp;[[1]]</p>\n<p style=\"padding-left: 30px;\">The perpendicular distance:</p>\n<p style=\"padding-left: 60px;\">$d_{\\perp} = $ [[2]]&nbsp;</p>", "gaps": [{"type": "engineering-answer", "useCustomName": true, "customName": "d", "marks": "10", "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "settings": {"correctAnswer": "quantity(d, units)", "right": "0.1", "close": "1.0", "C1": "75", "C2": "50", "C3": "25"}}, {"type": "angle", "useCustomName": true, "customName": "beta", "marks": "10", "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "settings": {"expected_answer": "qty(abs(beta),'deg')", "unit_penalty": "20", "close_penalty": "20", "close_tol": "0.5", "right_tol": "0.2"}}, {"type": "engineering-answer", "useCustomName": true, "customName": "dperp", "marks": "10", "scripts": {}, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "showCorrectAnswer": true, "showFeedbackIcon": true, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "nextParts": [], "suggestGoingBack": false, "adaptiveMarkingPenalty": 0, "exploreObjective": null, "settings": {"correctAnswer": "quantity(dperp, units)", "right": "0.1", "close": "1.0", "C1": "75", "C2": "50", "C3": "25"}}], "sortAnswers": false}], "partsMode": "all", "maxMarks": 0, "objectives": [], "penalties": [], "objectiveVisibility": "always", "penaltyVisibility": "always"}]}], "allowPrinting": true, "navigation": {"allowregen": true, "reverse": true, "browse": true, "allowsteps": true, "showfrontpage": true, "showresultspage": "oncompletion", "navigatemode": "sequence", "onleave": {"action": "none", "message": ""}, "preventleave": true, "startpassword": ""}, "timing": {"allowPause": true, "timeout": {"action": "none", "message": ""}, "timedwarning": {"action": "none", "message": ""}}, "feedback": {"showactualmark": true, "showtotalmark": true, "showanswerstate": true, "allowrevealanswer": true, "advicethreshold": 0, "intro": "", "reviewshowscore": true, "reviewshowfeedback": true, "reviewshowexpectedanswer": true, "reviewshowadvice": true, "feedbackmessages": []}, "diagnostic": {"knowledge_graph": {"topics": [], "learning_objectives": []}, "script": "diagnosys", "customScript": ""}, "contributors": [{"name": "abc temp", "profile_url": "https://numbas.mathcentre.ac.uk/accounts/profile/18152/"}], "extensions": ["eukleides", "geogebra", "jsxgraph", "quantities"], "custom_part_types": [{"source": {"pk": 12, "author": {"name": "William Haynes", "pk": 2530}, "edit_page": "/part_type/12/edit"}, "name": "Angle quantity 2020", "short_name": "angle", "description": "<p>Adjusts all angles to 0&lt; $\\theta$ &lt; 360.</p>\n<p>Accepts '&deg;' and 'deg' as units.</p>\n<p>Penalizes if not close enough or no units.</p>\n<p>90&deg; = -270&deg; = 450&deg;</p>", "help_url": "", "input_widget": "string", "input_options": {"correctAnswer": "plain_string(settings['expected_answer']) ", "hint": {"static": true, "value": ""}, "allowEmpty": {"static": true, "value": false}}, "can_be_gap": true, "can_be_step": true, "marking_script": "student_unit:\nstudentAnswer[len(matchnumber(studentAnswer,['plain','en'])[0])..len(studentAnswer)]\n\ncorrect_scalar:\nmod(scalar(settings['expected_answer']),360)\n\nmark:\nfeedback('Student Angle = ' + precround(student_scalar,4) + '\u00b0');\nassert(close,incorrect('Angle is more than ' + settings['close_tol'] + '\u00b0 off.'); end()); // got to be close\nif(right, \n   correct('Angle is correct.'), \n   set_credit(1- settings['close_penalty'], 'Angle is close.')); \nassert(good_unit, sub_credit(settings['unit_penalty'],'Wrong or missing units.'))\n\n   \n\n\n\n\n\ninterpreted_answer:\nqty(mod(student_scalar,360),'deg')\n\nstudent_scalar:\nmod(matchnumber(studentAnswer,['plain','en'])[1],360)\n\n\nclose:\nwithintolerance(student_scalar, correct_scalar,decimal(settings['close_tol']))\n\ngood_unit:\nsame(qty(1,interpreted_unit),qty(1,'deg'))\n\ninterpreted_unit:\nif(trim(student_unit)='\u00b0','deg',student_unit)\n\nright:\nwithintolerance(student_scalar, correct_scalar, decimal(settings['right_tol']))\n\noriginal_student_scalar:\nmatchnumber(studentAnswer,['plain','en'])[1]", "marking_notes": [{"name": "student_unit", "description": "", "definition": "studentAnswer[len(matchnumber(studentAnswer,['plain','en'])[0])..len(studentAnswer)]"}, {"name": "correct_scalar", "description": "", "definition": "mod(scalar(settings['expected_answer']),360)"}, {"name": "mark", "description": "This is the main marking note. It should award credit and provide feedback based on the student's answer.", "definition": "feedback('Student Angle = ' + precround(student_scalar,4) + '\u00b0');\nassert(close,incorrect('Angle is more than ' + settings['close_tol'] + '\u00b0 off.'); end()); // got to be close\nif(right, \n   correct('Angle is correct.'), \n   set_credit(1- settings['close_penalty'], 'Angle is close.')); \nassert(good_unit, sub_credit(settings['unit_penalty'],'Wrong or missing units.'))\n\n   \n\n\n\n"}, {"name": "interpreted_answer", "description": "A value representing the student's answer to this part.", "definition": "qty(mod(student_scalar,360),'deg')"}, {"name": "student_scalar", "description": "", "definition": "mod(matchnumber(studentAnswer,['plain','en'])[1],360)\n"}, {"name": "close", "description": "", "definition": "withintolerance(student_scalar, correct_scalar,decimal(settings['close_tol']))"}, {"name": "good_unit", "description": "", "definition": "same(qty(1,interpreted_unit),qty(1,'deg'))"}, {"name": "interpreted_unit", "description": "", "definition": "if(trim(student_unit)='\u00b0','deg',student_unit)"}, {"name": "right", "description": "", "definition": "withintolerance(student_scalar, correct_scalar, decimal(settings['right_tol']))"}, {"name": "original_student_scalar", "description": "<p>numeric part of students answer, which is a quantity.</p>", "definition": "matchnumber(studentAnswer,['plain','en'])[1]"}], "settings": [{"name": "expected_answer", "label": "Expected Answer", "help_url": "", "hint": "Expected angle as a quantity.", "input_type": "code", "default_value": "qty(30,'deg')", "evaluate": true}, {"name": "unit_penalty", "label": "Unit penalty", "help_url": "", "hint": "Penalty for not including degree sign or 'deg'.", "input_type": "percent", "default_value": "20"}, {"name": "close_penalty", "label": "Close Penalty", "help_url": "", "hint": "Penalty for close answer.", "input_type": "percent", "default_value": "20"}, {"name": "close_tol", "label": "Close", "help_url": "", "hint": "Angle must be $\\pm$ this many degrees to be marked close. &nbsp;&nbsp;", "input_type": "code", "default_value": "0.5", "evaluate": false}, {"name": "right_tol", "label": "Right ", "help_url": "", "hint": "Angle must be $\\pm$ this many degrees to be marked correct. &nbsp;", "input_type": "code", "default_value": "0.1", "evaluate": false}], "public_availability": "restricted", "published": false, "extensions": ["quantities"]}, {"source": {"pk": 19, "author": {"name": "William Haynes", "pk": 2530}, "edit_page": "/part_type/19/edit"}, "name": "Engineering Accuracy with units", "short_name": "engineering-answer", "description": "<p>A value with units marked right if within an adjustable % error of the correct value. &nbsp;Marked close if within a wider margin of error.</p>", "help_url": "", "input_widget": "string", "input_options": {"correctAnswer": "siground(settings['correctAnswer'],4)", "hint": {"static": true, "value": ""}, "allowEmpty": {"static": true, "value": true}}, "can_be_gap": true, "can_be_step": true, "marking_script": "mark:\nswitch( \n  right and good_units and right_sign, add_credit(1.0,'Correct.'),\n  right and good_units and not right_sign, add_credit(settings['C2'],'Wrong sign.'),\n  right and right_sign and not good_units, add_credit(settings['C2'],'Correct value, but wrong or missing units.'),\n  close and good_units, add_credit(settings['C1'],'Close.'),\n  close and not good_units, add_credit(settings['C3'],'Answer is close, but wrong or missing units.'),\n  incorrect('Wrong answer.')\n)\n\n\ninterpreted_answer:\nqty(student_scalar, student_units)\n\n\n\ncorrect_quantity:\nsettings[\"correctAnswer\"]\n\n\n\ncorrect_units:\nunits(correct_quantity)\n\n\nallowed_notation_styles:\n[\"plain\",\"en\"]\n\nmatch_student_number:\nmatchnumber(studentAnswer,allowed_notation_styles)\n\nstudent_scalar:\nmatch_student_number[1]\n\nstudent_units:\nreplace_regex('ohms','ohm',\n  replace_regex('\u00b0', ' deg',\n    replace_regex('-', ' ' ,\n      studentAnswer[len(match_student_number[0])..len(studentAnswer)])),\"i\")\n\ngood_units:\ntry(\ncompatible(quantity(1, student_units),correct_units),\nmsg,\nfeedback(msg);false)\n\n\nstudent_quantity:\nswitch(not good_units, \n       student_scalar * correct_units, \n       not right_sign,\n       -quantity(student_scalar, student_units),\n       quantity(student_scalar,student_units)\n)\n  \n\n\npercent_error:\ntry(\nscalar(abs((correct_quantity - student_quantity)/correct_quantity))*100  \n,msg,\nif(student_quantity=correct_quantity,0,100))\n   \n\nright:\npercent_error <= settings['right']\n\n\nclose:\nright_sign and percent_error <= settings['close']\n\nright_sign:\nsign(student_scalar) = sign(correct_quantity)", "marking_notes": [{"name": "mark", "description": "This is the main marking note. It should award credit and provide feedback based on the student's answer.", "definition": "switch( \n  right and good_units and right_sign, add_credit(1.0,'Correct.'),\n  right and good_units and not right_sign, add_credit(settings['C2'],'Wrong sign.'),\n  right and right_sign and not good_units, add_credit(settings['C2'],'Correct value, but wrong or missing units.'),\n  close and good_units, add_credit(settings['C1'],'Close.'),\n  close and not good_units, add_credit(settings['C3'],'Answer is close, but wrong or missing units.'),\n  incorrect('Wrong answer.')\n)\n"}, {"name": "interpreted_answer", "description": "A value representing the student's answer to this part.", "definition": "qty(student_scalar, student_units)\n\n"}, {"name": "correct_quantity", "description": "", "definition": "settings[\"correctAnswer\"]\n\n"}, {"name": "correct_units", "description": "", "definition": "units(correct_quantity)\n"}, {"name": "allowed_notation_styles", "description": "", "definition": "[\"plain\",\"en\"]"}, {"name": "match_student_number", "description": "", "definition": "matchnumber(studentAnswer,allowed_notation_styles)"}, {"name": "student_scalar", "description": "", "definition": "match_student_number[1]"}, {"name": "student_units", "description": "<p>Modify&nbsp;the&nbsp;unit portion of&nbsp;the student's answer by</p>\n<p>1. replacing \"ohms\" with \"ohm\" &nbsp;case insensitive</p>\n<p>2.&nbsp;replacing '-'&nbsp;with ' '&nbsp;</p>\n<p>3. replacing '&deg;' with ' deg'&nbsp;</p>\n<p>to allow answers like 10 ft-lb and 30&deg;</p>", "definition": "replace_regex('ohms','ohm',\n  replace_regex('\u00b0', ' deg',\n    replace_regex('-', ' ' ,\n      studentAnswer[len(match_student_number[0])..len(studentAnswer)])),\"i\")"}, {"name": "good_units", "description": "", "definition": "try(\ncompatible(quantity(1, student_units),correct_units),\nmsg,\nfeedback(msg);false)\n"}, {"name": "student_quantity", "description": "<p>This fixes the student answer for two common errors. &nbsp;</p>\n<p>If student_units are wrong&nbsp;&nbsp;- replace with correct units</p>\n<p>If student_scalar has the wrong sign - replace with right sign</p>\n<p>If student makes both errors, only one gets fixed.</p>", "definition": "switch(not good_units, \n       student_scalar * correct_units, \n       not right_sign,\n       -quantity(student_scalar, student_units),\n       quantity(student_scalar,student_units)\n)\n  \n"}, {"name": "percent_error", "description": "", "definition": "try(\nscalar(abs((correct_quantity - student_quantity)/correct_quantity))*100  \n,msg,\nif(student_quantity=correct_quantity,0,100))\n   "}, {"name": "right", "description": "", "definition": "percent_error <= settings['right']\n"}, {"name": "close", "description": "<p>Only marked close if the student actually has the right sign.</p>", "definition": "right_sign and percent_error <= settings['close']"}, {"name": "right_sign", "description": "", "definition": "sign(student_scalar) = sign(correct_quantity) "}], "settings": [{"name": "correctAnswer", "label": "Correct Quantity.", "help_url": "", "hint": "The correct answer given as a JME quantity.", "input_type": "code", "default_value": "", "evaluate": true}, {"name": "right", "label": "% Accuracy for right.", "help_url": "", "hint": "Question will be considered correct if the scalar part of the student's answer is within this % of correct value.", "input_type": "code", "default_value": "0.2", "evaluate": true}, {"name": "close", "label": "% Accuracy for close.", "help_url": "", "hint": "Question will be considered close if the scalar part of the student's answer is within this % of correct value.", "input_type": "code", "default_value": "1.0", "evaluate": true}, {"name": "C1", "label": "Close with units.", "help_url": "", "hint": "Partial Credit for close value with appropriate units. &nbsp;if correct answer is 100 N and close is &plusmn;1%,<br />99 &nbsp;N is accepted.", "input_type": "percent", "default_value": "75"}, {"name": "C2", "label": "No units or wrong sign", "help_url": "", "hint": "Partial credit for forgetting units or using wrong sign.<br />If the correct answer is 100 N, both 100 and -100 N are accepted.", "input_type": "percent", "default_value": "50"}, {"name": "C3", "label": "Close, no units.", "help_url": "", "hint": "Partial Credit for close value but forgotten units.<br />This value would be close&nbsp;if the expected units were provided. &nbsp;If the correct answer is 100 N, and close is &plusmn;1%,<br />99 is accepted.", "input_type": "percent", "default_value": "25"}], "public_availability": "always", "published": true, "extensions": ["quantities"]}], "resources": [["question-resources/AcuteTriangle_tSonQMW.svg", "/srv/numbas/media/question-resources/AcuteTriangle_tSonQMW.svg"], ["question-resources/ObtuseTriangle_Fe8ESh4.svg", "/srv/numbas/media/question-resources/ObtuseTriangle_Fe8ESh4.svg"], ["question-resources/RATriangle1_b6o8mmj.svg", "/srv/numbas/media/question-resources/RATriangle1_b6o8mmj.svg"], ["question-resources/RATriangle2_cpZr4Au.svg", "/srv/numbas/media/question-resources/RATriangle2_cpZr4Au.svg"], ["question-resources/RATriangle3_1rlsOwN.svg", "/srv/numbas/media/question-resources/RATriangle3_1rlsOwN.svg"], ["question-resources/RATriangle4_UsnxMD2.svg", "/srv/numbas/media/question-resources/RATriangle4_UsnxMD2.svg"], ["question-resources/RATriangle2_V82JKE5.svg", "/srv/numbas/media/question-resources/RATriangle2_V82JKE5.svg"], ["question-resources/RATriangle3_cVqd6sf.svg", "/srv/numbas/media/question-resources/RATriangle3_cVqd6sf.svg"], ["question-resources/RATriangle4_03OZUzG.svg", "/srv/numbas/media/question-resources/RATriangle4_03OZUzG.svg"], ["question-resources/Triangle_700_JKWvhba.gif", "/srv/numbas/media/question-resources/Triangle_700_JKWvhba.gif"], ["question-resources/Triangle_700.gif", "/srv/numbas/media/question-resources/Triangle_700.gif"], ["question-resources/triangle_6nKlln9.png", "/srv/numbas/media/question-resources/triangle_6nKlln9.png"], ["question-resources/square_based_pyramid_pOX5FsT.png", "/srv/numbas/media/question-resources/square_based_pyramid_pOX5FsT.png"], ["question-resources/sphere_T3D0QWG.png", "/srv/numbas/media/question-resources/sphere_T3D0QWG.png"], ["question-resources/cuboid_bc6LBWh.png", "/srv/numbas/media/question-resources/cuboid_bc6LBWh.png"], ["question-resources/perpdist.ggb", "/srv/numbas/media/question-resources/perpdist.ggb"]]}
