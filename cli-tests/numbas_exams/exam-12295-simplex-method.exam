// Numbas version: exam_results_page_options
{"questions": [], "duration": 0, "name": "Simplex method", "showQuestionGroupNames": false, "allQuestions": true, "percentPass": 0, "feedback": {"showanswerstate": true, "advicethreshold": 0, "showactualmark": true, "allowrevealanswer": true, "showtotalmark": true}, "shuffleQuestions": false, "question_groups": [{"pickingStrategy": "all-ordered", "questions": [{"name": "Simplex algorithm - bus company", "extensions": ["optimisation"], "custom_part_types": [], "resources": [], "navigation": {"allowregen": true, "showfrontpage": false, "preventleave": false}, "contributors": [{"name": "Christian Lawson-Perfect", "profile_url": "https://numbas.mathcentre.ac.uk/accounts/profile/7/"}, {"name": "Newcastle University Mathematics and Statistics", "profile_url": "https://numbas.mathcentre.ac.uk/accounts/profile/697/"}], "tags": ["simplex"], "metadata": {"description": "<p>Linear program described in words. Student must write out constraints as equations in standard form, then identify the optimal solution in a finished simplex tableau.</p>", "licence": "Creative Commons Attribution 4.0 International"}, "statement": "<p>A travel&nbsp;company needs to order new vehicles to carry their passengers. They will order a mix of shuttles and coaches, subject to the following conditions:</p>\n<ul>\n<li>The company has a budget of &pound;{comma(budget)} to spend. Each shuttle costs &pound;{comma(price_shuttle)}, while a coach costs &pound;{comma(price_coach)}.</li>\n<li>A shuttle can carry {seats_shuttle} passengers, while a coach can carry {seats_coach}. In total, the company must have at least {comma(min_seats)} seats available.</li>\n<li>The company has enough garage space for at most {garage} vehicles.</li>\n<li>The company must order at least {min_shuttles} shuttles and {min_coaches} coaches.</li>\n<li>At least $\\var[fractionnumbers]{prop_coaches}$ of the vehicles must be coaches.</li>\n<li>The company expects to earn a monthly profit of &pound;{comma(base_profit*profit_shuttle)} from&nbsp;each shuttle, and &pound;{comma(base_profit*profit_coach)} from each coach.</li>\n</ul>", "advice": "<h4>a-f)</h4>\n<p>A linear program in standard form uses only strict equations, not inequalities. We can achieve this by introducing a&nbsp;<em>slack variable</em>&nbsp;to each inequality.</p>\n<p>Let $x_1$ be the number of shuttles bought, and $x_2$ the number of coaches.</p>\n<p>The constraints&nbsp;can be written as follows:</p>\n<p>\\begin{align}<br/>\\simplify{{price_shuttle}*x1 + {price_coach}*x2} &amp;\\leq \\var{budget} &amp; \\text{(budget)} \\\\<br/>x_1 + x_2 &amp;\\leq \\var{garage} &amp; \\text{(garage capacity)} \\\\<br/>x_1 &amp;\\geq \\var{min_shuttles} &amp; \\text{(number of shuttles)} \\\\<br/>x_2 &amp;\\geq \\var{min_coaches} &amp; \\text{(number of coaches)} \\\\<br/>\\simplify{{seats_shuttle}*x1 + {seats_coach}*x2} &amp;\\geq \\var{min_seats} &amp; \\text{(number of seats)} \\\\<br/>\\frac{x_2}{x_1+x_2} &amp;\\geq \\var[fractionnumbers]{prop_coaches} &amp; \\text{(proportion of coaches)}<br/>\\end{align}</p>\n<p>\\begin{align}<br/>\\simplify{{price_shuttle}*x1 + {price_coach}*x2} +s_1 &amp;= \\var{budget} &amp; \\text{(budget)} \\\\<br/>x_1 + x_2 +s_2 &amp;= \\var{garage} &amp; \\text{(garage capacity)} \\\\<br/>-x_1 + s_3 &amp;= \\var{-min_shuttles} &amp; \\text{(number of shuttles)} \\\\<br/>-x_2 + s_4 &amp;= \\var{-min_coaches} &amp; \\text{(number of coaches)} \\\\<br/>\\simplify{-{seats_shuttle}*x1 -{seats_coach}*x2} +s_5 &amp;= \\var{-min_seats} &amp; \\text{(number of seats)} \\\\<br/>\\simplify[all,fractionnumbers]{x_1 + {1-1/prop_coaches}x_2} + s_6 &amp;= 0&nbsp;&amp; \\text{(proportion of coaches)}<br/>\\end{align}</p>\n<h4>g)</h4>\n<p>The company expects to earn a monthly profit of &pound;{comma(base_profit*profit_shuttle)} from&nbsp;each shuttle, and &pound;{comma(base_profit*profit_coach)} from each coach, so the total expected monthly profit is</p>\n<p>\\[ \\simplify{{base_profit*profit_shuttle}*x1 + {base_profit*profit_coach}*x2} \\]</p>\n<h4>h)</h4>\n<p>$x_1$ is basic in row {basic_rows[0]+1}, so its value in the optimal solution is $\\var[fractionnumbers]{optimal_tableau[basic_rows[0]][len(equations)+2]}$.</p>\n<p>$x_2$ is basic in row {basic_rows[1]+1}, so its value in the optimal solution is $\\var[fractionnumbers]{optimal_tableau[basic_rows[1]][len(equations)+2]}$.</p>\n<p data-jme-visible=\"len(integer_solutions)&gt;1\">This solution is not feasible in the real world, so we must look for nearby integer&nbsp;solutions. The integer solution which maximises the&nbsp;objective is $x_1 = \\var{num_shuttles}$, $x_2 = \\var{num_coaches}$.</p>\n<p>The company should buy <strong>{num_shuttles} shuttles</strong> and <strong>{num_coaches} coaches</strong>.</p>", "rulesets": {}, "variables": {"num_shuttles_raw": {"name": "num_shuttles_raw", "group": "Simplex solution", "definition": "solution[0]", "description": "<p>Number of shuttles to buy, given by the simplex method. This might be a fraction, in which case we need to look for nearby integer solutions.</p>", "templateType": "anything"}, "basic_rows": {"name": "basic_rows", "group": "Simplex solution", "definition": "simplex_find_basics(optimal_tableau)", "description": "", "templateType": "anything"}, "profit_coach": {"name": "profit_coach", "group": "Initial data", "definition": "profit_shuttle*random(1.2 .. 1.6 # 0.1)", "description": "<p>Profit earned by a single coach</p>", "templateType": "anything"}, "seats_coach": {"name": "seats_coach", "group": "Initial data", "definition": "seats_shuttle+random(50..100#10)", "description": "", "templateType": "anything"}, "profits": {"name": "profits", "group": "Simplex solution", "definition": "map(s[0]*profit_shuttle+s[1]*profit_coach,s,acceptable_solutions)", "description": "<p>Profit earned for each acceptable solution</p>", "templateType": "anything"}, "garage": {"name": "garage", "group": "Initial data", "definition": "min_shuttles+min_coaches+random(5..30#5)", "description": "<p>Total capacity of the garage</p>", "templateType": "anything"}, "profit_shuttle": {"name": "profit_shuttle", "group": "Initial data", "definition": "1", "description": "<p>Profit earned by one shuttle. Doesn't matter what the values really are, so set to 1</p>", "templateType": "anything"}, "solution": {"name": "solution", "group": "Simplex solution", "definition": "simplex(objective,equations)", "description": "<p>Values of each of the variables found by the simplex method.</p>", "templateType": "anything"}, "min_coaches": {"name": "min_coaches", "group": "Initial data", "definition": "random(5..30#5)", "description": "", "templateType": "anything"}, "price_shuttle": {"name": "price_shuttle", "group": "Initial data", "definition": "random(15..40#5)*1000", "description": "<p>The price of a single shuttle</p>", "templateType": "anything"}, "integer_solutions": {"name": "integer_solutions", "group": "Simplex solution", "definition": "list(set(product([floor(num_shuttles_raw),ceil(num_shuttles_raw)],[floor(num_coaches_raw),ceil(num_coaches_raw)])))", "description": "<p>Integer solutions near the (potentially non-integer)&nbsp;solution found by the simplex method.</p>", "templateType": "anything"}, "prop_coaches": {"name": "prop_coaches", "group": "Initial data", "definition": "round(random(min_coaches/garage .. 1-min_shuttles/garage # 0)*12)/12", "description": "<p>Minimum fraction of vehicles bought which must be coaches.</p>\n<p>The minimum value this can possibly be while obeying the minimum order conditions is min_coaches/garage. The maximum it can be is 1-min_shuttles/garage.</p>\n<p>Pick a number between those two values and round off to the nearest 1/12th.</p>", "templateType": "anything"}, "budget": {"name": "budget", "group": "Initial data", "definition": "random(price_shuttle*garage .. price_coach*garage # 10000)", "description": "<p>Total budget. Picked so that it's a realistic amount given the garage space available (no point having this constraint if you can afford to fill the garage with the most expensive vehicle).</p>", "templateType": "anything"}, "equations": {"name": "equations", "group": "Simplex solution", "definition": "reduce_equations([\n  [price_shuttle,price_coach,1,0,0,0,0,0,budget],        // budget\n  [1,1,0,1,0,0,0,0,garage],                              // garage\n  [-1,0,0,0,1,0,0,0,-min_shuttles],                      // number of shuttles\n  [0,-1,0,0,0,1,0,0,-min_coaches],                       // number of coaches\n  [-seats_shuttle,-seats_coach,0,0,0,0,1,0,-min_seats],  // number of seats\n  [1,1-1/prop_coaches,0,0,0,0,0,1,0]                     // proportion of coaches\n])", "description": "<p>Encodings of the constraint equations, for the simplex tableau.</p>\n<p>The reduce_equations function divides the coefficients of each equation so that, for each equation, the gcd of the&nbsp;non-slack variables and the right-hand side is 1.</p>", "templateType": "anything"}, "seats_shuttle": {"name": "seats_shuttle", "group": "Initial data", "definition": "random(30..80#10)", "description": "<p>The number of seats on a shuttle</p>", "templateType": "anything"}, "min_seats": {"name": "min_seats", "group": "Initial data", "definition": "seats_shuttle*min_shuttles + seats_coach*min_coaches + random(100 .. (garage-min_shuttles-min_coaches)*seats_coach # 100)", "description": "<p>The minimum number of seats. Add up the minimum given by the minimum orders of seats and coaches, then add on a few more, making sure we don't ask for more than the garage condition&nbsp;makes possible.</p>", "templateType": "anything"}, "profit": {"name": "profit", "group": "Answer", "definition": "profit_shuttle*num_shuttles + profit_coach*num_coaches", "description": "<p>Total profit earned in the optimal solution.</p>", "templateType": "anything"}, "best_solution": {"name": "best_solution", "group": "Simplex solution", "definition": "acceptable_solutions[filter(profits[x]=max(profits),x,0..len(acceptable_solutions)-1)[0]]", "description": "<p>The solution with the highest profit</p>", "templateType": "anything"}, "base_profit": {"name": "base_profit", "group": "Initial data", "definition": "random(1000..2000#10)", "description": "", "templateType": "anything"}, "price_coach": {"name": "price_coach", "group": "Initial data", "definition": "price_shuttle+random(5..35#5)*1000", "description": "<p>The price of a single coach -&nbsp;always more&nbsp;than a shuttle</p>", "templateType": "anything"}, "optimal_tableau": {"name": "optimal_tableau", "group": "Simplex solution", "definition": "simplex_optimal_tableau(objective,equations)", "description": "<p>Optimal tableau found by the simplex method</p>", "templateType": "anything"}, "num_coaches": {"name": "num_coaches", "group": "Answer", "definition": "best_solution[1]", "description": "<p>The number of coaches to buy</p>", "templateType": "anything"}, "num_coaches_raw": {"name": "num_coaches_raw", "group": "Simplex solution", "definition": "solution[1]", "description": "<p>Number of coaches&nbsp;to buy, given by the simplex method. This might be a fraction, in which case we need to look for nearby integer solutions.</p>", "templateType": "anything"}, "acceptable_solutions": {"name": "acceptable_solutions", "group": "Simplex solution", "definition": "filter(\n  let(shuttles,s[0],coaches,s[1],\n    shuttles+coaches<=garage\n    and\n    shuttles>=min_shuttles\n    and\n    coaches>=min_coaches\n    and\n    coaches/(coaches+shuttles)>=prop_coaches\n    and\n    shuttles*price_shuttle + coaches*price_coach<=budget\n    and\n    shuttles*seats_shuttle + coaches*seats_coach >= min_seats\n  ),\n  s,\n  integer_solutions\n)", "description": "<p>The integer solutions which satisfy&nbsp;all the constraints.</p>", "templateType": "anything"}, "min_shuttles": {"name": "min_shuttles", "group": "Initial data", "definition": "random(5..30#5)", "description": "<p>Minimum number of shuttles that must be bought</p>", "templateType": "anything"}, "num_shuttles": {"name": "num_shuttles", "group": "Answer", "definition": "best_solution[0]", "description": "<p>The number of shuttles to buy</p>", "templateType": "anything"}, "objective": {"name": "objective", "group": "Simplex solution", "definition": "[base_profit*profit_shuttle,base_profit*profit_coach,0,0,0,0,0,0]", "description": "<p>Encoding of the objective function for the simplex tableau</p>", "templateType": "anything"}}, "variablesTest": {"condition": "len(acceptable_solutions)>0", "maxRuns": "100"}, "ungrouped_variables": [], "variable_groups": [{"name": "Initial data", "variables": ["price_shuttle", "price_coach", "min_shuttles", "min_coaches", "garage", "budget", "seats_shuttle", "seats_coach", "min_seats", "prop_coaches", "profit_shuttle", "profit_coach", "base_profit"]}, {"name": "Simplex solution", "variables": ["objective", "equations", "optimal_tableau", "solution", "num_shuttles_raw", "num_coaches_raw", "integer_solutions", "acceptable_solutions", "profits", "best_solution", "basic_rows"]}, {"name": "Answer", "variables": ["num_shuttles", "num_coaches", "profit"]}], "functions": {"comma": {"parameters": [["n", "number"]], "type": "number", "language": "javascript", "definition": "//format a number with commas every three digits\nn = Numbas.math.precround(n,2)\nvar s = Math.floor(n)+'';\nfor(var i=s.length-3;i>0;i-=3) {\n  s = s.slice(0,i)+','+s.slice(i);\n}\nvar d = (n%1);\nif(d>0) {\n  return s+'.'+Numbas.math.niceNumber(d).slice(2);\n} else {\n  return s\n}"}, "reduce_equations": {"parameters": [["equations", "list"]], "type": "list", "language": "jme", "definition": "// reduce each of the linear equations so the non-slack variables and the RHS have gcd 1\nmap(\n  let(l,len(row),g,gcd([row[0],row[1],row[len(row)-1]]),\n    [row[0]/g,row[1]/g]+row[2..l-1]+[row[l-1]/g]\n  ),\n  row,\n  equations\n)"}, "gcd": {"parameters": [["l", "list"]], "type": "number", "language": "javascript", "definition": "var g;\nfor(var s=0;s<l.length;s++) {\n  if(l[s]!=0) {\n    g = Math.abs(l[s]);\n    break;\n  }\n}\nfor(i=s+1;i<l.length;i++) {\n  if(l[i]>0) {\n    g = Numbas.math.gcd(g,Math.abs(l[i]));\n  }\n}\nreturn g;"}}, "preamble": {"js": "", "css": "/* hide the feedback icons on the part g gaps */\n.parts > .part:nth-child(7) .part .feedback-icon {\n  display: none;\n}"}, "parts": [{"type": "gapfill", "useCustomName": false, "customName": "", "marks": 0, "showCorrectAnswer": true, "showFeedbackIcon": true, "scripts": {}, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "adaptiveMarkingPenalty": 0, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "prompt": "<p>Write an equation in standard form for the constraint defined by the budget. Let <code>x1</code> be the number of shuttles bought, and <code>x2</code>&nbsp;the number of coaches, with a slack variable <code>s1</code>.</p>\n<p><strong>Do not cancel any of the coefficients in your answer.</strong></p>\n<p>[[0]] $+ s_1 =$&nbsp;[[1]]</p>", "gaps": [{"type": "jme", "useCustomName": false, "customName": "", "marks": "0.5", "showCorrectAnswer": true, "showFeedbackIcon": true, "scripts": {}, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "adaptiveMarkingPenalty": 0, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "answer": "{price_shuttle}*x1 + {price_coach}*x2", "showPreview": true, "checkingType": "absdiff", "checkingAccuracy": 0.001, "failureRate": 1, "vsetRangePoints": 5, "vsetRange": [0, 1], "checkVariableNames": false, "valuegenerators": [{"name": "x1", "value": ""}, {"name": "x2", "value": ""}]}, {"type": "jme", "useCustomName": false, "customName": "", "marks": "0.5", "showCorrectAnswer": true, "showFeedbackIcon": true, "scripts": {}, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "adaptiveMarkingPenalty": 0, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "answer": "{budget}", "showPreview": true, "checkingType": "absdiff", "checkingAccuracy": 0.001, "failureRate": 1, "vsetRangePoints": 5, "vsetRange": [0, 1], "checkVariableNames": false, "valuegenerators": []}], "sortAnswers": false}, {"type": "gapfill", "useCustomName": false, "customName": "", "marks": 0, "showCorrectAnswer": true, "showFeedbackIcon": true, "scripts": {}, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "adaptiveMarkingPenalty": 0, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "prompt": "<p>Write an equation in standard form for the constraint defined by the capacity of the garage. Let <code>x1</code> be the number of shuttles bought, and <code>x2</code>&nbsp;the number of coaches, with a slack variable <code>s2</code>.</p>\n<p>[[0]] $ + s_2 = $&nbsp;[[1]]</p>", "gaps": [{"type": "jme", "useCustomName": false, "customName": "", "marks": "0.5", "showCorrectAnswer": true, "showFeedbackIcon": true, "scripts": {}, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "adaptiveMarkingPenalty": 0, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "answer": "x1 + x2", "showPreview": true, "checkingType": "absdiff", "checkingAccuracy": 0.001, "failureRate": 1, "vsetRangePoints": 5, "vsetRange": [0, 1], "checkVariableNames": false, "valuegenerators": [{"name": "x1", "value": ""}, {"name": "x2", "value": ""}]}, {"type": "jme", "useCustomName": false, "customName": "", "marks": "0.5", "showCorrectAnswer": true, "showFeedbackIcon": true, "scripts": {}, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "adaptiveMarkingPenalty": 0, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "answer": "{garage}", "showPreview": true, "checkingType": "absdiff", "checkingAccuracy": 0.001, "failureRate": 1, "vsetRangePoints": 5, "vsetRange": [0, 1], "checkVariableNames": false, "valuegenerators": []}], "sortAnswers": false}, {"type": "gapfill", "useCustomName": false, "customName": "", "marks": 0, "showCorrectAnswer": true, "showFeedbackIcon": true, "scripts": {}, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "adaptiveMarkingPenalty": 0, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "prompt": "<p>Write an equation in standard form for the constraint defined by the required number of shuttles.&nbsp;Let <code>x1</code> be the number of shuttles bought, with a slack variable <code>s3</code>.</p>\n<p>[[0]] $ + s_3 = $&nbsp;[[1]]</p>", "gaps": [{"type": "jme", "useCustomName": false, "customName": "", "marks": "0.5", "showCorrectAnswer": true, "showFeedbackIcon": true, "scripts": {}, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "adaptiveMarkingPenalty": 0, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "answer": "-x1", "showPreview": true, "checkingType": "absdiff", "checkingAccuracy": 0.001, "failureRate": 1, "vsetRangePoints": 5, "vsetRange": [0, 1], "checkVariableNames": false, "valuegenerators": [{"name": "x1", "value": ""}]}, {"type": "jme", "useCustomName": false, "customName": "", "marks": "0.5", "showCorrectAnswer": true, "showFeedbackIcon": true, "scripts": {}, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "adaptiveMarkingPenalty": 0, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "answer": "-{min_shuttles}", "showPreview": true, "checkingType": "absdiff", "checkingAccuracy": 0.001, "failureRate": 1, "vsetRangePoints": 5, "vsetRange": [0, 1], "checkVariableNames": false, "valuegenerators": []}], "sortAnswers": false}, {"type": "gapfill", "useCustomName": false, "customName": "", "marks": 0, "showCorrectAnswer": true, "showFeedbackIcon": true, "scripts": {}, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "adaptiveMarkingPenalty": 0, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "prompt": "<p>Write an equation in standard form for the constraint defined by the required number of coaches.&nbsp;Let <code>x2</code>&nbsp;be the number of coaches&nbsp;bought, with a slack variable <code>s4</code>.</p>\n<p>[[0]] $ + s_4 = $&nbsp;[[1]]</p>", "gaps": [{"type": "jme", "useCustomName": false, "customName": "", "marks": "0.5", "showCorrectAnswer": true, "showFeedbackIcon": true, "scripts": {}, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "adaptiveMarkingPenalty": 0, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "answer": "-x2", "showPreview": true, "checkingType": "absdiff", "checkingAccuracy": 0.001, "failureRate": 1, "vsetRangePoints": 5, "vsetRange": [0, 1], "checkVariableNames": false, "valuegenerators": [{"name": "x2", "value": ""}]}, {"type": "jme", "useCustomName": false, "customName": "", "marks": "0.5", "showCorrectAnswer": true, "showFeedbackIcon": true, "scripts": {}, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "adaptiveMarkingPenalty": 0, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "answer": "-{min_coaches}", "showPreview": true, "checkingType": "absdiff", "checkingAccuracy": 0.001, "failureRate": 1, "vsetRangePoints": 5, "vsetRange": [0, 1], "checkVariableNames": false, "valuegenerators": []}], "sortAnswers": false}, {"type": "gapfill", "useCustomName": false, "customName": "", "marks": 0, "showCorrectAnswer": true, "showFeedbackIcon": true, "scripts": {}, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "adaptiveMarkingPenalty": 0, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "prompt": "<p>Write an equation in standard form for the constraint defined by the required number of available seats. Let <code>x1</code> be the number of shuttles bought, and <code>x2</code>&nbsp;the number of coaches, with a slack variable <code>s5</code>.</p>\n<p>[[0]] $ + s_5 = $&nbsp;[[1]]</p>", "gaps": [{"type": "jme", "useCustomName": false, "customName": "", "marks": "0.5", "showCorrectAnswer": true, "showFeedbackIcon": true, "scripts": {}, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "adaptiveMarkingPenalty": 0, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "answer": "-{seats_shuttle}*x1 - {seats_coach}*x2", "showPreview": true, "checkingType": "absdiff", "checkingAccuracy": 0.001, "failureRate": 1, "vsetRangePoints": 5, "vsetRange": [0, 1], "checkVariableNames": false, "valuegenerators": [{"name": "x1", "value": ""}, {"name": "x2", "value": ""}]}, {"type": "jme", "useCustomName": false, "customName": "", "marks": "0.5", "showCorrectAnswer": true, "showFeedbackIcon": true, "scripts": {}, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "adaptiveMarkingPenalty": 0, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "answer": "-{min_seats}", "showPreview": true, "checkingType": "absdiff", "checkingAccuracy": 0.001, "failureRate": 1, "vsetRangePoints": 5, "vsetRange": [0, 1], "checkVariableNames": false, "valuegenerators": []}], "sortAnswers": false}, {"type": "gapfill", "useCustomName": false, "customName": "", "marks": 0, "showCorrectAnswer": true, "showFeedbackIcon": true, "scripts": {}, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "adaptiveMarkingPenalty": 0, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "prompt": "<p>Write an equation in standard form for the constraint defined by the required proportion of coaches.&nbsp;Let <code>x1</code> be the number of shuttles bought, and&nbsp;<code>x2</code>&nbsp;the number of coaches&nbsp;bought, with a slack variable <code>s6</code>.</p>\n<p>$x_1 + $&nbsp;[[0]] $ \\times x_2 + s_6 = $&nbsp;[[1]]</p>", "gaps": [{"type": "numberentry", "useCustomName": false, "customName": "", "marks": "0.5", "showCorrectAnswer": true, "showFeedbackIcon": true, "scripts": {}, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "adaptiveMarkingPenalty": 0, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "minValue": "1-1/prop_coaches", "maxValue": "1-1/prop_coaches", "correctAnswerFraction": true, "allowFractions": true, "mustBeReduced": false, "mustBeReducedPC": 0, "showFractionHint": true, "notationStyles": ["plain", "en", "si-en"], "correctAnswerStyle": "plain"}, {"type": "numberentry", "useCustomName": false, "customName": "", "marks": "0.5", "showCorrectAnswer": true, "showFeedbackIcon": true, "scripts": {}, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "adaptiveMarkingPenalty": 0, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "minValue": "0", "maxValue": "0", "correctAnswerFraction": false, "allowFractions": false, "mustBeReduced": false, "mustBeReducedPC": 0, "showFractionHint": true, "notationStyles": ["plain", "en", "si-en"], "correctAnswerStyle": "plain"}], "sortAnswers": false}, {"type": "gapfill", "useCustomName": false, "customName": "", "marks": 0, "showCorrectAnswer": true, "showFeedbackIcon": true, "scripts": {}, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "adaptiveMarkingPenalty": 0, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "prompt": "<p>Write a function&nbsp;for the&nbsp;profit the company expects to earn each month, based on the number of shuttles (<code>x1</code>) and coaches (<code>x2</code>) ordered.</p>\n<p>$\\text{Profit}&nbsp;= $&nbsp;[[0]]</p>", "gaps": [{"type": "jme", "useCustomName": false, "customName": "", "marks": 1, "showCorrectAnswer": true, "showFeedbackIcon": true, "scripts": {}, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "adaptiveMarkingPenalty": 0, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "answer": "{base_profit*profit_shuttle}*x1 + {base_profit*profit_coach}*x2", "showPreview": true, "checkingType": "absdiff", "checkingAccuracy": 0.001, "failureRate": 1, "vsetRangePoints": 5, "vsetRange": [0, 1], "checkVariableNames": false, "valuegenerators": [{"name": "x1", "value": ""}, {"name": "x2", "value": ""}]}], "sortAnswers": false}, {"type": "gapfill", "useCustomName": false, "customName": "", "marks": 0, "showCorrectAnswer": true, "showFeedbackIcon": true, "scripts": {}, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "adaptiveMarkingPenalty": 0, "customMarkingAlgorithm": "all_valid:\n  map(assert(x[\"valid\"], concat_feedback(x[\"feedback\"],1/len(gaps))), x, marked_original_order)\n\nshuttles:\n  interpreted_answers[0]\n\ncoaches:\n  interpreted_answers[1]\n\nconditions:\n  [\n    shuttles+coaches<=garage,\n    shuttles>=min_shuttles,\n    coaches>=min_coaches,\n    coaches/(coaches+shuttles)>=prop_coaches,\n    shuttles*price_shuttle + coaches*price_coach<=budget,\n    shuttles*seats_shuttle + coaches*seats_coach >= min_seats\n  ]\n\nconditions_unsatisfied:\n  assert(all(conditions),\n    incorrect(\"Your solution does not satisfy all of the conditions.\");\n    end();\n    true\n  )\n  \nstudent_profit: shuttles*profit_shuttle + coaches*profit_coach\n\nprofit_optimal:\n  if(student_profit >= profit,\n    correct(\"Your solution is optimal.\")\n  ,\n    incorrect(\"There is another solution which gives a higher profit.\")\n  )\n\nmark:\n  apply(all_valid);\n  apply(conditions_unsatisfied);\n  apply(profit_optimal)", "extendBaseMarkingAlgorithm": true, "unitTests": [], "prompt": "<p>Below is an optimal tableau for the linear program.</p>\n<p>{simplex_final_tableau(objective,equations)}</p>\n<p>How many shuttles and coaches should the company order, in order to maximise their profit?</p>\n<p>[[0]] shuttles</p>\n<p>[[1]] coaches</p>", "gaps": [{"type": "numberentry", "useCustomName": false, "customName": "", "marks": "0.5", "showCorrectAnswer": true, "showFeedbackIcon": false, "scripts": {}, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "adaptiveMarkingPenalty": 0, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "minValue": "num_shuttles", "maxValue": "num_shuttles", "correctAnswerFraction": true, "allowFractions": true, "mustBeReduced": false, "mustBeReducedPC": 0, "showFractionHint": true, "notationStyles": ["plain", "en", "si-en"], "correctAnswerStyle": "plain"}, {"type": "numberentry", "useCustomName": false, "customName": "", "marks": "0.5", "showCorrectAnswer": true, "showFeedbackIcon": false, "scripts": {}, "variableReplacements": [], "variableReplacementStrategy": "originalfirst", "adaptiveMarkingPenalty": 0, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "unitTests": [], "minValue": "num_coaches", "maxValue": "num_coaches", "correctAnswerFraction": true, "allowFractions": true, "mustBeReduced": false, "mustBeReducedPC": 0, "showFractionHint": true, "notationStyles": ["plain", "en", "si-en"], "correctAnswerStyle": "plain"}], "sortAnswers": false}]}, {"name": "Simplex method - 4 or 5 random inequalities", "extensions": ["optimisation"], "custom_part_types": [], "resources": [], "navigation": {"allowregen": true, "showfrontpage": false, "preventleave": false}, "contributors": [{"name": "Christian Lawson-Perfect", "profile_url": "https://numbas.mathcentre.ac.uk/accounts/profile/7/"}, {"name": "Newcastle University Mathematics and Statistics", "profile_url": "https://numbas.mathcentre.ac.uk/accounts/profile/697/"}], "variable_groups": [], "variables": {"lines": {"group": "Ungrouped variables", "templateType": "anything", "definition": "map(\n  line_through_points(raw_lines[j][0],raw_lines[j][1],j,len(raw_lines)),\n  j,\n  0..len(raw_lines)-1\n)", "description": "<p>Encodings of the edges as equations for the simplex method.</p>\n<p>Each equation has a coefficient of x1 and x2, a coefficient of 1 for one of the slack variables, and a constant on the right hand side.</p>", "name": "lines"}, "sol": {"group": "Ungrouped variables", "templateType": "anything", "definition": "simplex(objective,lines)", "description": "<p>Solution to the optimisation problem, found through the simplex&nbsp;method.</p>", "name": "sol"}, "points": {"group": "Ungrouped variables", "templateType": "anything", "definition": "repeat(\n  repeat(random(1..20),2),\n  num_points\n)", "description": "<p>Some random points uniformly distributed in a box</p>", "name": "points"}, "raw_lines": {"group": "Ungrouped variables", "templateType": "anything", "definition": "shuffle(map(\n  let(p1,hull[j],p2,hull[mod(j+1,len(hull))],\n    [p1,p2]\n  ),\n  j,\n  0..len(hull)-1\n))", "description": "<p>Each of the edges of the convex hull</p>", "name": "raw_lines"}, "basic_rows": {"group": "Ungrouped variables", "templateType": "anything", "definition": "simplex_find_basics(optimal_tableau)", "description": "<p>Which row each variable is basic in (or -1 if not basic)</p>", "name": "basic_rows"}, "num_points": {"group": "Ungrouped variables", "templateType": "anything", "definition": "5", "description": "<p>Number of points to generate</p>", "name": "num_points"}, "solution_feasible": {"group": "Ungrouped variables", "templateType": "anything", "definition": "abs(matrix(lines)*(vector(sol)+vector(repeat(0,len(sol)-1)+[-1])))<10^(-13)", "description": "<p>Are all the constraints satisfied? Multiply the solution vector by&nbsp;a matrix representing the lines, and subtract the right-hand sides. If any element of the result&nbsp;is non-zero, the solution is infeasible.</p>\n<p>This works in floating-point, so there's a margin of tolerance of 10^-13 to account for rounding errors. An infeasible solution would produce a value much bigger than that, closer to an integer</p>", "name": "solution_feasible"}, "optimal_tableau": {"group": "Ungrouped variables", "templateType": "anything", "definition": "simplex_optimal_tableau(objective,lines)", "description": "", "name": "optimal_tableau"}, "optimal_profit": {"group": "Ungrouped variables", "templateType": "anything", "definition": "sol[0]*objective[0] + sol[1]*objective[1]", "description": "<p>Value of the objective function at the optimal solution.</p>", "name": "optimal_profit"}, "objective": {"group": "Ungrouped variables", "templateType": "anything", "definition": "[random(1..10),random(1..10)]+repeat(0,len(lines))", "description": "<p>The objective function to be maximised - coefficients of each variable.</p>", "name": "objective"}, "hull": {"group": "Ungrouped variables", "templateType": "anything", "definition": "convex_hull(points)", "description": "<p>The convex hull of the generated points.</p>\n<p>It looks like about 50% of the time there are 4 points on the convex hull, when num_points=5.</p>", "name": "hull"}}, "ungrouped_variables": ["num_points", "points", "hull", "raw_lines", "lines", "objective", "sol", "optimal_profit", "optimal_tableau", "basic_rows", "solution_feasible"], "functions": {"line_through_points": {"type": "list", "language": "javascript", "definition": "var dx = p2[0]-p1[0];\nvar dy = p2[1]-p1[1];\nvar g = dx==0 ? dy==0 ? 1 : Math.abs(dy) : dy==0 ? Math.abs(dx) : Numbas.math.gcd(Math.abs(dx),Math.abs(dy));\nvar c = dx*p1[1]-dy*p1[0]\ng = Numbas.math.gcd(g,Math.abs(c));\nvar a = -dy/g;\nvar b = dx/g;\nc = c/g;\nif(false && dx<0) {\n  a = -a;\n  b = -b;\n  c = -c;\n}\nvar line = [a,b];\nfor(var i=0;i<j;i++) {\n  line.push(0)\n}\nline.push(1);\nfor(var i=j+1;i<n;i++) {\n  line.push(0);\n}\nline.push(c);\nreturn line;", "parameters": [["p1", "list"], ["p2", "list"], ["j", "number"], ["n", "number"]]}, "show_points": {"type": "html", "language": "javascript", "definition": "var canvas = document.createElement('canvas');\ncanvas.setAttribute('width',400);\ncanvas.setAttribute('height',400);\nvar ctx = canvas.getContext('2d');\n\nfunction tx(x) {\n  return x*19+10;\n}\nfunction ty(y) {\n  return 400-y*19+10;\n}\n\nfunction draw() {\n  ctx.clearRect(0,0,400,400);\n\n  ctx.beginPath();\n  ctx.fillStyle = 'rgba(0,0,0,0.05)';\n  hull.forEach(function(p) {\n    ctx.lineTo(tx(p[0]),ty(p[1]));\n  });\n  ctx.closePath();\n  ctx.fill();\n\n\n  points.forEach(function(p,i) {\n    if(hull.indexOf(p)>=0) {\n      ctx.fillStyle ='rgba(0,0,0,1)';\n      ctx.fillRect(tx(p[0])-2.5,ty(p[1])-2.5,5,5);\n    } else {\n      ctx.fillStyle ='rgba(0,0,0,0.5)';\n      ctx.fillRect(tx(p[0])-1.5,ty(p[1])-1.5,3,3);\n    }\n  });\n  \n  hull.forEach(function(p,i) {\n    ctx.fillStyle = 'rgba(0,0,0,1)';\n    ctx.font = \"16px sans-serif\";\n    ctx.fillText(i, tx(p[0]), ty(p[1]));\n  });\n\n  var op = hull[hull.length-1];\n  ctx.strokeStyle = 'rgba(0,0,0,0.2)';\n  hull.forEach(function(p,i) {\n    var dx = (p[0]-op[0]);\n    var dy = (p[1]-op[1]);\n    if(dx<0) {\n      dx = -dx;\n      dy = -dy;\n    }\n    var m = dy/dx;\n    var c = p[1]-m*p[0];\n    ctx.moveTo(tx(0),ty(c));\n    ctx.lineTo(tx(20),ty(20*m+c));\n    op = p;\n  })\n  ctx.closePath();\n  ctx.stroke();\n  \n  ctx.fillStyle='rgba(0,0,255,1)';\n  ctx.fillRect(tx(solution[0])-2,ty(solution[1])-2,4,4);\n}\n\n\nvar frame = function() {\n  requestAnimationFrame(frame);\n  draw();\n}\nframe();\nreturn new Numbas.jme.types.THTML(canvas);\n", "parameters": [["points", "list"], ["hull", "list"], ["solution", "list"]]}, "lines_as_inequalities": {"type": "string", "language": "javascript", "definition": "var out = '\\\\begin{align} '\nvar olines = [];\nfor(var i=0;i<lines.length;i++) {\n  var a = lines[i][0];\n  var b = lines[i][1];\n  var c = lines[i][lines[i].length-1];\n  var op = c>=0 ? '\\\\leq' : '\\\\geq';\n  if(c<0) {\n    a = -a;\n    b = -b;\n    c = -c;\n  }\n  var expr = '('+a+')x1 + ('+b+')x2';\n  var latex = Numbas.jme.display.exprToLaTeX(expr,'all,!noLeadingMinus',Numbas.jme.builtinScope);\n  olines.push(latex+' &'+op+' '+Numbas.math.niceNumber(c));\n}\nolines.push('x_1, x_2 &\\\\geq 0');\nout += olines.join(' \\\\\\\\ ')+'\\\\end{align}'\nreturn out", "parameters": [["lines", "list"]]}}, "parts": [{"prompt": "<p>Use the optimal simplex tableau below to identify the optimal solution to the linear program.</p>\n<p>{simplex_final_tableau(objective,lines)}</p>\n<p>$x_1 = $&nbsp;[[0]]</p>\n<p>$x_2 = $&nbsp;[[1]]</p>", "customMarkingAlgorithm": "all_valid:\n  map(assert(x[\"valid\"], concat_feedback(x[\"feedback\"],1/len(gaps))), x, marked_original_order)\n\n\nx1: \n  interpreted_answers[0]\n\nx2: \n  interpreted_answers[1]\n\nconditions:\n  map(\n    line[0]*x1 + line[1]*x2 <= line[len(line)-1],\n    line,\n    lines\n  )\n\nconditions_unsatisfied:\n  assert(all(conditions),\n    incorrect(\"Your solution does not satisfy all of the conditions.\");\n    end();\n    true\n  )\n\nstudent_profit:\n  x1*objective[0] + x2*objective[1]\n\nprofit_optimal:\n  if(student_profit >= optimal_profit,\n    correct(\"Your solution is optimal.\")\n  ,\n    incorrect(\"There is another solution which gives a higher objective value.\")\n  )\n\n\nmark:\n  apply(all_valid);\n  apply(conditions_unsatisfied);\n  apply(profit_optimal)", "extendBaseMarkingAlgorithm": true, "useCustomName": false, "customName": "", "unitTests": [], "showFeedbackIcon": true, "scripts": {}, "gaps": [{"correctAnswerFraction": true, "customName": "", "allowFractions": true, "customMarkingAlgorithm": "", "mustBeReduced": false, "extendBaseMarkingAlgorithm": true, "minValue": "sol[0]", "useCustomName": false, "maxValue": "sol[0]", "unitTests": [], "showFractionHint": true, "correctAnswerStyle": "plain", "showFeedbackIcon": false, "scripts": {}, "notationStyles": ["plain", "en", "si-en"], "type": "numberentry", "variableReplacementStrategy": "originalfirst", "showCorrectAnswer": true, "variableReplacements": [], "marks": 1, "mustBeReducedPC": 0}, {"correctAnswerFraction": true, "customName": "", "allowFractions": true, "customMarkingAlgorithm": "", "mustBeReduced": false, "extendBaseMarkingAlgorithm": true, "minValue": "sol[1]", "useCustomName": false, "maxValue": "sol[1]", "unitTests": [], "showFractionHint": true, "correctAnswerStyle": "plain", "showFeedbackIcon": false, "scripts": {}, "notationStyles": ["plain", "en", "si-en"], "type": "numberentry", "variableReplacementStrategy": "originalfirst", "showCorrectAnswer": true, "variableReplacements": [], "marks": 1, "mustBeReducedPC": 0}], "type": "gapfill", "variableReplacementStrategy": "originalfirst", "showCorrectAnswer": true, "variableReplacements": [], "marks": 0, "sortAnswers": false}, {"mustBeReduced": false, "maxValue": "optimal_profit", "useCustomName": false, "prompt": "<p>What is the value of the objective function for&nbsp;this solution?</p>", "showFractionHint": true, "correctAnswerStyle": "plain", "variableReplacementStrategy": "originalfirst", "showFeedbackIcon": true, "type": "numberentry", "notationStyles": ["plain", "en", "si-en"], "correctAnswerFraction": true, "variableReplacements": [], "allowFractions": true, "customMarkingAlgorithm": "", "extendBaseMarkingAlgorithm": true, "minValue": "optimal_profit", "customName": "", "unitTests": [], "scripts": {}, "showCorrectAnswer": true, "marks": 1, "mustBeReducedPC": 0}], "variablesTest": {"condition": "solution_feasible", "maxRuns": "100"}, "statement": "<p>You are asked to maximise the objective function $z(x_1,x_2) = \\simplify[all,!noLeadingMinus]{{objective[0]}*x1 + {objective[1]}*x2}$ subject to</p>\n<p>\\[ \\var{latex(lines_as_inequalities(lines))} \\]</p>", "tags": ["simplex"], "rulesets": {}, "preamble": {"css": "/* hide the feedback icons on the part a gaps */\n.parts > .part:nth-child(1) .part .feedback-icon {\n  display: none;\n}", "js": ""}, "type": "question", "metadata": {"licence": "Creative Commons Attribution 4.0 International", "description": "<p>Abstract simplex method question.&nbsp;Given optimal tableau, student must identify optimal solution and objective value.</p>"}, "advice": "<h4>a)</h4>\n<p>$x_1$ is basic in row {basic_rows[0]+1}, so its value in the optimal solution is $\\var{optimal_tableau[basic_rows[0]][len(lines)+2]}$.</p>\n<p>$x_2$ is basic in row {basic_rows[1]+1}, so its value in the optimal solution is $\\var{optimal_tableau[basic_rows[1]][len(lines)+2]}$.</p>\n<h4>b)</h4>\n<p>The objective function is $z(x_1,x_2) = \\simplify[all,!noLeadingMinus]{{objective[0]}*x1 + {objective[1]}*x2}$. Substituting in the values for $x_1$ and $x_2$ above, we have</p>\n<p>\\[ z(\\var{sol[0]},\\var{sol[1]}) =&nbsp;\\simplify[all,!collectNumbers,!noLeadingMinus]{{objective[0]}*{sol[0]} + {objective[1]}*{sol[1]}} = \\var{optimal_profit} \\]</p>"}], "name": "", "pickQuestions": 0}], "metadata": {"notes": "<p>For this course, the students weren't required to carry out the simplex method, only to work with its results. The optimisation extension can do the simplex method though, so you could build a more complicated question,&nbsp;based on these.</p>", "licence": "Creative Commons Attribution 4.0 International", "description": "<p>Use the simplex method to solve a linear program.</p>"}, "type": "exam", "navigation": {"onleave": {"action": "none", "message": ""}, "reverse": true, "browse": true, "showresultspage": "oncompletion", "preventleave": true, "allowregen": true, "showfrontpage": true}, "timing": {"timedwarning": {"action": "none", "message": ""}, "timeout": {"action": "none", "message": ""}, "allowPause": true}, "pickQuestions": 0, "contributors": [{"name": "Newcastle University Mathematics and Statistics", "profile_url": "https://numbas.mathcentre.ac.uk/accounts/profile/697/"}], "extensions": ["optimisation"], "custom_part_types": [], "resources": []}
