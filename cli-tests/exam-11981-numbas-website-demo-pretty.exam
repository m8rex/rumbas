// Numbas version: exam_results_page_options
{
  "name": "Numbas website demo",
  "metadata": {
    "description": "<p>Some questions to show off features of Numbas, linked from the Numbas homepage.</p>",
    "licence": "Creative Commons Attribution 4.0 International"
  },
  "duration": 0,
  "percentPass": "0",
  "showQuestionGroupNames": true,
  "showstudentname": true,
  "question_groups": [
    {
      "name": "Question part types",
      "pickingStrategy": "all-ordered",
      "pickQuestions": "1",
      "questionNames": [
        "All part types",
        "Mathematical expression",
        "Number entry",
        "Matrix entry",
        "Match text pattern",
        "Choose one from a list",
        "Choose several from a list",
        "Match choices with answers",
        "Gap-fill",
        "Custom marking algorithms",
        "Custom part types"
      ],
      "questions": [
        {
          "name": "Numbas demo: part types",
          "extensions": [],
          "custom_part_types": [
            {
              "source": {
                "pk": 1,
                "author": { "name": "Christian Lawson-Perfect", "pk": 7 },
                "edit_page": "/part_type/1/edit"
              },
              "name": "Yes/no",
              "short_name": "yes-no",
              "description": "<p>The student is shown two radio choices: \"Yes\" and \"No\". One of them is correct.</p>",
              "help_url": "",
              "input_widget": "radios",
              "input_options": {
                "correctAnswer": "if(eval(settings[\"correct_answer_expr\"]), 0, 1)",
                "hint": { "static": true, "value": "" },
                "choices": { "static": true, "value": ["Yes", "No"] }
              },
              "can_be_gap": true,
              "can_be_step": true,
              "marking_script": "mark:\nif(studentanswer=correct_answer,\n  correct(),\n  incorrect()\n)\n\ninterpreted_answer:\nstudentAnswer=0\n\ncorrect_answer:\nif(eval(settings[\"correct_answer_expr\"]),0,1)",
              "marking_notes": [
                {
                  "name": "mark",
                  "description": "This is the main marking note. It should award credit and provide feedback based on the student's answer.",
                  "definition": "if(studentanswer=correct_answer,\n  correct(),\n  incorrect()\n)"
                },
                {
                  "name": "interpreted_answer",
                  "description": "A value representing the student's answer to this part.",
                  "definition": "studentAnswer=0"
                },
                {
                  "name": "correct_answer",
                  "description": "",
                  "definition": "if(eval(settings[\"correct_answer_expr\"]),0,1)"
                }
              ],
              "settings": [
                {
                  "name": "correct_answer_expr",
                  "label": "Is the answer \"Yes\"?",
                  "help_url": "",
                  "hint": "An expression which evaluates to <code>true</code> or <code>false</code>.",
                  "input_type": "mathematical_expression",
                  "default_value": "true",
                  "subvars": false
                }
              ],
              "public_availability": "always",
              "published": true,
              "extensions": []
            }
          ],
          "resources": [],
          "navigation": {
            "allowregen": true,
            "showfrontpage": false,
            "preventleave": false
          },
          "contributors": [
            {
              "name": "Christian Lawson-Perfect",
              "profile_url": "https://numbas.mathcentre.ac.uk/accounts/profile/7/"
            }
          ],
          "tags": [],
          "metadata": {
            "description": "<p>Showing off the part types.</p>",
            "licence": "Creative Commons Attribution 4.0 International"
          },
          "statement": "<p>Each part of a Numbas question asks the student to enter an answer, and is marked automatically. There are several part types, each with their own input methods and settings.</p>\n<p><em><a href=\"https://numbas.mathcentre.ac.uk/question/8283/numbas-demo-part-types/\" target=\"_blank\" rel=\"noopener noreferrer\">See this question on the public editor.</a></em></p>",
          "advice": "",
          "rulesets": {},
          "builtin_constants": { "e": true, "pi,\u03c0": true, "i": true },
          "constants": [],
          "variables": {
            "b": {
              "name": "b",
              "group": "Ungrouped variables",
              "definition": "random(1 .. 10#1)",
              "description": "",
              "templateType": "randrange",
              "can_override": false
            },
            "a": {
              "name": "a",
              "group": "Ungrouped variables",
              "definition": "random(1 .. 10#1)",
              "description": "",
              "templateType": "randrange",
              "can_override": false
            },
            "d": {
              "name": "d",
              "group": "Ungrouped variables",
              "definition": "random(-10 .. 10#1)",
              "description": "",
              "templateType": "randrange",
              "can_override": false
            },
            "c": {
              "name": "c",
              "group": "Ungrouped variables",
              "definition": "random(-10..10 except 0)",
              "description": "",
              "templateType": "anything",
              "can_override": false
            },
            "f": {
              "name": "f",
              "group": "Ungrouped variables",
              "definition": "random(-10 .. 10#1)",
              "description": "",
              "templateType": "randrange",
              "can_override": false
            }
          },
          "variablesTest": { "condition": "a=4 and b=8", "maxRuns": "1000" },
          "ungrouped_variables": ["a", "b", "c", "d", "f"],
          "variable_groups": [],
          "functions": {},
          "preamble": { "js": "", "css": "" },
          "parts": [
            {
              "type": "numberentry",
              "useCustomName": true,
              "customName": "Number entry",
              "marks": 1,
              "scripts": {},
              "customMarkingAlgorithm": "",
              "extendBaseMarkingAlgorithm": true,
              "unitTests": [],
              "showCorrectAnswer": true,
              "showFeedbackIcon": true,
              "variableReplacements": [],
              "variableReplacementStrategy": "originalfirst",
              "nextParts": [],
              "suggestGoingBack": false,
              "adaptiveMarkingPenalty": 0,
              "exploreObjective": null,
              "prompt": "<p><em>The number entry part asks the student to write a single number. It's marked correct if it's in the accepted range.</em></p>\n<p>I eat 5 apples per day. How many apples do I eat in a week?</p>",
              "minValue": "35",
              "maxValue": "35",
              "correctAnswerFraction": false,
              "allowFractions": false,
              "mustBeReduced": false,
              "mustBeReducedPC": 0,
              "showFractionHint": true,
              "notationStyles": ["plain", "en", "si-en"],
              "correctAnswerStyle": "plain"
            },
            {
              "type": "jme",
              "useCustomName": true,
              "customName": "Mathematical expression",
              "marks": 1,
              "scripts": {},
              "customMarkingAlgorithm": "",
              "extendBaseMarkingAlgorithm": true,
              "unitTests": [],
              "showCorrectAnswer": true,
              "showFeedbackIcon": true,
              "variableReplacements": [],
              "variableReplacementStrategy": "originalfirst",
              "nextParts": [],
              "suggestGoingBack": false,
              "adaptiveMarkingPenalty": 0,
              "exploreObjective": null,
              "prompt": "<p><em>The mathematical expression part type asks the student to write a mathematical expression as their answer. It's marked correct if it's equivalent to the expected answer.</em></p>\n<p>Differentiate the following function:</p>\n<p>\\[ f(x) = \\simplify[all,!noLeadingMinus]{{c}x^2+{d}x+{f}} \\]</p>",
              "answer": "{2*c}x+{d}",
              "showPreview": true,
              "checkingType": "absdiff",
              "checkingAccuracy": 0.001,
              "failureRate": 1,
              "vsetRangePoints": 5,
              "vsetRange": [0, 1],
              "checkVariableNames": false,
              "singleLetterVariables": false,
              "allowUnknownFunctions": true,
              "implicitFunctionComposition": false,
              "caseSensitive": false,
              "valuegenerators": [{ "name": "x", "value": "" }]
            },
            {
              "type": "matrix",
              "useCustomName": true,
              "customName": "Matrix entry",
              "marks": 1,
              "scripts": {},
              "customMarkingAlgorithm": "",
              "extendBaseMarkingAlgorithm": true,
              "unitTests": [],
              "showCorrectAnswer": true,
              "showFeedbackIcon": true,
              "variableReplacements": [],
              "variableReplacementStrategy": "originalfirst",
              "nextParts": [],
              "suggestGoingBack": false,
              "adaptiveMarkingPenalty": 0,
              "exploreObjective": null,
              "prompt": "<p><em>The matrix entry part type asks the student to enter the elements of a matrix. It's marked correct if the student's matrix is equal to the expected matrix.</em></p>\n<p>Enter a $3 \\times 3$ identity matrix.</p>",
              "correctAnswer": "id(3)",
              "correctAnswerFractions": false,
              "numRows": "3",
              "numColumns": "3",
              "allowResize": true,
              "tolerance": 0,
              "markPerCell": false,
              "allowFractions": false,
              "minColumns": 1,
              "maxColumns": 0,
              "minRows": 1,
              "maxRows": 0
            },
            {
              "type": "patternmatch",
              "useCustomName": true,
              "customName": "Match text pattern",
              "marks": 1,
              "scripts": {},
              "customMarkingAlgorithm": "",
              "extendBaseMarkingAlgorithm": true,
              "unitTests": [],
              "showCorrectAnswer": true,
              "showFeedbackIcon": true,
              "variableReplacements": [],
              "variableReplacementStrategy": "originalfirst",
              "nextParts": [],
              "suggestGoingBack": false,
              "adaptiveMarkingPenalty": 0,
              "exploreObjective": null,
              "prompt": "<p><em>The match text pattern part type asks the student to enter a short string of text. It's marked correct if it matches the pattern specified by the author.</em></p>\n<p>Write \"Numbas\".</p>",
              "answer": "Numbas",
              "displayAnswer": "Numbas",
              "caseSensitive": true,
              "partialCredit": "50",
              "matchMode": "exact"
            },
            {
              "type": "1_n_2",
              "useCustomName": true,
              "customName": "Choose one from a list",
              "marks": 0,
              "scripts": {},
              "customMarkingAlgorithm": "",
              "extendBaseMarkingAlgorithm": true,
              "unitTests": [],
              "showCorrectAnswer": true,
              "showFeedbackIcon": true,
              "variableReplacements": [],
              "variableReplacementStrategy": "originalfirst",
              "nextParts": [],
              "suggestGoingBack": false,
              "adaptiveMarkingPenalty": 0,
              "exploreObjective": null,
              "prompt": "<p><em>The choose one from a list part asks the student to choose one item from a list of options. Each option can award a different number of marks.</em></p>\n<p>Which fruit is biggest?</p>",
              "minMarks": 0,
              "maxMarks": 0,
              "shuffleChoices": true,
              "displayType": "radiogroup",
              "displayColumns": 0,
              "showCellAnswerState": true,
              "choices": ["Apple", "Strawberry", "Watermelon"],
              "matrix": [0, 0, "1"],
              "distractors": ["", "", ""]
            },
            {
              "type": "m_n_2",
              "useCustomName": true,
              "customName": "Choose several from a list",
              "marks": 0,
              "scripts": {},
              "customMarkingAlgorithm": "",
              "extendBaseMarkingAlgorithm": true,
              "unitTests": [],
              "showCorrectAnswer": true,
              "showFeedbackIcon": true,
              "variableReplacements": [],
              "variableReplacementStrategy": "originalfirst",
              "nextParts": [],
              "suggestGoingBack": false,
              "adaptiveMarkingPenalty": 0,
              "exploreObjective": null,
              "prompt": "<p><em>The choose several from a list part type asks the student to select one or more items from a list. Each option can award or subtract a different number of marks.</em></p>\n<p>Tick every prime number in the list below.</p>",
              "minMarks": 0,
              "maxMarks": 0,
              "shuffleChoices": true,
              "displayType": "checkbox",
              "displayColumns": "1",
              "minAnswers": 0,
              "maxAnswers": 0,
              "warningType": "none",
              "showCellAnswerState": true,
              "choices": ["13", "7", "2", "6", "9", "51"],
              "matrix": ["1", "1", "1", "-1", "-1", "-1"],
              "distractors": [
                "",
                "",
                "",
                "$6 = 2 \\times 3$.",
                "$9 = 3 \\times 3$.",
                "$51 = 3 \\times 17$."
              ]
            },
            {
              "type": "m_n_x",
              "useCustomName": true,
              "customName": "Match choices with answers",
              "marks": 0,
              "scripts": {},
              "customMarkingAlgorithm": "",
              "extendBaseMarkingAlgorithm": true,
              "unitTests": [],
              "showCorrectAnswer": true,
              "showFeedbackIcon": true,
              "variableReplacements": [],
              "variableReplacementStrategy": "originalfirst",
              "nextParts": [],
              "suggestGoingBack": false,
              "adaptiveMarkingPenalty": 0,
              "exploreObjective": null,
              "prompt": "<p><em>The match choices with answers part asks the student to match each of a list of 'choices' with a corresponding 'answer'. Each possible pair can award a different number of marks.</em></p>\n<p>Match countries with their capital cities.</p>",
              "minMarks": 0,
              "maxMarks": 0,
              "minAnswers": 0,
              "maxAnswers": 0,
              "shuffleChoices": true,
              "shuffleAnswers": true,
              "displayType": "radiogroup",
              "warningType": "none",
              "showCellAnswerState": true,
              "choices": ["France", "Argentina", "China"],
              "matrix": [
                ["1", 0, 0, 0, 0],
                [0, "1", 0, 0, 0],
                [0, 0, "1", 0, 0]
              ],
              "layout": { "type": "all", "expression": "" },
              "answers": [
                "Paris",
                "Buenos Aires",
                "Beijing",
                "Brussels",
                "Melbourne"
              ]
            },
            {
              "type": "yes-no",
              "useCustomName": true,
              "customName": "Custom part type - Yes/no",
              "marks": 1,
              "scripts": {},
              "customMarkingAlgorithm": "",
              "extendBaseMarkingAlgorithm": true,
              "unitTests": [],
              "showCorrectAnswer": true,
              "showFeedbackIcon": true,
              "variableReplacements": [],
              "variableReplacementStrategy": "originalfirst",
              "nextParts": [],
              "suggestGoingBack": false,
              "adaptiveMarkingPenalty": 0,
              "exploreObjective": null,
              "prompt": "<p><em>It's possible to create custom part types, or use one somebody else has published. A custom part type consists of settings for question authors, an input widget, and a marking algorithm. This part uses the \"Yes/No\" custom part type, which provides a simple means of asking if the student agrees with a statement.</em></p>\n<p>Was the abacus invented before the mobile phone?</p>",
              "settings": { "correct_answer_expr": "true" }
            },
            {
              "type": "gapfill",
              "useCustomName": true,
              "customName": "Gap-fill",
              "marks": 0,
              "scripts": {},
              "customMarkingAlgorithm": "",
              "extendBaseMarkingAlgorithm": true,
              "unitTests": [],
              "showCorrectAnswer": true,
              "showFeedbackIcon": true,
              "variableReplacements": [],
              "variableReplacementStrategy": "originalfirst",
              "nextParts": [],
              "suggestGoingBack": false,
              "adaptiveMarkingPenalty": 0,
              "exploreObjective": null,
              "prompt": "<p><em>The gap-fill part type allows you to include multiple input areas in one block of text. They're marked independently of each other, but submitted simultaneously, and all the feedback is shown together.</em></p>\n<p>My dog is 3 years older than my cat, who is half the dog's age. What are their ages?</p>\n<p>My dog's age: [[0]]</p>\n<p>My cat's age: [[1]]</p>",
              "gaps": [
                {
                  "type": "numberentry",
                  "useCustomName": true,
                  "customName": "Dog's age",
                  "marks": 1,
                  "scripts": {},
                  "customMarkingAlgorithm": "",
                  "extendBaseMarkingAlgorithm": true,
                  "unitTests": [],
                  "showCorrectAnswer": true,
                  "showFeedbackIcon": true,
                  "variableReplacements": [],
                  "variableReplacementStrategy": "originalfirst",
                  "nextParts": [],
                  "suggestGoingBack": false,
                  "adaptiveMarkingPenalty": 0,
                  "exploreObjective": null,
                  "minValue": "6",
                  "maxValue": "6",
                  "correctAnswerFraction": false,
                  "allowFractions": false,
                  "mustBeReduced": false,
                  "mustBeReducedPC": 0,
                  "showFractionHint": true,
                  "notationStyles": ["plain", "en", "si-en"],
                  "correctAnswerStyle": "plain"
                },
                {
                  "type": "numberentry",
                  "useCustomName": true,
                  "customName": "Cat's age",
                  "marks": 1,
                  "scripts": {},
                  "customMarkingAlgorithm": "",
                  "extendBaseMarkingAlgorithm": true,
                  "unitTests": [],
                  "showCorrectAnswer": true,
                  "showFeedbackIcon": true,
                  "variableReplacements": [],
                  "variableReplacementStrategy": "originalfirst",
                  "nextParts": [],
                  "suggestGoingBack": false,
                  "adaptiveMarkingPenalty": 0,
                  "exploreObjective": null,
                  "minValue": "3",
                  "maxValue": "3",
                  "correctAnswerFraction": false,
                  "allowFractions": false,
                  "mustBeReduced": false,
                  "mustBeReducedPC": 0,
                  "showFractionHint": true,
                  "notationStyles": ["plain", "en", "si-en"],
                  "correctAnswerStyle": "plain"
                }
              ],
              "sortAnswers": false
            }
          ],
          "partsMode": "all",
          "maxMarks": 0,
          "objectives": [],
          "penalties": [],
          "objectiveVisibility": "always",
          "penaltyVisibility": "always"
        },
        {
          "name": "Numbas demo: mathematical expression part type",
          "extensions": [],
          "custom_part_types": [],
          "resources": [],
          "navigation": {
            "allowregen": true,
            "showfrontpage": false,
            "preventleave": false
          },
          "contributors": [
            {
              "name": "Christian Lawson-Perfect",
              "profile_url": "https://numbas.mathcentre.ac.uk/accounts/profile/7/"
            }
          ],
          "tags": [],
          "metadata": {
            "description": "<p>A demo of the mathematical expression part and its options.</p>",
            "licence": "Creative Commons Attribution 4.0 International"
          },
          "statement": "<p>The <em>mathematical expression</em> part type asks the student to enter a mathematical expression. A rendering of the student's answer is shown next to the input box so they can be sure it's been interpreted correctly.</p>\n<p>Numbas picks random values for the variables in the expression, and evaluates both the student's answer and the expected answer at those points. If both expressions agree, then the student's answer is considered correct.</p>\n<p>This allows the student to rearrange the terms in their expression however they like. If you want the student to write their answer in a particular form, you can use a pattern restriction.</p>\n<p><em><a href=\"https://numbas.mathcentre.ac.uk/question/66159/numbas-demo-mathematical-expression-part-type/\" target=\"_blank\" rel=\"noopener noreferrer\">See this question on the public editor</a>.</em></p>",
          "advice": "",
          "rulesets": {},
          "variables": {
            "a": {
              "name": "a",
              "group": "Ungrouped variables",
              "definition": "random(-5..5 except 0)",
              "description": "",
              "templateType": "anything"
            },
            "b": {
              "name": "b",
              "group": "Ungrouped variables",
              "definition": "random(-5..5)",
              "description": "",
              "templateType": "anything"
            },
            "c": {
              "name": "c",
              "group": "Ungrouped variables",
              "definition": "random(-5..5)",
              "description": "",
              "templateType": "anything"
            }
          },
          "variablesTest": { "condition": "", "maxRuns": 100 },
          "ungrouped_variables": ["a", "b", "c"],
          "variable_groups": [],
          "functions": {},
          "preamble": { "js": "", "css": "" },
          "parts": [
            {
              "type": "jme",
              "useCustomName": true,
              "customName": "A simple expression",
              "marks": 1,
              "scripts": {},
              "customMarkingAlgorithm": "",
              "extendBaseMarkingAlgorithm": true,
              "unitTests": [],
              "showCorrectAnswer": true,
              "showFeedbackIcon": true,
              "variableReplacements": [],
              "variableReplacementStrategy": "originalfirst",
              "nextParts": [],
              "suggestGoingBack": false,
              "adaptiveMarkingPenalty": 0,
              "exploreObjective": null,
              "prompt": "<p>Write $2x+y^2$.</p>\n<p>Use <code>*</code> for multiplication and <code>^</code> for exponentiation.</p>",
              "answer": "2x+y^2",
              "showPreview": true,
              "checkingType": "absdiff",
              "checkingAccuracy": 0.001,
              "failureRate": 1,
              "vsetRangePoints": 5,
              "vsetRange": [0, 1],
              "checkVariableNames": false,
              "singleLetterVariables": false,
              "allowUnknownFunctions": true,
              "implicitFunctionComposition": false,
              "caseSensitive": false,
              "valuegenerators": [
                { "name": "x", "value": "" },
                { "name": "y", "value": "" }
              ]
            },
            {
              "type": "jme",
              "useCustomName": true,
              "customName": "Using question variables",
              "marks": 1,
              "scripts": {},
              "customMarkingAlgorithm": "",
              "extendBaseMarkingAlgorithm": true,
              "unitTests": [],
              "showCorrectAnswer": true,
              "showFeedbackIcon": true,
              "variableReplacements": [],
              "variableReplacementStrategy": "originalfirst",
              "nextParts": [],
              "suggestGoingBack": false,
              "adaptiveMarkingPenalty": 0,
              "exploreObjective": null,
              "prompt": "<p><em>You can substitute question variables into the expression.</em></p>\n<p>Write $\\simplify{ {a}x^2+{b}x+{c} }$.</p>",
              "answer": "{a}x^2+{b}x+{c}",
              "showPreview": true,
              "checkingType": "absdiff",
              "checkingAccuracy": 0.001,
              "failureRate": 1,
              "vsetRangePoints": 5,
              "vsetRange": [0, 1],
              "checkVariableNames": false,
              "singleLetterVariables": false,
              "allowUnknownFunctions": true,
              "implicitFunctionComposition": false,
              "caseSensitive": false,
              "valuegenerators": [{ "name": "x", "value": "" }]
            },
            {
              "type": "jme",
              "useCustomName": true,
              "customName": "Implicit multiplication",
              "marks": 1,
              "scripts": {},
              "customMarkingAlgorithm": "",
              "extendBaseMarkingAlgorithm": true,
              "unitTests": [],
              "showCorrectAnswer": true,
              "showFeedbackIcon": true,
              "variableReplacements": [],
              "variableReplacementStrategy": "originalfirst",
              "nextParts": [],
              "suggestGoingBack": false,
              "adaptiveMarkingPenalty": 0,
              "exploreObjective": null,
              "prompt": "<p><em>Students often omit the multiplication symbol, as they would in handwritten work. Numbas allows for this as much as it can while ensuring its interpretation of the student's answer is unambiguous. You can tell Numbas to interpret strings of letters as a single variable, or as implicit multiplication of single-letter variable names.<br/></em></p>\n<p>Write $x y + x \\sin(y)$.</p>\n<p><em>Try <code>x*y + x*sin(y)</code> and <code>xy + xsin(y)</code>.</em></p>",
              "answer": "x*y+x*sin(y)",
              "showPreview": true,
              "checkingType": "absdiff",
              "checkingAccuracy": 0.001,
              "failureRate": 1,
              "vsetRangePoints": 5,
              "vsetRange": [0, 1],
              "checkVariableNames": true,
              "singleLetterVariables": true,
              "allowUnknownFunctions": false,
              "implicitFunctionComposition": false,
              "caseSensitive": false,
              "valuegenerators": [
                { "name": "x", "value": "" },
                { "name": "y", "value": "" }
              ]
            },
            {
              "type": "jme",
              "useCustomName": true,
              "customName": "Match a pattern",
              "marks": "2",
              "scripts": {},
              "customMarkingAlgorithm": "",
              "extendBaseMarkingAlgorithm": true,
              "unitTests": [],
              "showCorrectAnswer": true,
              "showFeedbackIcon": true,
              "variableReplacements": [],
              "variableReplacementStrategy": "originalfirst",
              "nextParts": [],
              "suggestGoingBack": false,
              "adaptiveMarkingPenalty": 0,
              "exploreObjective": null,
              "prompt": "<p><em>When it's important that the student's answer is in a certain form, you can require that the student's answer matches a pattern. If the answer doesn't match the pattern, you can give the student a tailored feedback message and optionally award partial credit.</em></p>\n<p>Write $\\frac{a \\times a^8}{a^5}$ in the form $a^n$.</p>\n<p><em>Try <code>a^4</code> and <code>a*a^8/a^5</code>.</em></p>",
              "answer": "a^4",
              "showPreview": true,
              "checkingType": "absdiff",
              "checkingAccuracy": 0.001,
              "failureRate": 1,
              "vsetRangePoints": 5,
              "vsetRange": [0, 1],
              "checkVariableNames": false,
              "singleLetterVariables": false,
              "allowUnknownFunctions": true,
              "implicitFunctionComposition": false,
              "caseSensitive": false,
              "mustmatchpattern": {
                "pattern": "$v^$n",
                "partialCredit": "50",
                "message": "You didn't write your answer as a single power of $a$.",
                "nameToCompare": ""
              },
              "valuegenerators": [{ "name": "a", "value": "" }]
            },
            {
              "type": "jme",
              "useCustomName": true,
              "customName": "Only compare part of an expression",
              "marks": 1,
              "scripts": {},
              "customMarkingAlgorithm": "",
              "extendBaseMarkingAlgorithm": true,
              "unitTests": [],
              "showCorrectAnswer": true,
              "showFeedbackIcon": true,
              "variableReplacements": [],
              "variableReplacementStrategy": "originalfirst",
              "nextParts": [],
              "suggestGoingBack": false,
              "adaptiveMarkingPenalty": 0,
              "exploreObjective": null,
              "prompt": "<p><em>If the expression involves undefined functions, the normal marking method won't work. You can apply a pattern restriction to establish equivalence for the parts that can't be evaluated, and only numerically compare the part of the answer that can be evaluated.</em></p>\n<p>Write<em> $f(x^2)$.</em></p>",
              "answer": "f(x^2)",
              "showPreview": true,
              "checkingType": "absdiff",
              "checkingAccuracy": 0.001,
              "failureRate": 1,
              "vsetRangePoints": 5,
              "vsetRange": [0, 1],
              "checkVariableNames": false,
              "singleLetterVariables": false,
              "allowUnknownFunctions": true,
              "implicitFunctionComposition": false,
              "caseSensitive": false,
              "mustmatchpattern": {
                "pattern": "f(?;argument)",
                "partialCredit": 0,
                "message": "",
                "nameToCompare": "argument"
              },
              "valuegenerators": [{ "name": "x", "value": "" }]
            },
            {
              "type": "jme",
              "useCustomName": true,
              "customName": "Write a formula",
              "marks": 1,
              "scripts": {},
              "customMarkingAlgorithm": "",
              "extendBaseMarkingAlgorithm": true,
              "unitTests": [],
              "showCorrectAnswer": true,
              "showFeedbackIcon": true,
              "variableReplacements": [],
              "variableReplacementStrategy": "originalfirst",
              "nextParts": [],
              "suggestGoingBack": false,
              "adaptiveMarkingPenalty": 0,
              "exploreObjective": null,
              "prompt": "<p><em></em>Write $y=5x-2$.</p>\n<p>Try <code>y = 5x - 2</code> and <code>5x - y = 2</code>.</p>",
              "answer": "y=5x-2",
              "showPreview": true,
              "checkingType": "absdiff",
              "checkingAccuracy": 0.001,
              "failureRate": 1,
              "vsetRangePoints": 5,
              "vsetRange": [0, 1],
              "checkVariableNames": false,
              "singleLetterVariables": false,
              "allowUnknownFunctions": true,
              "implicitFunctionComposition": false,
              "caseSensitive": false,
              "valuegenerators": [
                { "name": "x", "value": "" },
                { "name": "y", "value": "" }
              ]
            },
            {
              "type": "jme",
              "useCustomName": true,
              "customName": "Case-sensitivity",
              "marks": 1,
              "scripts": {},
              "customMarkingAlgorithm": "",
              "extendBaseMarkingAlgorithm": true,
              "unitTests": [],
              "showCorrectAnswer": true,
              "showFeedbackIcon": true,
              "variableReplacements": [],
              "variableReplacementStrategy": "originalfirst",
              "nextParts": [],
              "suggestGoingBack": false,
              "adaptiveMarkingPenalty": 0,
              "exploreObjective": null,
              "prompt": "<p><em>The default behaviour of the mathematical expression part is to be case-insensitive when marking the student's answer. You can change this, so that variable and function names using the same letters but not the same case are considered different.<br/></em></p>\n<p>The correct answer to this part is $Ax$.</p>\n<p><em>Try <code>a*x</code>, <code>A*x</code> and <code>x*A</code>.</em></p>",
              "answer": "A*x",
              "showPreview": true,
              "checkingType": "absdiff",
              "checkingAccuracy": 0.001,
              "failureRate": 1,
              "vsetRangePoints": 5,
              "vsetRange": [0, 1],
              "checkVariableNames": true,
              "singleLetterVariables": true,
              "allowUnknownFunctions": true,
              "implicitFunctionComposition": false,
              "caseSensitive": true,
              "valuegenerators": [
                { "name": "A", "value": "" },
                { "name": "x", "value": "" }
              ]
            }
          ],
          "partsMode": "all",
          "maxMarks": 0,
          "objectives": [],
          "penalties": [],
          "objectiveVisibility": "always",
          "penaltyVisibility": "always"
        },
        {
          "name": "Numbas demo: number entry part type",
          "extensions": [],
          "custom_part_types": [],
          "resources": [],
          "navigation": {
            "allowregen": true,
            "showfrontpage": false,
            "preventleave": false
          },
          "contributors": [
            {
              "name": "Christian Lawson-Perfect",
              "profile_url": "https://numbas.mathcentre.ac.uk/accounts/profile/7/"
            }
          ],
          "tags": [],
          "metadata": {
            "description": "<p>A demo of the number entry part and its options.</p>",
            "licence": "Creative Commons Attribution 4.0 International"
          },
          "statement": "<p>The <em>number entry</em> part asks the student to write a single number. It's marked correct if it's in the accepted range.</p>\n<p><em><a href=\"https://numbas.mathcentre.ac.uk/question/66165/numbas-demo-number-entry-part-type/\" target=\"_blank\" rel=\"noopener noreferrer\">See this question on the public editor</a>.</em></p>",
          "advice": "",
          "rulesets": {},
          "variables": {},
          "variablesTest": { "condition": "", "maxRuns": 100 },
          "ungrouped_variables": [],
          "variable_groups": [],
          "functions": {},
          "preamble": { "js": "", "css": "" },
          "parts": [
            {
              "type": "numberentry",
              "useCustomName": true,
              "customName": "Write a whole number",
              "marks": 1,
              "scripts": {},
              "customMarkingAlgorithm": "",
              "extendBaseMarkingAlgorithm": true,
              "unitTests": [],
              "showCorrectAnswer": true,
              "showFeedbackIcon": true,
              "variableReplacements": [],
              "variableReplacementStrategy": "originalfirst",
              "nextParts": [],
              "suggestGoingBack": false,
              "adaptiveMarkingPenalty": 0,
              "exploreObjective": null,
              "prompt": "<p>Write the number 169.</p>",
              "minValue": "169",
              "maxValue": "169",
              "correctAnswerFraction": false,
              "allowFractions": false,
              "mustBeReduced": false,
              "mustBeReducedPC": 0,
              "showFractionHint": true,
              "notationStyles": ["plain", "en", "si-en"],
              "correctAnswerStyle": "plain"
            },
            {
              "type": "numberentry",
              "useCustomName": true,
              "customName": "Require precision",
              "marks": 1,
              "scripts": {},
              "customMarkingAlgorithm": "",
              "extendBaseMarkingAlgorithm": true,
              "unitTests": [],
              "showCorrectAnswer": true,
              "showFeedbackIcon": true,
              "variableReplacements": [],
              "variableReplacementStrategy": "originalfirst",
              "nextParts": [],
              "suggestGoingBack": false,
              "adaptiveMarkingPenalty": 0,
              "exploreObjective": null,
              "prompt": "<p><em>You can require the student to write their answer to a certain number of decimal places or significant figures, and optionally award partial credit if they don't.</em></p>\n<p>Write 1.23456 to two decimal places.</p>",
              "minValue": "1.23456",
              "maxValue": "1.23456",
              "correctAnswerFraction": false,
              "allowFractions": false,
              "mustBeReduced": false,
              "mustBeReducedPC": 0,
              "precisionType": "dp",
              "precision": "2",
              "precisionPartialCredit": "50",
              "precisionMessage": "You have not given your answer to the correct precision.",
              "strictPrecision": true,
              "showPrecisionHint": true,
              "notationStyles": ["plain", "en", "si-en"],
              "correctAnswerStyle": "plain"
            },
            {
              "type": "numberentry",
              "useCustomName": true,
              "customName": "Different notation styles",
              "marks": 1,
              "scripts": {},
              "customMarkingAlgorithm": "",
              "extendBaseMarkingAlgorithm": true,
              "unitTests": [],
              "showCorrectAnswer": true,
              "showFeedbackIcon": true,
              "variableReplacements": [],
              "variableReplacementStrategy": "originalfirst",
              "nextParts": [],
              "suggestGoingBack": false,
              "adaptiveMarkingPenalty": 0,
              "exploreObjective": null,
              "prompt": "<p><em>Numbas supports a few of the number notation styles used around the world.</em></p>\n<p><em>This part uses the continental European style, with . to separate powers of 1000 and , as the decimal separator.<br/></em></p>\n<p>Write 1234.567 in the continental European style.</p>",
              "minValue": "1234.567",
              "maxValue": "1234.567",
              "correctAnswerFraction": false,
              "allowFractions": false,
              "mustBeReduced": false,
              "mustBeReducedPC": 0,
              "showFractionHint": true,
              "notationStyles": ["eu"],
              "correctAnswerStyle": "eu"
            },
            {
              "type": "numberentry",
              "useCustomName": true,
              "customName": "Accept a number in a range",
              "marks": 1,
              "scripts": {},
              "customMarkingAlgorithm": "",
              "extendBaseMarkingAlgorithm": true,
              "unitTests": [],
              "showCorrectAnswer": true,
              "showFeedbackIcon": true,
              "variableReplacements": [],
              "variableReplacementStrategy": "originalfirst",
              "nextParts": [],
              "suggestGoingBack": false,
              "adaptiveMarkingPenalty": 0,
              "exploreObjective": null,
              "prompt": "<p><em>The number entry part marks any number in the range specified by the question author as correct.</em></p>\n<p>Write a number between 100 and 1000.</p>",
              "minValue": "100",
              "maxValue": "1000",
              "correctAnswerFraction": false,
              "allowFractions": true,
              "mustBeReduced": false,
              "mustBeReducedPC": 0,
              "showFractionHint": false,
              "notationStyles": ["plain", "en", "si-en"],
              "correctAnswerStyle": "plain"
            },
            {
              "type": "numberentry",
              "useCustomName": true,
              "customName": "Scientific notation for extremely large numbers",
              "marks": 1,
              "scripts": {},
              "customMarkingAlgorithm": "",
              "extendBaseMarkingAlgorithm": true,
              "unitTests": [],
              "showCorrectAnswer": true,
              "showFeedbackIcon": true,
              "variableReplacements": [],
              "variableReplacementStrategy": "originalfirst",
              "nextParts": [],
              "suggestGoingBack": false,
              "adaptiveMarkingPenalty": 0,
              "exploreObjective": null,
              "prompt": "<p><em>You can use E notation to write very small or very large numbers.</em></p>\n<p>Write Avogadro's number, $6.022 \\times 10^{23}$, in E notation.</p>\n<p><em>Try <code>6.022e+23</code> and <code>6.022E23</code>.<br/></em></p>",
              "minValue": "dec(\"6.022e23\")",
              "maxValue": "dec(\"6.022e23\")",
              "correctAnswerFraction": false,
              "allowFractions": false,
              "mustBeReduced": false,
              "mustBeReducedPC": 0,
              "showFractionHint": true,
              "notationStyles": ["scientific"],
              "correctAnswerStyle": "scientific"
            },
            {
              "type": "numberentry",
              "useCustomName": true,
              "customName": "Fractions",
              "marks": 1,
              "scripts": {},
              "customMarkingAlgorithm": "",
              "extendBaseMarkingAlgorithm": true,
              "unitTests": [],
              "showCorrectAnswer": true,
              "showFeedbackIcon": true,
              "variableReplacements": [],
              "variableReplacementStrategy": "originalfirst",
              "nextParts": [],
              "suggestGoingBack": false,
              "adaptiveMarkingPenalty": 0,
              "exploreObjective": null,
              "prompt": "<p><em>You can accept fractions.</em></p>\n<p>Write $\\frac{22}{7}$.</p>",
              "minValue": "22/7",
              "maxValue": "22/7",
              "correctAnswerFraction": true,
              "allowFractions": true,
              "mustBeReduced": false,
              "mustBeReducedPC": 0,
              "showFractionHint": true,
              "notationStyles": ["plain", "en", "si-en"],
              "correctAnswerStyle": "plain"
            },
            {
              "type": "numberentry",
              "useCustomName": true,
              "customName": "Require a reduced fraction",
              "marks": 1,
              "scripts": {},
              "customMarkingAlgorithm": "",
              "extendBaseMarkingAlgorithm": true,
              "unitTests": [],
              "showCorrectAnswer": true,
              "showFeedbackIcon": true,
              "variableReplacements": [],
              "variableReplacementStrategy": "originalfirst",
              "nextParts": [],
              "suggestGoingBack": false,
              "adaptiveMarkingPenalty": 0,
              "exploreObjective": null,
              "prompt": "<p><em>You can require that the student's answer is a reduced fraction.<br/></em></p>\n<p>Write $\\frac{3}{12}$ as a reduced fraction.</p>\n<p><em>Try <code>1/4</code> and <code>3/12</code>.</em></p>",
              "minValue": "3/12",
              "maxValue": "3/12",
              "correctAnswerFraction": true,
              "allowFractions": true,
              "mustBeReduced": true,
              "mustBeReducedPC": 0,
              "showFractionHint": true,
              "notationStyles": ["plain", "en", "si-en"],
              "correctAnswerStyle": "plain"
            }
          ],
          "partsMode": "all",
          "maxMarks": 0,
          "objectives": [],
          "penalties": [],
          "objectiveVisibility": "always",
          "penaltyVisibility": "always"
        },
        {
          "name": "Numbas demo: matrix entry part type",
          "extensions": [],
          "custom_part_types": [],
          "resources": [],
          "navigation": {
            "allowregen": true,
            "showfrontpage": false,
            "preventleave": false
          },
          "contributors": [
            {
              "name": "Christian Lawson-Perfect",
              "profile_url": "https://numbas.mathcentre.ac.uk/accounts/profile/7/"
            }
          ],
          "tags": [],
          "metadata": {
            "description": "<p>A demo of the matrix entry part and its options.</p>",
            "licence": "Creative Commons Attribution 4.0 International"
          },
          "statement": "<p>The <em>matrix entry</em> part type asks the student to write a matrix - a two-dimensional array of numbers. The student's answer is correct if their matrix is the expected size, and each cell is equal to the corresponding cell in the expected answer. You can award partial marks for each correct cell.</p>\n<p><em><a href=\"https://numbas.mathcentre.ac.uk/question/66182/numbas-demo-matrix-entry/\" target=\"_blank\" rel=\"noopener noreferrer\">See this question on the public editor</a>.</em></p>",
          "advice": "",
          "rulesets": {},
          "variables": {
            "random_matrix": {
              "name": "random_matrix",
              "group": "Ungrouped variables",
              "definition": "matrix(\n  repeat( repeat(random(1..5#0),3), 2)\n)",
              "description": "",
              "templateType": "anything"
            },
            "fraction_matrix": {
              "name": "fraction_matrix",
              "group": "Ungrouped variables",
              "definition": "matrix([\n    [1,2],\n    [3,4]\n])/7",
              "description": "",
              "templateType": "anything"
            }
          },
          "variablesTest": { "condition": "", "maxRuns": 100 },
          "ungrouped_variables": ["random_matrix", "fraction_matrix"],
          "variable_groups": [],
          "functions": {},
          "preamble": { "js": "", "css": "" },
          "parts": [
            {
              "type": "matrix",
              "useCustomName": true,
              "customName": "Identity matrix",
              "marks": 1,
              "scripts": {},
              "customMarkingAlgorithm": "",
              "extendBaseMarkingAlgorithm": true,
              "unitTests": [],
              "showCorrectAnswer": true,
              "showFeedbackIcon": true,
              "variableReplacements": [],
              "variableReplacementStrategy": "originalfirst",
              "nextParts": [],
              "suggestGoingBack": false,
              "adaptiveMarkingPenalty": 0,
              "exploreObjective": null,
              "prompt": "<p>Write a $3 \\times 3$ identity matrix, $\\var{id(3)}$.</p>",
              "correctAnswer": "id(3)",
              "correctAnswerFractions": false,
              "numRows": 1,
              "numColumns": 1,
              "allowResize": true,
              "tolerance": 0,
              "markPerCell": false,
              "allowFractions": false,
              "minColumns": 1,
              "maxColumns": 0,
              "minRows": 1,
              "maxRows": 0
            },
            {
              "type": "matrix",
              "useCustomName": true,
              "customName": "Set the initial size",
              "marks": 1,
              "scripts": {},
              "customMarkingAlgorithm": "",
              "extendBaseMarkingAlgorithm": true,
              "unitTests": [],
              "showCorrectAnswer": true,
              "showFeedbackIcon": true,
              "variableReplacements": [],
              "variableReplacementStrategy": "originalfirst",
              "nextParts": [],
              "suggestGoingBack": false,
              "adaptiveMarkingPenalty": 0,
              "exploreObjective": null,
              "prompt": "<p><em>You can set the initial size of the matrix.</em></p>\n<p>Write $\\var{matrix([[2,3],[4,-1]])}$.</p>",
              "correctAnswer": "matrix([[2,3],[4,-1]])",
              "correctAnswerFractions": false,
              "numRows": "2",
              "numColumns": "2",
              "allowResize": true,
              "tolerance": 0,
              "markPerCell": false,
              "allowFractions": false,
              "minColumns": 1,
              "maxColumns": 0,
              "minRows": 1,
              "maxRows": 0
            },
            {
              "type": "matrix",
              "useCustomName": true,
              "customName": "Fixed size",
              "marks": 1,
              "scripts": {},
              "customMarkingAlgorithm": "",
              "extendBaseMarkingAlgorithm": true,
              "unitTests": [],
              "showCorrectAnswer": true,
              "showFeedbackIcon": true,
              "variableReplacements": [],
              "variableReplacementStrategy": "originalfirst",
              "nextParts": [],
              "suggestGoingBack": false,
              "adaptiveMarkingPenalty": 0,
              "exploreObjective": null,
              "prompt": "<p><em>You can fix the size of the matrix.</em></p>\n<p>Write the vector $\\var{vector(1,2,3)}$.</p>",
              "correctAnswer": "vector(1,2,3)",
              "correctAnswerFractions": false,
              "numRows": "3",
              "numColumns": "1",
              "allowResize": false,
              "tolerance": 0,
              "markPerCell": false,
              "allowFractions": false,
              "minColumns": 1,
              "maxColumns": 0,
              "minRows": 1,
              "maxRows": 0
            },
            {
              "type": "matrix",
              "useCustomName": true,
              "customName": "Precision restriction",
              "marks": 1,
              "scripts": {},
              "customMarkingAlgorithm": "",
              "extendBaseMarkingAlgorithm": true,
              "unitTests": [],
              "showCorrectAnswer": true,
              "showFeedbackIcon": true,
              "variableReplacements": [],
              "variableReplacementStrategy": "originalfirst",
              "nextParts": [],
              "suggestGoingBack": false,
              "adaptiveMarkingPenalty": 0,
              "exploreObjective": null,
              "prompt": "<p>Like the number entry part, you can ask for the student to give each entry in the matrix to a certain number of decimal places.</p>\n<p>Write $\\var{random_matrix}$ to two decimal places.</p>",
              "correctAnswer": "random_matrix",
              "correctAnswerFractions": false,
              "numRows": "numrows(random_matrix)",
              "numColumns": "numcolumns(random_matrix)",
              "allowResize": false,
              "tolerance": 0,
              "markPerCell": false,
              "allowFractions": false,
              "minColumns": 1,
              "maxColumns": 0,
              "minRows": 1,
              "maxRows": 0,
              "precisionType": "dp",
              "precision": "2",
              "precisionPartialCredit": "50",
              "precisionMessage": "You have not given your answer to the correct precision.",
              "strictPrecision": true
            },
            {
              "type": "matrix",
              "useCustomName": true,
              "customName": "Award marks for each correct cell",
              "marks": "9",
              "scripts": {},
              "customMarkingAlgorithm": "",
              "extendBaseMarkingAlgorithm": true,
              "unitTests": [],
              "showCorrectAnswer": true,
              "showFeedbackIcon": true,
              "variableReplacements": [],
              "variableReplacementStrategy": "originalfirst",
              "nextParts": [],
              "suggestGoingBack": false,
              "adaptiveMarkingPenalty": 0,
              "exploreObjective": null,
              "prompt": "<p><em>Rather than requiring the entire matrix to be correct, you can award partial credit for each correct cell.</em></p>\n<p>Write $\\var{id(3)}$.</p>",
              "correctAnswer": "id(3)",
              "correctAnswerFractions": false,
              "numRows": "3",
              "numColumns": "3",
              "allowResize": false,
              "tolerance": 0,
              "markPerCell": true,
              "allowFractions": false,
              "minColumns": 1,
              "maxColumns": 0,
              "minRows": 1,
              "maxRows": 0
            },
            {
              "type": "matrix",
              "useCustomName": true,
              "customName": "Allow fractions",
              "marks": 1,
              "scripts": {},
              "customMarkingAlgorithm": "",
              "extendBaseMarkingAlgorithm": true,
              "unitTests": [],
              "showCorrectAnswer": true,
              "showFeedbackIcon": true,
              "variableReplacements": [],
              "variableReplacementStrategy": "originalfirst",
              "nextParts": [],
              "suggestGoingBack": false,
              "adaptiveMarkingPenalty": 0,
              "exploreObjective": null,
              "prompt": "<p><em>You can allow the student to enter fractions in each cell.</em></p>\n<p>Write $\\var[fractionnumbers,flatfractions]{fraction_matrix}$.</p>",
              "correctAnswer": "fraction_matrix",
              "correctAnswerFractions": true,
              "numRows": "numrows(fraction_matrix)",
              "numColumns": "numcolumns(fraction_matrix)",
              "allowResize": false,
              "tolerance": 0,
              "markPerCell": false,
              "allowFractions": true,
              "minColumns": 1,
              "maxColumns": 0,
              "minRows": 1,
              "maxRows": 0
            }
          ],
          "partsMode": "all",
          "maxMarks": 0,
          "objectives": [],
          "penalties": [],
          "objectiveVisibility": "always",
          "penaltyVisibility": "always"
        },
        {
          "name": "Numbas demo: match text pattern part type",
          "extensions": [],
          "custom_part_types": [],
          "resources": [],
          "navigation": {
            "allowregen": true,
            "showfrontpage": false,
            "preventleave": false
          },
          "contributors": [
            {
              "name": "Christian Lawson-Perfect",
              "profile_url": "https://numbas.mathcentre.ac.uk/accounts/profile/7/"
            }
          ],
          "tags": [],
          "metadata": {
            "description": "<p>A demo of the match text pattern part and its options.</p>",
            "licence": "Creative Commons Attribution 4.0 International"
          },
          "statement": "<p>The <em>match text pattern</em> part type asks the student to enter a short string of text. It is marked correct if it matches the given pattern, or if it exactly matches the expected string.</p>\n<p><em><a href=\"https://numbas.mathcentre.ac.uk/question/66183/numbas-demo-match-text-pattern/\" target=\"_blank\" rel=\"noopener noreferrer\">See this question on the public editor</a>.</em></p>",
          "advice": "",
          "rulesets": {},
          "variables": {
            "titlecase_pattern": {
              "name": "titlecase_pattern",
              "group": "Ungrouped variables",
              "definition": "safe(\"(\\\\p{Lu}|\\\\p{N})(\\\\p{L}|\\\\p{P}|\\\\p{N})*(\\\\s+(\\\\p{Lu}|\\\\p{N})(\\\\p{L}|\\\\p{P}|\\\\p{N})*)*\")",
              "description": "<p>The regular expression for the title case part. The <code>\\p</code> escape characters select <a href=\"https://unicode.org/reports/tr18/#General_Category_Property\">unicode character properties</a>.</p>",
              "templateType": "anything"
            }
          },
          "variablesTest": { "condition": "", "maxRuns": 100 },
          "ungrouped_variables": ["titlecase_pattern"],
          "variable_groups": [],
          "functions": {},
          "preamble": { "js": "", "css": "" },
          "parts": [
            {
              "type": "patternmatch",
              "useCustomName": true,
              "customName": "Exact match",
              "marks": 1,
              "scripts": {},
              "customMarkingAlgorithm": "",
              "extendBaseMarkingAlgorithm": true,
              "unitTests": [],
              "showCorrectAnswer": true,
              "showFeedbackIcon": true,
              "variableReplacements": [],
              "variableReplacementStrategy": "originalfirst",
              "nextParts": [],
              "suggestGoingBack": false,
              "adaptiveMarkingPenalty": 0,
              "exploreObjective": null,
              "prompt": "<p><em>In this part, the student's string must exactly match the expected string.</em></p>\n<p>Write <strong>e-assessment</strong>.</p>",
              "answer": "e-assessment",
              "displayAnswer": "e-assessment",
              "matchMode": "exact"
            },
            {
              "type": "patternmatch",
              "useCustomName": true,
              "customName": "Require letter case to match",
              "marks": 1,
              "scripts": {},
              "customMarkingAlgorithm": "",
              "extendBaseMarkingAlgorithm": true,
              "unitTests": [],
              "showCorrectAnswer": true,
              "showFeedbackIcon": true,
              "variableReplacements": [],
              "variableReplacementStrategy": "originalfirst",
              "nextParts": [],
              "suggestGoingBack": false,
              "adaptiveMarkingPenalty": 0,
              "exploreObjective": null,
              "prompt": "<p><em>You can require that the case of the characters in the student's answer matches the expected answer.</em></p>\n<p>Write \"Numbas\".</p>\n<p><em>Try <code>Numbas</code> and <code>NUMBAS</code>.</em></p>",
              "answer": "Numbas",
              "displayAnswer": "Numbas",
              "caseSensitive": true,
              "partialCredit": "50",
              "matchMode": "exact"
            },
            {
              "type": "patternmatch",
              "useCustomName": true,
              "customName": "Match a regular expression pattern",
              "marks": 1,
              "scripts": {},
              "customMarkingAlgorithm": "",
              "extendBaseMarkingAlgorithm": true,
              "unitTests": [],
              "showCorrectAnswer": true,
              "showFeedbackIcon": true,
              "variableReplacements": [],
              "variableReplacementStrategy": "originalfirst",
              "nextParts": [],
              "suggestGoingBack": false,
              "adaptiveMarkingPenalty": 0,
              "exploreObjective": null,
              "prompt": "<p><em>You can accept any string which matches a given regular expression pattern.</em></p>\n<p>Write a headline in title case.</p>\n<p><em>Try <code>Numbas Marks Answer Correctly</code>, <code>Student informed of mistake</code> and <code>Family von Trapp Outraged.</code></em></p>",
              "answer": "{titlecase_pattern}",
              "displayAnswer": "Example Answer Displayed Next To Student's Answer",
              "caseSensitive": true,
              "partialCredit": 0,
              "matchMode": "regex"
            }
          ],
          "partsMode": "all",
          "maxMarks": 0,
          "objectives": [],
          "penalties": [],
          "objectiveVisibility": "always",
          "penaltyVisibility": "always"
        },
        {
          "name": "Numbas demo: choose one from a list part type",
          "extensions": [],
          "custom_part_types": [],
          "resources": [],
          "navigation": {
            "allowregen": true,
            "showfrontpage": false,
            "preventleave": false
          },
          "contributors": [
            {
              "name": "Christian Lawson-Perfect",
              "profile_url": "https://numbas.mathcentre.ac.uk/accounts/profile/7/"
            }
          ],
          "tags": [],
          "metadata": {
            "description": "<p>A demo of the choose one from a list part and its options.</p>",
            "licence": "Creative Commons Attribution 4.0 International"
          },
          "statement": "<p>The <em>choose one from a list</em> part type presents the student with a list of choices, and asks them to pick the right one. Each choice can award a different number of marks.</p>\n<p><em><a href=\"https://numbas.mathcentre.ac.uk/question/66185/numbas-demo-choose-one-from-a-list-part-type/\" target=\"_blank\" rel=\"noopener noreferrer\">See this question on the public editor</a>.</em></p>",
          "advice": "",
          "rulesets": {},
          "variables": {
            "random_correct_choice": {
              "name": "random_correct_choice",
              "group": "Ungrouped variables",
              "definition": "random(0..2)",
              "description": "",
              "templateType": "anything"
            },
            "correct_choice": {
              "name": "correct_choice",
              "group": "Ungrouped variables",
              "definition": "[\"A\",\"B\",\"C\"][random_correct_choice]",
              "description": "",
              "templateType": "anything"
            },
            "random_number_of_distractors": {
              "name": "random_number_of_distractors",
              "group": "Ungrouped variables",
              "definition": "random(2..5)",
              "description": "",
              "templateType": "anything"
            },
            "random_choices": {
              "name": "random_choices",
              "group": "Ungrouped variables",
              "definition": "[\"Correct choice\"]+map(\"Incorrect choice \"+j,j,1..random_number_of_distractors)",
              "description": "",
              "templateType": "anything"
            }
          },
          "variablesTest": { "condition": "", "maxRuns": 100 },
          "ungrouped_variables": [
            "random_correct_choice",
            "correct_choice",
            "random_number_of_distractors",
            "random_choices"
          ],
          "variable_groups": [],
          "functions": {},
          "preamble": { "js": "", "css": "" },
          "parts": [
            {
              "type": "1_n_2",
              "useCustomName": true,
              "customName": "One correct answer",
              "marks": 0,
              "scripts": {},
              "customMarkingAlgorithm": "",
              "extendBaseMarkingAlgorithm": true,
              "unitTests": [],
              "showCorrectAnswer": true,
              "showFeedbackIcon": true,
              "variableReplacements": [],
              "variableReplacementStrategy": "originalfirst",
              "nextParts": [],
              "suggestGoingBack": false,
              "adaptiveMarkingPenalty": 0,
              "exploreObjective": null,
              "prompt": "<p>Sometimes there's only one correct answer.</p>",
              "minMarks": 0,
              "maxMarks": 0,
              "shuffleChoices": false,
              "displayType": "radiogroup",
              "displayColumns": 0,
              "showCellAnswerState": true,
              "choices": [
                "The correct answer",
                "An incorrect answer",
                "Another incorrect answer"
              ],
              "matrix": ["1", 0, 0],
              "distractors": ["", "", ""]
            },
            {
              "type": "1_n_2",
              "useCustomName": true,
              "customName": "Display choices in columns",
              "marks": 0,
              "scripts": {},
              "customMarkingAlgorithm": "",
              "extendBaseMarkingAlgorithm": true,
              "unitTests": [],
              "showCorrectAnswer": true,
              "showFeedbackIcon": true,
              "variableReplacements": [],
              "variableReplacementStrategy": "originalfirst",
              "nextParts": [],
              "suggestGoingBack": false,
              "adaptiveMarkingPenalty": 0,
              "exploreObjective": null,
              "prompt": "<p>You can display the choices in columns.</p>",
              "minMarks": 0,
              "maxMarks": 0,
              "shuffleChoices": false,
              "displayType": "radiogroup",
              "displayColumns": "3",
              "showCellAnswerState": true,
              "choices": [
                "Correct",
                "Incorrect",
                "Incorrect",
                "Incorrect",
                "Incorrect",
                "Incorrect"
              ],
              "matrix": ["1", 0, 0, 0, 0, 0],
              "distractors": ["", "", "", "", "", ""]
            },
            {
              "type": "1_n_2",
              "useCustomName": true,
              "customName": "Choices worth different amounts",
              "marks": 0,
              "scripts": {},
              "customMarkingAlgorithm": "",
              "extendBaseMarkingAlgorithm": true,
              "unitTests": [],
              "showCorrectAnswer": true,
              "showFeedbackIcon": true,
              "variableReplacements": [],
              "variableReplacementStrategy": "originalfirst",
              "nextParts": [],
              "suggestGoingBack": false,
              "adaptiveMarkingPenalty": 0,
              "exploreObjective": null,
              "prompt": "<p>Each choice awards a different number of marks.</p>",
              "minMarks": 0,
              "maxMarks": 0,
              "shuffleChoices": false,
              "displayType": "radiogroup",
              "displayColumns": "1",
              "showCellAnswerState": true,
              "choices": [
                "This incorrect choice doesn't award any marks.",
                "This nearly-correct choice awards one mark.",
                "This completely correct choice awards three marks."
              ],
              "matrix": [0, "1", "3"],
              "distractors": ["", "", ""]
            },
            {
              "type": "1_n_2",
              "useCustomName": true,
              "customName": "Distractor text",
              "marks": 0,
              "scripts": {},
              "customMarkingAlgorithm": "",
              "extendBaseMarkingAlgorithm": true,
              "unitTests": [],
              "showCorrectAnswer": true,
              "showFeedbackIcon": true,
              "variableReplacements": [],
              "variableReplacementStrategy": "originalfirst",
              "nextParts": [],
              "suggestGoingBack": false,
              "adaptiveMarkingPenalty": 0,
              "exploreObjective": null,
              "prompt": "<p>For each choice, you can write a message to display to the student if they choose it.</p>",
              "minMarks": 0,
              "maxMarks": 0,
              "shuffleChoices": false,
              "displayType": "radiogroup",
              "displayColumns": 0,
              "showCellAnswerState": true,
              "choices": ["The right choice.", "The wrong choice."],
              "matrix": ["1", 0],
              "distractors": [
                "Well done spotting the correct choice.",
                "Why did you pick the wrong choice?"
              ]
            },
            {
              "type": "1_n_2",
              "useCustomName": true,
              "customName": "Drop-down list",
              "marks": 0,
              "scripts": {},
              "customMarkingAlgorithm": "",
              "extendBaseMarkingAlgorithm": true,
              "unitTests": [],
              "showCorrectAnswer": true,
              "showFeedbackIcon": true,
              "variableReplacements": [],
              "variableReplacementStrategy": "originalfirst",
              "nextParts": [],
              "suggestGoingBack": false,
              "adaptiveMarkingPenalty": 0,
              "exploreObjective": null,
              "prompt": "<p>Rather than radio buttons, you can present the choices in a drop-down list.</p>",
              "minMarks": 0,
              "maxMarks": 0,
              "shuffleChoices": false,
              "displayType": "dropdownlist",
              "displayColumns": 0,
              "showCellAnswerState": true,
              "choices": ["Correct choice", "Incorrect choice"],
              "matrix": ["1", 0],
              "distractors": ["", ""]
            },
            {
              "type": "1_n_2",
              "useCustomName": true,
              "customName": "Shuffle the order of choices",
              "marks": 0,
              "scripts": {},
              "customMarkingAlgorithm": "",
              "extendBaseMarkingAlgorithm": true,
              "unitTests": [],
              "showCorrectAnswer": true,
              "showFeedbackIcon": true,
              "variableReplacements": [],
              "variableReplacementStrategy": "originalfirst",
              "nextParts": [],
              "suggestGoingBack": false,
              "adaptiveMarkingPenalty": 0,
              "exploreObjective": null,
              "prompt": "<p>You can randomly shuffle the order of the choices.</p>\n<p><em>Click the \"Try another question like this one\" button to see these choices in a different order.</em></p>",
              "minMarks": 0,
              "maxMarks": 0,
              "shuffleChoices": true,
              "displayType": "radiogroup",
              "displayColumns": "1",
              "showCellAnswerState": true,
              "choices": [
                "Correct choice",
                "Incorrect choice 1",
                "Incorrect choice 2",
                "Incorrect choice 3"
              ],
              "matrix": ["1", 0, 0, 0],
              "distractors": ["", "", "", ""]
            },
            {
              "type": "1_n_2",
              "useCustomName": true,
              "customName": "Marking depends on question variables",
              "marks": 0,
              "scripts": {},
              "customMarkingAlgorithm": "",
              "extendBaseMarkingAlgorithm": true,
              "unitTests": [],
              "showCorrectAnswer": true,
              "showFeedbackIcon": true,
              "variableReplacements": [],
              "variableReplacementStrategy": "originalfirst",
              "nextParts": [],
              "suggestGoingBack": false,
              "adaptiveMarkingPenalty": 0,
              "exploreObjective": null,
              "prompt": "<p><em>You can set the number of marks based on question variables.</em></p>\n<p>This time, the correct answer is <strong>{correct_choice}</strong>.</p>",
              "minMarks": 0,
              "maxMarks": 0,
              "shuffleChoices": false,
              "displayType": "radiogroup",
              "displayColumns": 0,
              "showCellAnswerState": true,
              "choices": ["A", "B", "C"],
              "matrix": "map(award(1,j=random_correct_choice),j,0..2)"
            },
            {
              "type": "1_n_2",
              "useCustomName": true,
              "customName": "Variable number of choices",
              "marks": 0,
              "scripts": {},
              "customMarkingAlgorithm": "",
              "extendBaseMarkingAlgorithm": true,
              "unitTests": [],
              "showCorrectAnswer": true,
              "showFeedbackIcon": true,
              "variableReplacements": [],
              "variableReplacementStrategy": "originalfirst",
              "nextParts": [],
              "suggestGoingBack": false,
              "adaptiveMarkingPenalty": 0,
              "exploreObjective": null,
              "prompt": "<p><em>The choices themselves can depend on question variables, too.</em></p>\n<p>This time, there are {random_number_of_distractors+1} choices.</p>",
              "minMarks": 0,
              "maxMarks": 0,
              "shuffleChoices": false,
              "displayType": "radiogroup",
              "displayColumns": "1",
              "showCellAnswerState": true,
              "choices": "random_choices",
              "matrix": "[1]+repeat(0,random_number_of_distractors)"
            }
          ],
          "partsMode": "all",
          "maxMarks": 0,
          "objectives": [],
          "penalties": [],
          "objectiveVisibility": "always",
          "penaltyVisibility": "always"
        },
        {
          "name": "Numbas demo: choose several from a list part type",
          "extensions": [],
          "custom_part_types": [],
          "resources": [],
          "navigation": {
            "allowregen": true,
            "showfrontpage": false,
            "preventleave": false
          },
          "contributors": [
            {
              "name": "Christian Lawson-Perfect",
              "profile_url": "https://numbas.mathcentre.ac.uk/accounts/profile/7/"
            }
          ],
          "tags": [],
          "metadata": {
            "description": "<p>A demo of the choose several from a list part and its options.</p>",
            "licence": "Creative Commons Attribution 4.0 International"
          },
          "statement": "<p>The <em>choose several from a list</em> part type presents the student with a list of choices, of which they have to select one or more. Each choice awards a different number of marks when it is chosen, and the student is awarded the sum of the marks for their choices.</p>\n<p><em><a href=\"https://numbas.mathcentre.ac.uk/question/66212/numbas-demo-choose-several-from-a-list-part-type/\" target=\"_blank\" rel=\"noopener noreferrer\">See this question on the public editor</a>.</em></p>",
          "advice": "",
          "rulesets": {},
          "variables": {
            "pick_odd_numbers": {
              "name": "pick_odd_numbers",
              "group": "Ungrouped variables",
              "definition": "random(true,false)",
              "description": "",
              "templateType": "anything"
            },
            "numbers_to_pick": {
              "name": "numbers_to_pick",
              "group": "Ungrouped variables",
              "definition": "if(pick_odd_numbers,\"odd\",\"even\")",
              "description": "",
              "templateType": "anything"
            },
            "numbers_marking_matrix": {
              "name": "numbers_marking_matrix",
              "group": "Ungrouped variables",
              "definition": "map(\n  award(1,mod(j,2) = if(pick_odd_numbers,1,0)),\n  j,\n  1..4\n)",
              "description": "",
              "templateType": "anything"
            },
            "number_of_correct_choices": {
              "name": "number_of_correct_choices",
              "group": "Ungrouped variables",
              "definition": "random(2..total_choices-2 except 5)",
              "description": "",
              "templateType": "anything"
            },
            "number_of_distractors": {
              "name": "number_of_distractors",
              "group": "Ungrouped variables",
              "definition": "total_choices - number_of_correct_choices",
              "description": "",
              "templateType": "anything"
            },
            "random_choices": {
              "name": "random_choices",
              "group": "Ungrouped variables",
              "definition": "map(\"Correct choice \"+j,j,1..number_of_correct_choices)\n+\nmap(\"Incorrect choice \"+j,j,1..number_of_distractors)",
              "description": "",
              "templateType": "anything"
            },
            "random_marking_matrix": {
              "name": "random_marking_matrix",
              "group": "Ungrouped variables",
              "definition": "repeat(12/number_of_correct_choices,number_of_correct_choices) + repeat(-12/number_of_correct_choices,number_of_distractors)",
              "description": "",
              "templateType": "anything"
            },
            "total_choices": {
              "name": "total_choices",
              "group": "Ungrouped variables",
              "definition": "random(4..7)",
              "description": "",
              "templateType": "anything"
            }
          },
          "variablesTest": { "condition": "", "maxRuns": 100 },
          "ungrouped_variables": [
            "pick_odd_numbers",
            "numbers_to_pick",
            "numbers_marking_matrix",
            "total_choices",
            "number_of_correct_choices",
            "number_of_distractors",
            "random_choices",
            "random_marking_matrix"
          ],
          "variable_groups": [],
          "functions": {},
          "preamble": { "js": "", "css": "" },
          "parts": [
            {
              "type": "m_n_2",
              "useCustomName": true,
              "customName": "Award marks for correct choices",
              "marks": 0,
              "scripts": {},
              "customMarkingAlgorithm": "",
              "extendBaseMarkingAlgorithm": true,
              "unitTests": [],
              "showCorrectAnswer": true,
              "showFeedbackIcon": true,
              "variableReplacements": [],
              "variableReplacementStrategy": "originalfirst",
              "nextParts": [],
              "suggestGoingBack": false,
              "adaptiveMarkingPenalty": 0,
              "exploreObjective": null,
              "prompt": "<p>In this part, the student is awarded 1 mark for each correct choice. However, selecting all the choices also gives you full marks...</p>",
              "minMarks": 0,
              "maxMarks": 0,
              "shuffleChoices": false,
              "displayType": "checkbox",
              "displayColumns": 0,
              "minAnswers": 0,
              "maxAnswers": 0,
              "warningType": "none",
              "showCellAnswerState": true,
              "markingMethod": "sum ticked cells",
              "choices": [
                "Correct choice",
                "Correct choice",
                "Incorrect choice",
                "Incorrect choice"
              ],
              "matrix": ["1", "1", 0, 0],
              "distractors": ["", "", "", ""]
            },
            {
              "type": "m_n_2",
              "useCustomName": true,
              "customName": "Display choices in columns",
              "marks": 0,
              "scripts": {},
              "customMarkingAlgorithm": "",
              "extendBaseMarkingAlgorithm": true,
              "unitTests": [],
              "showCorrectAnswer": true,
              "showFeedbackIcon": true,
              "variableReplacements": [],
              "variableReplacementStrategy": "originalfirst",
              "nextParts": [],
              "suggestGoingBack": false,
              "adaptiveMarkingPenalty": 0,
              "exploreObjective": null,
              "prompt": "<p>You can display the choices in columns.</p>",
              "minMarks": 0,
              "maxMarks": 0,
              "shuffleChoices": false,
              "displayType": "checkbox",
              "displayColumns": "3",
              "minAnswers": 0,
              "maxAnswers": 0,
              "warningType": "none",
              "showCellAnswerState": true,
              "choices": [
                "Correct choice",
                "Correct choice",
                "Incorrect choice",
                "Incorrect choice",
                "Incorrect choice",
                "Incorrect choice"
              ],
              "matrix": ["1", "1", 0, 0, 0, 0],
              "distractors": ["", "", "", "", "", ""]
            },
            {
              "type": "m_n_2",
              "useCustomName": true,
              "customName": "Restricted number of answers",
              "marks": 0,
              "scripts": {},
              "customMarkingAlgorithm": "",
              "extendBaseMarkingAlgorithm": true,
              "unitTests": [],
              "showCorrectAnswer": true,
              "showFeedbackIcon": true,
              "variableReplacements": [],
              "variableReplacementStrategy": "originalfirst",
              "nextParts": [],
              "suggestGoingBack": false,
              "adaptiveMarkingPenalty": 0,
              "exploreObjective": null,
              "prompt": "<p>You must pick exactly two answers.</p>",
              "minMarks": 0,
              "maxMarks": 0,
              "shuffleChoices": false,
              "displayType": "checkbox",
              "displayColumns": "1",
              "minAnswers": "2",
              "maxAnswers": "2",
              "warningType": "prevent",
              "showCellAnswerState": true,
              "choices": [
                "Correct choice",
                "Correct choice",
                "Incorrect choice",
                "Incorrect choice"
              ],
              "matrix": ["1", "1", 0, 0],
              "distractors": ["", "", "", ""]
            },
            {
              "type": "m_n_2",
              "useCustomName": true,
              "customName": "Negative marking",
              "marks": 0,
              "scripts": {},
              "customMarkingAlgorithm": "",
              "extendBaseMarkingAlgorithm": true,
              "unitTests": [],
              "showCorrectAnswer": true,
              "showFeedbackIcon": true,
              "variableReplacements": [],
              "variableReplacementStrategy": "originalfirst",
              "nextParts": [],
              "suggestGoingBack": false,
              "adaptiveMarkingPenalty": 0,
              "exploreObjective": null,
              "prompt": "<p>You can take away marks when incorrect choices are selected, to discourage the student from picking at random.</p>\n<p>Each incorrect choice for this part takes away 2 marks.</p>",
              "minMarks": 0,
              "maxMarks": 0,
              "shuffleChoices": false,
              "displayType": "checkbox",
              "displayColumns": "1",
              "minAnswers": 0,
              "maxAnswers": 0,
              "warningType": "none",
              "showCellAnswerState": true,
              "choices": [
                "Correct choice",
                "Correct choice",
                "Correct choice",
                "Incorrect choice",
                "Incorrect choice"
              ],
              "matrix": ["1", "1", "1", "-2", "-2"],
              "distractors": ["", "", "", "", ""]
            },
            {
              "type": "m_n_2",
              "useCustomName": true,
              "customName": "Score per matched cell",
              "marks": 0,
              "scripts": {},
              "customMarkingAlgorithm": "",
              "extendBaseMarkingAlgorithm": true,
              "unitTests": [],
              "showCorrectAnswer": true,
              "showFeedbackIcon": true,
              "variableReplacements": [],
              "variableReplacementStrategy": "originalfirst",
              "nextParts": [],
              "suggestGoingBack": false,
              "adaptiveMarkingPenalty": 0,
              "exploreObjective": null,
              "prompt": "<p><em>This part uses the \"score per matched cell\" marking method - you will be awarded 1 mark for each correct ticked or unticked box.</em></p>\n<p>Tick each mammal.</p>",
              "minMarks": 0,
              "maxMarks": "2",
              "shuffleChoices": true,
              "displayType": "checkbox",
              "displayColumns": 0,
              "minAnswers": 0,
              "maxAnswers": 0,
              "warningType": "none",
              "showCellAnswerState": true,
              "markingMethod": "score per matched cell",
              "choices": ["Cat", "Dog", "Shark", "Sparrow"],
              "matrix": ["1", "1", 0, 0],
              "distractors": ["", "", "", ""]
            },
            {
              "type": "m_n_2",
              "useCustomName": true,
              "customName": "Distractor text",
              "marks": 0,
              "scripts": {},
              "customMarkingAlgorithm": "",
              "extendBaseMarkingAlgorithm": true,
              "unitTests": [],
              "showCorrectAnswer": true,
              "showFeedbackIcon": true,
              "variableReplacements": [],
              "variableReplacementStrategy": "originalfirst",
              "nextParts": [],
              "suggestGoingBack": false,
              "adaptiveMarkingPenalty": 0,
              "exploreObjective": null,
              "prompt": "<p>For each choice, you can write a message to display to the student if they choose it.</p>",
              "minMarks": 0,
              "maxMarks": 0,
              "shuffleChoices": false,
              "displayType": "checkbox",
              "displayColumns": "1",
              "minAnswers": 0,
              "maxAnswers": 0,
              "warningType": "none",
              "showCellAnswerState": true,
              "choices": [
                "Correct choice 1",
                "Correct choice 1",
                "Incorrect choice 1",
                "Incorrect choice 2"
              ],
              "matrix": ["1", "1", "-1", "-1"],
              "distractors": [
                "Correct choice 1 is indeed correct!",
                "Correct choice 2 is indeed correct!",
                "Incorrect choice 1 is not correct.",
                "Incorrect choice 2 is not correct."
              ]
            },
            {
              "type": "m_n_2",
              "useCustomName": true,
              "customName": "Shuffle the order of choices",
              "marks": 0,
              "scripts": {},
              "customMarkingAlgorithm": "",
              "extendBaseMarkingAlgorithm": true,
              "unitTests": [],
              "showCorrectAnswer": true,
              "showFeedbackIcon": true,
              "variableReplacements": [],
              "variableReplacementStrategy": "originalfirst",
              "nextParts": [],
              "suggestGoingBack": false,
              "adaptiveMarkingPenalty": 0,
              "exploreObjective": null,
              "prompt": "<p>You can randomly shuffle the order of the choices.</p>\n<p><em>Click the \"Try another question like this one\" button to see these choices in a different order.</em></p>",
              "minMarks": 0,
              "maxMarks": 0,
              "shuffleChoices": true,
              "displayType": "checkbox",
              "displayColumns": "1",
              "minAnswers": 0,
              "maxAnswers": 0,
              "warningType": "none",
              "showCellAnswerState": true,
              "choices": [
                "Correct choice A",
                "Correct choice B",
                "Correct choice C",
                "Incorrect choice 1",
                "Incorrect choice 2"
              ],
              "matrix": ["1", "1", "1", 0, 0],
              "distractors": ["", "", "", "", ""]
            },
            {
              "type": "m_n_2",
              "useCustomName": true,
              "customName": "Marking depends on variables",
              "marks": 0,
              "scripts": {},
              "customMarkingAlgorithm": "",
              "extendBaseMarkingAlgorithm": true,
              "unitTests": [],
              "showCorrectAnswer": true,
              "showFeedbackIcon": true,
              "variableReplacements": [],
              "variableReplacementStrategy": "originalfirst",
              "nextParts": [],
              "suggestGoingBack": false,
              "adaptiveMarkingPenalty": 0,
              "exploreObjective": null,
              "prompt": "<p>You can set the number of marks based on question variables.</p>\n<p>This time, pick <strong>{numbers_to_pick}</strong> numbers.</p>",
              "minMarks": 0,
              "maxMarks": 0,
              "shuffleChoices": false,
              "displayType": "checkbox",
              "displayColumns": 0,
              "minAnswers": 0,
              "maxAnswers": 0,
              "warningType": "none",
              "showCellAnswerState": true,
              "choices": ["1", "2", "3", "4"],
              "matrix": "numbers_marking_matrix"
            },
            {
              "type": "m_n_2",
              "useCustomName": true,
              "customName": "Variable number of choices",
              "marks": 0,
              "scripts": {},
              "customMarkingAlgorithm": "",
              "extendBaseMarkingAlgorithm": true,
              "unitTests": [],
              "showCorrectAnswer": true,
              "showFeedbackIcon": true,
              "variableReplacements": [],
              "variableReplacementStrategy": "originalfirst",
              "nextParts": [],
              "suggestGoingBack": false,
              "adaptiveMarkingPenalty": 0,
              "exploreObjective": null,
              "prompt": "<p><em>The choices themselves can depend on question variables, too.</em></p>\n<p>This time, there are {number_of_correct_choices} correct choices and {number_of_distractors} incorrect choices.</p>",
              "minMarks": 0,
              "maxMarks": 0,
              "shuffleChoices": false,
              "displayType": "checkbox",
              "displayColumns": "1",
              "minAnswers": 0,
              "maxAnswers": 0,
              "warningType": "none",
              "showCellAnswerState": true,
              "choices": "random_choices",
              "matrix": "random_marking_matrix"
            }
          ],
          "partsMode": "all",
          "maxMarks": 0,
          "objectives": [],
          "penalties": [],
          "objectiveVisibility": "always",
          "penaltyVisibility": "always"
        },
        {
          "name": "Numbas demo: match choices with answers part type",
          "extensions": [],
          "custom_part_types": [],
          "resources": [],
          "navigation": {
            "allowregen": true,
            "showfrontpage": false,
            "preventleave": false
          },
          "contributors": [
            {
              "name": "Christian Lawson-Perfect",
              "profile_url": "https://numbas.mathcentre.ac.uk/accounts/profile/7/"
            }
          ],
          "tags": [],
          "metadata": {
            "description": "<p>A demo of the match choices with answers part and its options.</p>",
            "licence": "Creative Commons Attribution 4.0 International"
          },
          "statement": "<p>The <em>match choices with answers</em> part presents the student with a list of <em>choices</em>, and a list of <em>answers</em>. The student must match up choices with answers, either choosing one answer for each choice, or arbitrarily many pairs.</p>\n<p>Each choice-answer pair awards a different number of marks.</p>\n<p><em><a href=\"https://numbas.mathcentre.ac.uk/question/66215/numbas-demo-match-choices-with-answers-part-type/\" target=\"_blank\" rel=\"noopener noreferrer\">See this question on the public editor</a>.</em></p>",
          "advice": "",
          "rulesets": {},
          "variables": {
            "target": {
              "name": "target",
              "group": "Ungrouped variables",
              "definition": "random(2,3,4,4,5,6)",
              "description": "",
              "templateType": "anything"
            },
            "random_marking_matrix": {
              "name": "random_marking_matrix",
              "group": "Ungrouped variables",
              "definition": "map(\n  map(award(1,a+b=target),b,1..3),\n  a,\n  1..3\n)",
              "description": "",
              "templateType": "anything"
            },
            "number_of_choices": {
              "name": "number_of_choices",
              "group": "Ungrouped variables",
              "definition": "random(2..4)",
              "description": "",
              "templateType": "anything"
            },
            "random_choices": {
              "name": "random_choices",
              "group": "Ungrouped variables",
              "definition": "offset+1..offset+number_of_choices",
              "description": "",
              "templateType": "anything"
            },
            "offset": {
              "name": "offset",
              "group": "Ungrouped variables",
              "definition": "random(0..8)",
              "description": "",
              "templateType": "anything"
            },
            "even_odd_marking_matrix": {
              "name": "even_odd_marking_matrix",
              "group": "Ungrouped variables",
              "definition": "map(\n  if(mod(j,2)=0,[1,0],[0,1]),\n  j,\n  random_choices\n)",
              "description": "",
              "templateType": "anything"
            }
          },
          "variablesTest": { "condition": "", "maxRuns": 100 },
          "ungrouped_variables": [
            "target",
            "random_marking_matrix",
            "number_of_choices",
            "offset",
            "random_choices",
            "even_odd_marking_matrix"
          ],
          "variable_groups": [],
          "functions": {},
          "preamble": { "js": "", "css": "" },
          "parts": [
            {
              "type": "m_n_x",
              "useCustomName": true,
              "customName": "One from each row",
              "marks": 0,
              "scripts": {},
              "customMarkingAlgorithm": "",
              "extendBaseMarkingAlgorithm": true,
              "unitTests": [],
              "showCorrectAnswer": true,
              "showFeedbackIcon": true,
              "variableReplacements": [],
              "variableReplacementStrategy": "originalfirst",
              "nextParts": [],
              "suggestGoingBack": false,
              "adaptiveMarkingPenalty": 0,
              "exploreObjective": null,
              "minMarks": 0,
              "maxMarks": 0,
              "minAnswers": 0,
              "maxAnswers": 0,
              "shuffleChoices": false,
              "shuffleAnswers": false,
              "displayType": "radiogroup",
              "warningType": "none",
              "showCellAnswerState": true,
              "markingMethod": "sum ticked cells",
              "choices": ["Choice 1", "Choice 2"],
              "matrix": [
                ["1", 0],
                [0, "1"]
              ],
              "layout": { "type": "all", "expression": "" },
              "answers": ["Answer 1", "Answer 2"]
            },
            {
              "type": "m_n_x",
              "useCustomName": true,
              "customName": "Checkboxes",
              "marks": 0,
              "scripts": {},
              "customMarkingAlgorithm": "",
              "extendBaseMarkingAlgorithm": true,
              "unitTests": [],
              "showCorrectAnswer": true,
              "showFeedbackIcon": true,
              "variableReplacements": [],
              "variableReplacementStrategy": "originalfirst",
              "nextParts": [],
              "suggestGoingBack": false,
              "adaptiveMarkingPenalty": 0,
              "exploreObjective": null,
              "minMarks": 0,
              "maxMarks": 0,
              "minAnswers": 0,
              "maxAnswers": 0,
              "shuffleChoices": false,
              "shuffleAnswers": false,
              "displayType": "checkbox",
              "warningType": "none",
              "showCellAnswerState": true,
              "choices": ["Choice A", "Choice B"],
              "matrix": [
                ["1", "1", 0, 0],
                [0, 0, "1", "1"]
              ],
              "layout": { "type": "all", "expression": "" },
              "answers": ["Answer A1", "Answer A2", "Answer B1", "Answer B2"]
            },
            {
              "type": "m_n_x",
              "useCustomName": true,
              "customName": "Shuffle the order of choices and answers",
              "marks": 0,
              "scripts": {},
              "customMarkingAlgorithm": "",
              "extendBaseMarkingAlgorithm": true,
              "unitTests": [],
              "showCorrectAnswer": true,
              "showFeedbackIcon": true,
              "variableReplacements": [],
              "variableReplacementStrategy": "originalfirst",
              "nextParts": [],
              "suggestGoingBack": false,
              "adaptiveMarkingPenalty": 0,
              "exploreObjective": null,
              "prompt": "<p>You can randomise the order of both choices and answers, or just one.</p>",
              "minMarks": 0,
              "maxMarks": 0,
              "minAnswers": 0,
              "maxAnswers": 0,
              "shuffleChoices": true,
              "shuffleAnswers": true,
              "displayType": "checkbox",
              "warningType": "none",
              "showCellAnswerState": true,
              "choices": ["Choice A", "Choice B"],
              "matrix": [
                ["1", "1", 0, 0],
                [0, 0, "1", "1"]
              ],
              "layout": { "type": "all", "expression": "" },
              "answers": ["Answer A1", "Answer A2", "Answer B1", "Answer B2"]
            },
            {
              "type": "m_n_x",
              "useCustomName": true,
              "customName": "Remove some options",
              "marks": 0,
              "scripts": {},
              "customMarkingAlgorithm": "",
              "extendBaseMarkingAlgorithm": true,
              "unitTests": [],
              "showCorrectAnswer": true,
              "showFeedbackIcon": true,
              "variableReplacements": [],
              "variableReplacementStrategy": "originalfirst",
              "nextParts": [],
              "suggestGoingBack": false,
              "adaptiveMarkingPenalty": 0,
              "exploreObjective": null,
              "prompt": "<p><em>When certain selections don't make sense, or there's symmetry, you can remove them by choosing a different layout.</em></p>\n<p>Select pairs of numbers that add up to 4.</p>",
              "minMarks": 0,
              "maxMarks": 0,
              "minAnswers": 0,
              "maxAnswers": 0,
              "shuffleChoices": false,
              "shuffleAnswers": false,
              "displayType": "checkbox",
              "warningType": "none",
              "showCellAnswerState": true,
              "choices": ["1", "2", "3"],
              "matrix": [
                [0, 0, 0],
                ["0", "3", 0],
                ["3", 0, 0]
              ],
              "layout": { "type": "lowertriangle", "expression": "" },
              "answers": ["1", "2", "3"]
            },
            {
              "type": "m_n_x",
              "useCustomName": true,
              "customName": "Marking depends on question variables",
              "marks": 0,
              "scripts": {},
              "customMarkingAlgorithm": "",
              "extendBaseMarkingAlgorithm": true,
              "unitTests": [],
              "showCorrectAnswer": true,
              "showFeedbackIcon": true,
              "variableReplacements": [],
              "variableReplacementStrategy": "originalfirst",
              "nextParts": [],
              "suggestGoingBack": false,
              "adaptiveMarkingPenalty": 0,
              "exploreObjective": null,
              "prompt": "<p><em>The marks awarded for each selection can depend on question variables.</em></p>\n<p>This time, select pairs of numbers that add up to <strong>{target}</strong>.</p>",
              "minMarks": 0,
              "maxMarks": 0,
              "minAnswers": 0,
              "maxAnswers": 0,
              "shuffleChoices": false,
              "shuffleAnswers": false,
              "displayType": "checkbox",
              "warningType": "none",
              "showCellAnswerState": true,
              "markingMethod": "sum ticked cells",
              "choices": ["1", "2", "3"],
              "matrix": "random_marking_matrix",
              "layout": { "type": "lowertriangle", "expression": "" },
              "answers": ["1", "2", "3"]
            },
            {
              "type": "m_n_x",
              "useCustomName": true,
              "customName": "Variable number of choices",
              "marks": 0,
              "scripts": {},
              "customMarkingAlgorithm": "",
              "extendBaseMarkingAlgorithm": true,
              "unitTests": [],
              "showCorrectAnswer": true,
              "showFeedbackIcon": true,
              "variableReplacements": [],
              "variableReplacementStrategy": "originalfirst",
              "nextParts": [],
              "suggestGoingBack": false,
              "adaptiveMarkingPenalty": 0,
              "exploreObjective": null,
              "prompt": "<p><em>Even the lists of choices and answers can depend on question variables.</em></p>\n<p>Classify each of the following numbers as even or odd.</p>",
              "minMarks": 0,
              "maxMarks": 0,
              "minAnswers": 0,
              "maxAnswers": 0,
              "shuffleChoices": false,
              "shuffleAnswers": false,
              "displayType": "radiogroup",
              "warningType": "none",
              "showCellAnswerState": true,
              "markingMethod": "sum ticked cells",
              "choices": "map(string(n),n,random_choices)",
              "matrix": "even_odd_marking_matrix",
              "layout": { "type": "all", "expression": "" },
              "answers": ["Even", "Odd"]
            },
            {
              "type": "m_n_x",
              "useCustomName": true,
              "customName": "Score per matched cell",
              "marks": 0,
              "scripts": {},
              "customMarkingAlgorithm": "",
              "extendBaseMarkingAlgorithm": true,
              "unitTests": [],
              "showCorrectAnswer": true,
              "showFeedbackIcon": true,
              "variableReplacements": [],
              "variableReplacementStrategy": "originalfirst",
              "nextParts": [],
              "suggestGoingBack": false,
              "adaptiveMarkingPenalty": 0,
              "exploreObjective": null,
              "prompt": "<p><em>This part uses the \"score per matched cell\" marking method - you will be awarded 1 mark for each correct ticked or unticked pair.</em></p>\n<p>Tick each pair of coprime numbers. Two numbers are coprime if their greatest common factor is 1.</p>",
              "minMarks": 0,
              "maxMarks": "12",
              "minAnswers": 0,
              "maxAnswers": 0,
              "shuffleChoices": true,
              "shuffleAnswers": false,
              "displayType": "checkbox",
              "warningType": "none",
              "showCellAnswerState": true,
              "markingMethod": "score per matched cell",
              "choices": ["6", "4", "14"],
              "matrix": [
                [0, 0, "1", "1"],
                [0, "1", "1", "1"],
                [0, "1", 0, 0]
              ],
              "layout": { "type": "all", "expression": "" },
              "answers": ["18", "9", "7", "35"]
            }
          ],
          "partsMode": "all",
          "maxMarks": 0,
          "objectives": [],
          "penalties": [],
          "objectiveVisibility": "always",
          "penaltyVisibility": "always"
        },
        {
          "name": "Numbas demo: gap-fill part type",
          "extensions": [],
          "custom_part_types": [],
          "resources": [],
          "navigation": {
            "allowregen": true,
            "showfrontpage": false,
            "preventleave": false
          },
          "contributors": [
            {
              "name": "Christian Lawson-Perfect",
              "profile_url": "https://numbas.mathcentre.ac.uk/accounts/profile/7/"
            }
          ],
          "tags": [],
          "metadata": {
            "description": "<p>A demo of the gap-fill part and its options.</p>",
            "licence": "Creative Commons Attribution 4.0 International"
          },
          "statement": "<p>The <em>gap-fill</em> part presents one or more sub-parts as gaps inside the prompt text. Each gap is marked independently, and the student is awarded the total of their marks for the individual-parts.</p>\n<p><em><a href=\"https://numbas.mathcentre.ac.uk/question/66231/numbas-demo-gap-fill-part/\" target=\"_blank\" rel=\"noopener noreferrer\">See this question on the public editor</a>.</em></p>",
          "advice": "",
          "rulesets": {},
          "variables": {},
          "variablesTest": { "condition": "", "maxRuns": 100 },
          "ungrouped_variables": [],
          "variable_groups": [],
          "functions": {},
          "preamble": { "js": "", "css": "" },
          "parts": [
            {
              "type": "gapfill",
              "useCustomName": true,
              "customName": "Put the answer input in the middle of a line of text",
              "marks": 0,
              "scripts": {},
              "customMarkingAlgorithm": "",
              "extendBaseMarkingAlgorithm": true,
              "unitTests": [],
              "showCorrectAnswer": true,
              "showFeedbackIcon": true,
              "variableReplacements": [],
              "variableReplacementStrategy": "originalfirst",
              "nextParts": [],
              "suggestGoingBack": false,
              "adaptiveMarkingPenalty": 0,
              "exploreObjective": null,
              "prompt": "<p><em>A common use is to show some text before or after the input.</em></p>\n<p><em>$2x - x = $ [[0]]</em></p>",
              "gaps": [
                {
                  "type": "jme",
                  "useCustomName": true,
                  "customName": "$x$",
                  "marks": 1,
                  "scripts": {},
                  "customMarkingAlgorithm": "",
                  "extendBaseMarkingAlgorithm": true,
                  "unitTests": [],
                  "showCorrectAnswer": true,
                  "showFeedbackIcon": true,
                  "variableReplacements": [],
                  "variableReplacementStrategy": "originalfirst",
                  "nextParts": [],
                  "suggestGoingBack": false,
                  "adaptiveMarkingPenalty": 0,
                  "exploreObjective": null,
                  "answer": "x",
                  "showPreview": true,
                  "checkingType": "absdiff",
                  "checkingAccuracy": 0.001,
                  "failureRate": 1,
                  "vsetRangePoints": 5,
                  "vsetRange": [0, 1],
                  "checkVariableNames": false,
                  "singleLetterVariables": false,
                  "allowUnknownFunctions": true,
                  "implicitFunctionComposition": false,
                  "valuegenerators": [{ "name": "x", "value": "" }]
                }
              ],
              "sortAnswers": false
            },
            {
              "type": "gapfill",
              "useCustomName": true,
              "customName": "An answer in several parts",
              "marks": 0,
              "scripts": {},
              "customMarkingAlgorithm": "",
              "extendBaseMarkingAlgorithm": true,
              "unitTests": [],
              "showCorrectAnswer": true,
              "showFeedbackIcon": true,
              "variableReplacements": [],
              "variableReplacementStrategy": "originalfirst",
              "nextParts": [],
              "suggestGoingBack": false,
              "adaptiveMarkingPenalty": 0,
              "exploreObjective": null,
              "prompt": "<p>On a production line, Person B assembles boxes twice as quickly as Person A. There are 15 boxes to assemble.</p>\n<p>How many boxes does each person assemble?</p>\n<p>Person A assembles [[0]] boxes.</p>\n<p>Person B assembles [[1]] boxes.</p>",
              "gaps": [
                {
                  "type": "numberentry",
                  "useCustomName": true,
                  "customName": "Person A",
                  "marks": 1,
                  "scripts": {},
                  "customMarkingAlgorithm": "",
                  "extendBaseMarkingAlgorithm": true,
                  "unitTests": [],
                  "showCorrectAnswer": true,
                  "showFeedbackIcon": true,
                  "variableReplacements": [],
                  "variableReplacementStrategy": "originalfirst",
                  "nextParts": [],
                  "suggestGoingBack": false,
                  "adaptiveMarkingPenalty": 0,
                  "exploreObjective": null,
                  "minValue": "5",
                  "maxValue": "5",
                  "correctAnswerFraction": false,
                  "allowFractions": false,
                  "mustBeReduced": false,
                  "mustBeReducedPC": 0,
                  "showFractionHint": true,
                  "notationStyles": ["plain", "en", "si-en"],
                  "correctAnswerStyle": "plain"
                },
                {
                  "type": "numberentry",
                  "useCustomName": true,
                  "customName": "Person B",
                  "marks": 1,
                  "scripts": {},
                  "customMarkingAlgorithm": "",
                  "extendBaseMarkingAlgorithm": true,
                  "unitTests": [],
                  "showCorrectAnswer": true,
                  "showFeedbackIcon": true,
                  "variableReplacements": [],
                  "variableReplacementStrategy": "originalfirst",
                  "nextParts": [],
                  "suggestGoingBack": false,
                  "adaptiveMarkingPenalty": 0,
                  "exploreObjective": null,
                  "minValue": "10",
                  "maxValue": "10",
                  "correctAnswerFraction": false,
                  "allowFractions": false,
                  "mustBeReduced": false,
                  "mustBeReducedPC": 0,
                  "showFractionHint": true,
                  "notationStyles": ["plain", "en", "si-en"],
                  "correctAnswerStyle": "plain"
                }
              ],
              "sortAnswers": false
            },
            {
              "type": "gapfill",
              "useCustomName": true,
              "customName": "Gaps in a table",
              "marks": 0,
              "scripts": {},
              "customMarkingAlgorithm": "",
              "extendBaseMarkingAlgorithm": true,
              "unitTests": [],
              "showCorrectAnswer": true,
              "showFeedbackIcon": true,
              "variableReplacements": [],
              "variableReplacementStrategy": "originalfirst",
              "nextParts": [],
              "suggestGoingBack": false,
              "adaptiveMarkingPenalty": 0,
              "exploreObjective": null,
              "prompt": "<p><em>You can insert gaps in a table.</em></p>\n<p>Let $y = 2x$. Fill in the missing values.</p>\n<table>\n<tbody>\n<tr>\n<th>$x$</th>\n<td style=\"text-align: center;\">1</td>\n<td style=\"text-align: center;\">2</td>\n<td style=\"text-align: center;\">3</td>\n</tr>\n<tr>\n<th>$y$</th>\n<td>[[0]]</td>\n<td>[[1]]</td>\n<td>[[2]]</td>\n</tr>\n</tbody>\n</table>",
              "gaps": [
                {
                  "type": "numberentry",
                  "useCustomName": true,
                  "customName": "$y(1)$",
                  "marks": 1,
                  "scripts": {},
                  "customMarkingAlgorithm": "",
                  "extendBaseMarkingAlgorithm": true,
                  "unitTests": [],
                  "showCorrectAnswer": true,
                  "showFeedbackIcon": true,
                  "variableReplacements": [],
                  "variableReplacementStrategy": "originalfirst",
                  "nextParts": [],
                  "suggestGoingBack": false,
                  "adaptiveMarkingPenalty": 0,
                  "exploreObjective": null,
                  "minValue": "2",
                  "maxValue": "2",
                  "correctAnswerFraction": false,
                  "allowFractions": false,
                  "mustBeReduced": false,
                  "mustBeReducedPC": 0,
                  "showFractionHint": true,
                  "notationStyles": ["plain", "en", "si-en"],
                  "correctAnswerStyle": "plain"
                },
                {
                  "type": "numberentry",
                  "useCustomName": true,
                  "customName": "$y(2)$",
                  "marks": 1,
                  "scripts": {},
                  "customMarkingAlgorithm": "",
                  "extendBaseMarkingAlgorithm": true,
                  "unitTests": [],
                  "showCorrectAnswer": true,
                  "showFeedbackIcon": true,
                  "variableReplacements": [],
                  "variableReplacementStrategy": "originalfirst",
                  "nextParts": [],
                  "suggestGoingBack": false,
                  "adaptiveMarkingPenalty": 0,
                  "exploreObjective": null,
                  "minValue": "4",
                  "maxValue": "4",
                  "correctAnswerFraction": false,
                  "allowFractions": false,
                  "mustBeReduced": false,
                  "mustBeReducedPC": 0,
                  "showFractionHint": true,
                  "notationStyles": ["plain", "en", "si-en"],
                  "correctAnswerStyle": "plain"
                },
                {
                  "type": "numberentry",
                  "useCustomName": true,
                  "customName": "$y(3)$",
                  "marks": 1,
                  "scripts": {},
                  "customMarkingAlgorithm": "",
                  "extendBaseMarkingAlgorithm": true,
                  "unitTests": [],
                  "showCorrectAnswer": true,
                  "showFeedbackIcon": true,
                  "variableReplacements": [],
                  "variableReplacementStrategy": "originalfirst",
                  "nextParts": [],
                  "suggestGoingBack": false,
                  "adaptiveMarkingPenalty": 0,
                  "exploreObjective": null,
                  "minValue": "6",
                  "maxValue": "6",
                  "correctAnswerFraction": false,
                  "allowFractions": false,
                  "mustBeReduced": false,
                  "mustBeReducedPC": 0,
                  "showFractionHint": true,
                  "notationStyles": ["plain", "en", "si-en"],
                  "correctAnswerStyle": "plain"
                }
              ],
              "sortAnswers": false
            }
          ],
          "partsMode": "all",
          "maxMarks": 0,
          "objectives": [],
          "penalties": [],
          "objectiveVisibility": "always",
          "penaltyVisibility": "always"
        },
        {
          "name": "Numbas demo: custom marking algorithms",
          "extensions": [],
          "custom_part_types": [],
          "resources": [],
          "navigation": {
            "allowregen": true,
            "showfrontpage": false,
            "preventleave": false
          },
          "contributors": [
            {
              "name": "Christian Lawson-Perfect",
              "profile_url": "https://numbas.mathcentre.ac.uk/accounts/profile/7/"
            },
            {
              "name": "Chris Graham",
              "profile_url": "https://numbas.mathcentre.ac.uk/accounts/profile/369/"
            }
          ],
          "tags": [],
          "metadata": {
            "description": "<p>A demo of how custom marking algorithms can be used to replace the built-in marking methods.</p>",
            "licence": "Creative Commons Attribution 4.0 International"
          },
          "statement": "<p>When the built-in marking algorithm doesn't do what you want, you can write your own, either starting from scratch or extending the built-in method.</p>\n<p><em><a href=\"https://numbas.mathcentre.ac.uk/question/66237/numbas-demo-custom-marking-algorithms/\" target=\"_blank\" rel=\"noopener noreferrer\">See this question on the public editor</a>.</em></p>",
          "advice": "",
          "rulesets": {},
          "variables": {},
          "variablesTest": { "condition": "", "maxRuns": 100 },
          "ungrouped_variables": [],
          "variable_groups": [],
          "functions": {},
          "preamble": { "js": "", "css": "" },
          "parts": [
            {
              "type": "numberentry",
              "useCustomName": true,
              "customName": "Accept any answer with a certain property",
              "marks": "2",
              "scripts": {},
              "customMarkingAlgorithm": "required_factors:\n  [2,3]\n\nsomething:\n  p\n\ndivisible_by_factors:\n  map(\n    if(mod(studentnumber,n)=0,\n      add_credit(1/len(required_factors), \"Your number is divisible by \"+n+\".\"),\n      negative_feedback(\"Your number is not divisible by \"+n+\".\")\n    ),\n    n,\n    required_factors\n  )\n\nmark (Mark the student's answer):\n    apply(validNumber);\n    apply(divisible_by_factors)",
              "extendBaseMarkingAlgorithm": true,
              "unitTests": [],
              "showCorrectAnswer": true,
              "showFeedbackIcon": true,
              "variableReplacements": [],
              "variableReplacementStrategy": "originalfirst",
              "nextParts": [],
              "suggestGoingBack": false,
              "adaptiveMarkingPenalty": 0,
              "exploreObjective": null,
              "prompt": "<p><em>Normally, the number entry part type accepts any number in a given range. In this part, a custom marking algorithm accepts any multiple of 6.</em></p>\n<p>Write a number which is divisible by both 2 and 3.</p>",
              "minValue": "6",
              "maxValue": "6",
              "correctAnswerFraction": false,
              "allowFractions": false,
              "mustBeReduced": false,
              "mustBeReducedPC": 0,
              "showFractionHint": true,
              "notationStyles": ["plain", "en", "si-en"],
              "correctAnswerStyle": "plain"
            },
            {
              "type": "gapfill",
              "useCustomName": true,
              "customName": "Combine the answers from a gap-fill part",
              "marks": 0,
              "scripts": {},
              "customMarkingAlgorithm": "function:\n  interpreted_answers[0]\n\nx_value:\n  interpreted_answers[1]\n\nvalue_at_point:\n  eval(function,[\"x\":x_value])\n\ncorrect_value_at_point:\n  if(value_at_point=9,\n    correct(),\n    incorrect(\"Your function produces the value $\"+value_at_point+\"$ at $x = \"+x_value+\"$.\")\n  )\n\nmark:\n  assert(all_valid, fail(translate(\"question.can not submit\")));\n  apply(correct_value_at_point)",
              "extendBaseMarkingAlgorithm": true,
              "unitTests": [],
              "showCorrectAnswer": true,
              "showFeedbackIcon": true,
              "variableReplacements": [],
              "variableReplacementStrategy": "originalfirst",
              "nextParts": [],
              "suggestGoingBack": false,
              "adaptiveMarkingPenalty": 0,
              "exploreObjective": null,
              "prompt": "<p><em>A custom marking algorithm for a gap-fill part can combine the student's answers to the gaps, which are normally marked individually.</em></p>\n<p>Define a function $f(x)$, and a value of $x$ at which $f(x)=9$.</p>\n<p>$f(x) = $ [[0]]</p>\n<p>$x = $ [[1]]</p>",
              "gaps": [
                {
                  "type": "jme",
                  "useCustomName": true,
                  "customName": "Function definition",
                  "marks": 1,
                  "scripts": {},
                  "customMarkingAlgorithm": "",
                  "extendBaseMarkingAlgorithm": true,
                  "unitTests": [],
                  "showCorrectAnswer": false,
                  "showFeedbackIcon": false,
                  "variableReplacements": [],
                  "variableReplacementStrategy": "originalfirst",
                  "nextParts": [],
                  "suggestGoingBack": false,
                  "adaptiveMarkingPenalty": 0,
                  "exploreObjective": null,
                  "answer": "x",
                  "showPreview": true,
                  "checkingType": "absdiff",
                  "checkingAccuracy": 0.001,
                  "failureRate": 1,
                  "vsetRangePoints": 5,
                  "vsetRange": [0, 1],
                  "checkVariableNames": false,
                  "singleLetterVariables": false,
                  "allowUnknownFunctions": true,
                  "implicitFunctionComposition": false,
                  "valuegenerators": [{ "name": "x", "value": "" }]
                },
                {
                  "type": "numberentry",
                  "useCustomName": true,
                  "customName": "Value of $x$",
                  "marks": 1,
                  "scripts": {},
                  "customMarkingAlgorithm": "",
                  "extendBaseMarkingAlgorithm": true,
                  "unitTests": [],
                  "showCorrectAnswer": false,
                  "showFeedbackIcon": false,
                  "variableReplacements": [],
                  "variableReplacementStrategy": "originalfirst",
                  "nextParts": [],
                  "suggestGoingBack": false,
                  "adaptiveMarkingPenalty": 0,
                  "exploreObjective": null,
                  "minValue": "9",
                  "maxValue": "9",
                  "correctAnswerFraction": false,
                  "allowFractions": false,
                  "mustBeReduced": false,
                  "mustBeReducedPC": 0,
                  "showFractionHint": true,
                  "notationStyles": ["plain", "en", "si-en"],
                  "correctAnswerStyle": "plain"
                }
              ],
              "sortAnswers": false
            }
          ],
          "partsMode": "all",
          "maxMarks": 0,
          "objectives": [],
          "penalties": [],
          "objectiveVisibility": "always",
          "penaltyVisibility": "always"
        },
        {
          "name": "Numbas demo: custom part types",
          "extensions": [],
          "custom_part_types": [
            {
              "source": {
                "pk": 1,
                "author": { "name": "Christian Lawson-Perfect", "pk": 7 },
                "edit_page": "/part_type/1/edit"
              },
              "name": "Yes/no",
              "short_name": "yes-no",
              "description": "<p>The student is shown two radio choices: \"Yes\" and \"No\". One of them is correct.</p>",
              "help_url": "",
              "input_widget": "radios",
              "input_options": {
                "correctAnswer": "if(eval(settings[\"correct_answer_expr\"]), 0, 1)",
                "hint": { "static": true, "value": "" },
                "choices": { "static": true, "value": ["Yes", "No"] }
              },
              "can_be_gap": true,
              "can_be_step": true,
              "marking_script": "mark:\nif(studentanswer=correct_answer,\n  correct(),\n  incorrect()\n)\n\ninterpreted_answer:\nstudentAnswer=0\n\ncorrect_answer:\nif(eval(settings[\"correct_answer_expr\"]),0,1)",
              "marking_notes": [
                {
                  "name": "mark",
                  "description": "This is the main marking note. It should award credit and provide feedback based on the student's answer.",
                  "definition": "if(studentanswer=correct_answer,\n  correct(),\n  incorrect()\n)"
                },
                {
                  "name": "interpreted_answer",
                  "description": "A value representing the student's answer to this part.",
                  "definition": "studentAnswer=0"
                },
                {
                  "name": "correct_answer",
                  "description": "",
                  "definition": "if(eval(settings[\"correct_answer_expr\"]),0,1)"
                }
              ],
              "settings": [
                {
                  "name": "correct_answer_expr",
                  "label": "Is the answer \"Yes\"?",
                  "help_url": "",
                  "hint": "An expression which evaluates to <code>true</code> or <code>false</code>.",
                  "input_type": "mathematical_expression",
                  "default_value": "true",
                  "subvars": false
                }
              ],
              "public_availability": "always",
              "published": true,
              "extensions": []
            },
            {
              "source": {
                "pk": 2,
                "author": { "name": "Christian Lawson-Perfect", "pk": 7 },
                "edit_page": "/part_type/2/edit"
              },
              "name": "List of numbers",
              "short_name": "list-of-numbers",
              "description": "<p>The answer is a comma-separated list of numbers.</p>\n<p>The list is marked correct if each number occurs the same number of times as in the expected answer, and no extra numbers are present.</p>\n<p>You can optionally treat the answer as a set, so the number of occurrences doesn't matter, only whether each number is included or not.</p>",
              "help_url": "",
              "input_widget": "string",
              "input_options": {
                "correctAnswer": "join(\n  if(settings[\"correctAnswerFractions\"],\n    map(let([a,b],rational_approximation(x), string(a/b)),x,settings[\"correctAnswer\"])\n  ,\n    settings[\"correctAnswer\"]\n  ),\n  \", \"\n)",
                "hint": {
                  "static": true,
                  "value": "Enter a list of numbers separated by commas."
                },
                "allowEmpty": { "static": true, "value": false }
              },
              "can_be_gap": true,
              "can_be_step": true,
              "marking_script": "bits:\nlet(b,filter(x<>\"\",x,split(studentAnswer,\",\")),\n    if(isSet,list(set(b)),b)\n)\n\nexpected_numbers:\nlet(l,settings[\"correctAnswer\"] as \"list\",\n    if(isSet,list(set(l)),l)\n)\n\nvalid_numbers:\nif(all(map(not isnan(x),x,interpreted_answer)),\n    true,\n    let(index,filter(isnan(interpreted_answer[x]),x,0..len(interpreted_answer)-1)[0], wrong, bits[index],\n      warn(wrong+\" is not a valid number\");\n      fail(wrong+\" is not a valid number.\")\n    )\n  )\n\nis_sorted:\nassert(sort(interpreted_answer)=interpreted_answer,\n    multiply_credit(0.5,\"Not in order\")\n  )\n\nincluded:\nmap(\n      let(\n        num_student,len(filter(x=y,y,interpreted_answer)),\n        num_expected,len(filter(x=y,y,expected_numbers)),\n        switch(\n          num_student=num_expected,\n            true,\n          num_student<num_expected,\n            incorrect(\n              if(isSet,\"Your answer does not contain \"+x+\" but should.\",\n                \"Your answer does not contain \"+x+\" enough times.\"\n              )\n            );false\n          ,\n            incorrect(\n              if(isSet,\"Your answer contains \"+x+\" but should not.\",\n                \"Your answer contains \"+x+\" too many times.\"\n              )\n            );false\n        )\n      )\n      ,\n      x,\n      sort(list(set(expected_numbers)))\n  )\n\nall_included:\nall(included)\n\nno_extras:\nif(all(map(x in expected_numbers, x, interpreted_answer)),\n    true\n  ,\n    incorrect(\"Your answer contains \"+extra_numbers[0]+\" but should not.\");\n    false\n  )\n\ninterpreted_answer:\nif(lower(studentAnswer) in [\"empty\",\"?\"],[],\n  map(\n    if(settings[\"allowFractions\"],parsenumber_or_fraction(x,notationStyles), parsenumber(x,notationStyles))\n    ,x\n    ,bits\n  )\n)\n\nmark:\nif(studentanswer=\"\",fail(\"You have not entered an answer\"),false);\napply(valid_numbers);\napply(included);\napply(no_extras);\ncorrectif(all_included and no_extras)\n\nnotationStyles:\n[\"en\"]\n\nisSet:\nsettings[\"isSet\"]\n\nextra_numbers:\nfilter(not (x in expected_numbers),x,interpreted_answer)",
              "marking_notes": [
                {
                  "name": "bits",
                  "description": "<p>The separate items in the student's answer</p>",
                  "definition": "let(b,filter(x<>\"\",x,split(studentAnswer,\",\")),\n    if(isSet,list(set(b)),b)\n)"
                },
                {
                  "name": "expected_numbers",
                  "description": "",
                  "definition": "let(l,settings[\"correctAnswer\"] as \"list\",\n    if(isSet,list(set(l)),l)\n)"
                },
                {
                  "name": "valid_numbers",
                  "description": "<p>Is every number in the student's list valid?</p>",
                  "definition": "if(all(map(not isnan(x),x,interpreted_answer)),\n    true,\n    let(index,filter(isnan(interpreted_answer[x]),x,0..len(interpreted_answer)-1)[0], wrong, bits[index],\n      warn(wrong+\" is not a valid number\");\n      fail(wrong+\" is not a valid number.\")\n    )\n  )"
                },
                {
                  "name": "is_sorted",
                  "description": "<p>Are the student's answers in ascending order?</p>",
                  "definition": "assert(sort(interpreted_answer)=interpreted_answer,\n    multiply_credit(0.5,\"Not in order\")\n  )"
                },
                {
                  "name": "included",
                  "description": "<p>Is each number in the expected answer present in the student's list the correct number of times?</p>",
                  "definition": "map(\n      let(\n        num_student,len(filter(x=y,y,interpreted_answer)),\n        num_expected,len(filter(x=y,y,expected_numbers)),\n        switch(\n          num_student=num_expected,\n            true,\n          num_student<num_expected,\n            incorrect(\n              if(isSet,\"Your answer does not contain \"+x+\" but should.\",\n                \"Your answer does not contain \"+x+\" enough times.\"\n              )\n            );false\n          ,\n            incorrect(\n              if(isSet,\"Your answer contains \"+x+\" but should not.\",\n                \"Your answer contains \"+x+\" too many times.\"\n              )\n            );false\n        )\n      )\n      ,\n      x,\n      sort(list(set(expected_numbers)))\n  )"
                },
                {
                  "name": "all_included",
                  "description": "<p>Has every number been included the right number of times?</p>",
                  "definition": "all(included)"
                },
                {
                  "name": "no_extras",
                  "description": "<p>True if the student's list doesn't contain any numbers that aren't in the expected answer.</p>",
                  "definition": "if(all(map(x in expected_numbers, x, interpreted_answer)),\n    true\n  ,\n    incorrect(\"Your answer contains \"+extra_numbers[0]+\" but should not.\");\n    false\n  )"
                },
                {
                  "name": "interpreted_answer",
                  "description": "A value representing the student's answer to this part.",
                  "definition": "if(lower(studentAnswer) in [\"empty\",\"\u2205\"],[],\n  map(\n    if(settings[\"allowFractions\"],parsenumber_or_fraction(x,notationStyles), parsenumber(x,notationStyles))\n    ,x\n    ,bits\n  )\n)"
                },
                {
                  "name": "mark",
                  "description": "This is the main marking note. It should award credit and provide feedback based on the student's answer.",
                  "definition": "if(studentanswer=\"\",fail(\"You have not entered an answer\"),false);\napply(valid_numbers);\napply(included);\napply(no_extras);\ncorrectif(all_included and no_extras)"
                },
                {
                  "name": "notationStyles",
                  "description": "",
                  "definition": "[\"en\"]"
                },
                {
                  "name": "isSet",
                  "description": "<p>Should the answer be considered as a set, so the number of times an element occurs doesn't matter?</p>",
                  "definition": "settings[\"isSet\"]"
                },
                {
                  "name": "extra_numbers",
                  "description": "<p>Numbers included in the student's answer that are not in the expected list.</p>",
                  "definition": "filter(not (x in expected_numbers),x,interpreted_answer)"
                }
              ],
              "settings": [
                {
                  "name": "correctAnswer",
                  "label": "Correct answer",
                  "help_url": "",
                  "hint": "The list of numbers that the student should enter. The order does not matter.",
                  "input_type": "code",
                  "default_value": "",
                  "evaluate": true
                },
                {
                  "name": "allowFractions",
                  "label": "Allow the student to enter fractions?",
                  "help_url": "",
                  "hint": "",
                  "input_type": "checkbox",
                  "default_value": false
                },
                {
                  "name": "correctAnswerFractions",
                  "label": "Display the correct answers as fractions?",
                  "help_url": "",
                  "hint": "",
                  "input_type": "checkbox",
                  "default_value": false
                },
                {
                  "name": "isSet",
                  "label": "Is the answer a set?",
                  "help_url": "",
                  "hint": "If ticked, the number of times an element occurs doesn't matter, only whether it's included at all.",
                  "input_type": "checkbox",
                  "default_value": false
                }
              ],
              "public_availability": "always",
              "published": true,
              "extensions": []
            },
            {
              "source": {
                "pk": 3,
                "author": { "name": "Christian Lawson-Perfect", "pk": 7 },
                "edit_page": "/part_type/3/edit"
              },
              "name": "Give a numerical input for an expression",
              "short_name": "give-a-numerical-input-for-an-expression",
              "description": "<p>The student gives&nbsp;a point $x$ at which to evaluate a given function $f$. The answer is correct if $f(x)$ is the expected value.</p>",
              "help_url": "",
              "input_widget": "number",
              "input_options": {
                "hint": { "static": true, "value": "" },
                "allowFractions": { "static": true, "value": true },
                "correctAnswer": "settings[\"correctAnswer\"]",
                "allowedNotationStyles": {
                  "static": true,
                  "value": ["plain", "en", "si-en"]
                }
              },
              "can_be_gap": true,
              "can_be_step": true,
              "marking_script": "mark:\nif(equal,\n   correct()\n,\n   incorrect(settings[\"student_value_description\"]+\" $\"+student_value+\"$.\")\n)\n\ninterpreted_answer:\nstudentAnswer\n\nstudent_value:\neval(settings[\"expression\"],[\"x\":studentAnswer])\n\nequal:\nwithintolerance(student_value,settings[\"expected_value\"],0.00001)",
              "marking_notes": [
                {
                  "definition": "if(equal,\n   correct()\n,\n   incorrect(settings[\"student_value_description\"]+\" $\"+student_value+\"$.\")\n)",
                  "description": "This is the main marking note. It should award credit and provide feedback based on the student's answer.",
                  "name": "mark"
                },
                {
                  "definition": "studentAnswer",
                  "description": "A value representing the student's answer to this part.",
                  "name": "interpreted_answer"
                },
                {
                  "definition": "eval(settings[\"expression\"],[\"x\":studentAnswer])",
                  "description": "",
                  "name": "student_value"
                },
                {
                  "definition": "withintolerance(student_value,settings[\"expected_value\"],0.00001)",
                  "description": "",
                  "name": "equal"
                }
              ],
              "settings": [
                {
                  "hint": "The value that the function should take at the given point.",
                  "evaluate": true,
                  "label": "Expected value",
                  "input_type": "code",
                  "default_value": "",
                  "help_url": "",
                  "name": "expected_value"
                },
                {
                  "hint": "The value that the student should write.",
                  "label": "Correct answer",
                  "input_type": "string",
                  "default_value": "",
                  "subvars": true,
                  "help_url": "",
                  "name": "correctAnswer"
                },
                {
                  "hint": "",
                  "label": "Description of the student's value",
                  "input_type": "string",
                  "default_value": "The value at your point is",
                  "subvars": true,
                  "help_url": "",
                  "name": "student_value_description"
                },
                {
                  "hint": "The function that will be applied to the student's number.<br />The student's number will be substituted for $x$ in this expression.",
                  "label": "Function to evaluate",
                  "input_type": "mathematical_expression",
                  "default_value": "",
                  "subvars": true,
                  "help_url": "",
                  "name": "expression"
                }
              ],
              "public_availability": "always",
              "published": true,
              "extensions": []
            }
          ],
          "resources": [],
          "navigation": {
            "allowregen": true,
            "showfrontpage": false,
            "preventleave": false
          },
          "contributors": [
            {
              "name": "Christian Lawson-Perfect",
              "profile_url": "https://numbas.mathcentre.ac.uk/accounts/profile/7/"
            }
          ],
          "tags": [],
          "metadata": {
            "description": "<p>A demo of some custom part types.</p>",
            "licence": "Creative Commons Attribution 4.0 International"
          },
          "statement": "<p>Custom part types make it easy to re-use non-standard marking algorithms. A custom part type consists of a list of settings in the editor, an input widget, and a marking algorithm.</p>\n<p><em><a href=\"https://numbas.mathcentre.ac.uk/question/66287/numbas-demo-custom-part-types/\" target=\"_blank\" rel=\"noopener noreferrer\">See this question on the public editor</a>.</em></p>",
          "advice": "",
          "rulesets": {},
          "variables": {},
          "variablesTest": { "condition": "", "maxRuns": 100 },
          "ungrouped_variables": [],
          "variable_groups": [],
          "functions": {},
          "preamble": { "js": "", "css": "" },
          "parts": [
            {
              "type": "yes-no",
              "useCustomName": true,
              "customName": "Yes/no",
              "marks": 1,
              "scripts": {},
              "customMarkingAlgorithm": "",
              "extendBaseMarkingAlgorithm": true,
              "unitTests": [],
              "showCorrectAnswer": true,
              "showFeedbackIcon": true,
              "variableReplacements": [],
              "variableReplacementStrategy": "originalfirst",
              "nextParts": [],
              "suggestGoingBack": false,
              "adaptiveMarkingPenalty": 0,
              "exploreObjective": null,
              "prompt": "<p><em>This part type makes it easy to set up answers where the answer is either \"yes\" or \"no\". The question author specifies which choice is correct, and the student is awarded full credit if they choose the right answer. You could achieve the same thing with a \"choose one from a list\" part, but it would take longer to set up.</em></p>\n<p>Is 7 a prime number?</p>",
              "settings": { "correct_answer_expr": "true" }
            },
            {
              "type": "give-a-numerical-input-for-an-expression",
              "useCustomName": true,
              "customName": "Give a numerical input for an expression",
              "marks": 1,
              "scripts": {},
              "customMarkingAlgorithm": "",
              "extendBaseMarkingAlgorithm": true,
              "unitTests": [],
              "showCorrectAnswer": true,
              "showFeedbackIcon": true,
              "variableReplacements": [],
              "variableReplacementStrategy": "originalfirst",
              "nextParts": [],
              "suggestGoingBack": false,
              "adaptiveMarkingPenalty": 0,
              "exploreObjective": null,
              "prompt": "<p><em>This part type asks the student to write a numerical value which, when substituted into a mathematical expression, produces the desired value. The author provides the expression and the target value.</em></p>\n<p>Find a number $x$ such that $x^2-5x+13 = 7$.</p>\n<p><em>Try <code>1</code>, <code>2</code> and <code>3</code>.</em></p>",
              "settings": {
                "expected_value": "7",
                "correctAnswer": "2",
                "student_value_description": "At your $x$ value, $x^2-5x+13 = $",
                "expression": "x^2-5x+13"
              }
            },
            {
              "type": "list-of-numbers",
              "useCustomName": true,
              "customName": "List of numbers",
              "marks": 1,
              "scripts": {},
              "customMarkingAlgorithm": "",
              "extendBaseMarkingAlgorithm": true,
              "unitTests": [],
              "showCorrectAnswer": true,
              "showFeedbackIcon": true,
              "variableReplacements": [],
              "variableReplacementStrategy": "originalfirst",
              "nextParts": [],
              "suggestGoingBack": false,
              "adaptiveMarkingPenalty": 0,
              "exploreObjective": null,
              "prompt": "<p><em>This part type asks the student for a list of numbers. The question author gives a list of numbers to expect. The student's answer is correct if it includes every item in the expected list the same number of times, and nothing else. The order doesn't matter.<br/></em></p>\n<p>List the factors of 15.</p>\n<p><em>Try <code>1,3,5,15</code> and <code>1,3,5,10,15</code>.</em></p>\n<p></p>",
              "settings": {
                "correctAnswer": "[1,3,5,15]",
                "allowFractions": false,
                "correctAnswerFractions": false
              }
            }
          ],
          "partsMode": "all",
          "maxMarks": 0,
          "objectives": [],
          "penalties": [],
          "objectiveVisibility": "always",
          "penaltyVisibility": "always"
        }
      ]
    },
    {
      "name": "Media",
      "pickingStrategy": "all-ordered",
      "pickQuestions": "1",
      "questionNames": ["Images, videos and interactive diagrams"],
      "questions": [
        {
          "name": "Numbas demo: Images, videos and interactive diagrams",
          "extensions": ["eukleides", "geogebra", "jsxgraph"],
          "custom_part_types": [],
          "resources": [
            [
              "question-resources/Numbat_Face_U5OjlWd.jpg",
              "/srv/numbas/media/question-resources/Numbat_Face_U5OjlWd.jpg"
            ],
            [
              "question-resources/random-numbers_1yehVZF.svg",
              "/srv/numbas/media/question-resources/random-numbers_1yehVZF.svg"
            ]
          ],
          "navigation": {
            "allowregen": true,
            "showfrontpage": false,
            "preventleave": false
          },
          "contributors": [
            {
              "name": "Christian Lawson-Perfect",
              "profile_url": "https://numbas.mathcentre.ac.uk/accounts/profile/7/"
            }
          ],
          "tags": [],
          "metadata": {
            "description": "<p>A demonstration of embedding various kinds of media in a question.</p>",
            "licence": "Creative Commons Attribution 4.0 International"
          },
          "statement": "<p><em>You can include all sorts of images, videos and interactive diagrams in Numbas questions.</em></p>\n<p><em><a href=\"https://numbas.mathcentre.ac.uk/question/65911/numbas-demo-images-videos-and-interactive-diagrams/\" target=\"_blank\" rel=\"noopener noreferrer\">See this question in the public editor</a>.</em></p>",
          "advice": "",
          "rulesets": {
            "std": [
              "all",
              "fractionNumbers",
              "!collectNumbers",
              "!noLeadingMinus"
            ]
          },
          "variables": {
            "mh": {
              "name": "mh",
              "group": "JSXGraph part",
              "definition": "precround(V^2/(2*g),2)",
              "description": "",
              "templateType": "anything"
            },
            "t1": {
              "name": "t1",
              "group": "JSXGraph part",
              "definition": "precround(t,2)",
              "description": "",
              "templateType": "anything"
            },
            "t": {
              "name": "t",
              "group": "JSXGraph part",
              "definition": "V/g",
              "description": "",
              "templateType": "anything"
            },
            "v": {
              "name": "v",
              "group": "JSXGraph part",
              "definition": "random(50..100)",
              "description": "",
              "templateType": "anything"
            },
            "g": {
              "name": "g",
              "group": "JSXGraph part",
              "definition": "9.81",
              "description": "",
              "templateType": "anything"
            },
            "n1": {
              "name": "n1",
              "group": "SVG part",
              "definition": "random(1..99)",
              "description": "",
              "templateType": "anything"
            },
            "n2": {
              "name": "n2",
              "group": "SVG part",
              "definition": "random(1..99)",
              "description": "",
              "templateType": "anything"
            },
            "n3": {
              "name": "n3",
              "group": "SVG part",
              "definition": "random(1..99)",
              "description": "",
              "templateType": "anything"
            },
            "point_a": {
              "name": "point_a",
              "group": "GeoGebra part",
              "definition": "vector(random(0..2#0.1),random(0..2#0.1))",
              "description": "",
              "templateType": "anything"
            },
            "point_b": {
              "name": "point_b",
              "group": "GeoGebra part",
              "definition": "vector(random(2..4#0.1),random(2..4#0.1))",
              "description": "",
              "templateType": "anything"
            },
            "euk_diagram": {
              "name": "euk_diagram",
              "group": "Eukleides part",
              "definition": "eukleides(\"An angle in a circle\",let(\n a, point(0,0),\n r, 2,\n b, point(r*cos(turn), r*sin(turn)),\n c, point(r*cos(angle+turn), r*sin(angle+turn)),\n [\n   circle(a,r) dashed,\n   b..a..c open,\n   angle(b,a,c),\n   center(c..b) label(dpformat(degrees(angle),0)+\"\u00b0\",rad(angle/2+turn),0.15),\n   a,\n   b color1 draggable(\"B\"),\n   c color2 draggable(\"C\",[\"angle\"])\n ]\n),[\"angle\":pi/6,\"turn\":0])",
              "description": "",
              "templateType": "anything"
            }
          },
          "variablesTest": { "condition": "", "maxRuns": "100" },
          "ungrouped_variables": [],
          "variable_groups": [
            { "name": "SVG part", "variables": ["n1", "n2", "n3"] },
            {
              "name": "JSXGraph part",
              "variables": ["g", "mh", "t", "t1", "v"]
            },
            { "name": "GeoGebra part", "variables": ["point_a", "point_b"] },
            { "name": "Eukleides part", "variables": ["euk_diagram"] }
          ],
          "functions": {
            "graphsolution": {
              "parameters": [],
              "type": "html",
              "language": "javascript",
              "definition": "var variables = question.unwrappedVariables;\nvar v = variables.v;\nvar mh = variables.mh;\nvar t = variables.t;\nvar g = variables.g;\n\nvar div = Numbas.extensions.jsxgraph.makeBoard('400px','400px',\n    {boundingBox:[-3,mh+10,2*t+2,-50],\n        axis:false,\n        showNavigation:false,\n        grid:false});\nvar brd = div.board;  \n\nbrd.create('axis',[[0,0],[1,0]], {\n  ticks: {\n    drawLabels: true,\n    label: {offset: [-5, -10]},\n    minorTicks: 0\n  }\n});\nbrd.create('axis',[[0,0],[0,1]], {\n  ticks: {\n    drawLabels: true,\n    label: {offset: [-30, 0]},\n    minorTicks: 0\n  }\n});\nvar origin = brd.create('point',[0,0],{fixed:true,name:'',size:1});\nvar tangent = brd.create('line',[origin,[1,v]],{fixed:true,name:'',dash:2});\n\nvar student_formula;\n//create a functiongraph from the student input\nfunction userf(t){\n    if(student_formula) {\n        try {\n            //the user input is evaluated at x=t\n            var val = scope.evaluate(student_formula,{t:t});\n            if(!jme.isType(val,'number')) {\n              return 0;\n            } else {\n              return jme.castToType(val,'number').value;\n            }\n        }\n        catch(e) {\n            return 0;\n        }\n    }\n    else\n        return 0;\n}\nvar student_curve = brd.create('functiongraph',[userf,0,2*t],{strokeColor:'red',strokeWidth:2});\n\n//pick up the student answer and parse it\nquestion.signals.on('HTMLAttached',function() {\n    var part = question.parts[2].gaps[0];\n  \n    ko.computed(function(){\n        var expr = part.display.studentAnswer();\n        try {\n            student_formula = Numbas.jme.compile(expr);\n        }\n        catch(e) {\n            student_formula = null;\n        }\n        student_curve.updateCurve();\n\n        brd.update();\n    });\n});  \n\nreturn div;"
            }
          },
          "preamble": { "js": "", "css": "" },
          "parts": [
            {
              "type": "information",
              "useCustomName": true,
              "customName": "Images",
              "marks": 0,
              "scripts": {},
              "customMarkingAlgorithm": "",
              "extendBaseMarkingAlgorithm": true,
              "unitTests": [],
              "showCorrectAnswer": true,
              "showFeedbackIcon": true,
              "variableReplacements": [],
              "variableReplacementStrategy": "originalfirst",
              "nextParts": [],
              "suggestGoingBack": false,
              "adaptiveMarkingPenalty": 0,
              "exploreObjective": null,
              "prompt": "<p><em>It's easy to include an image to illustrate your question, or just liven it up.</em></p>\n<p><img src=\"resources/question-resources/Numbat_Face_U5OjlWd.jpg\" style=\"width: 512px; height: 338px;\"/></p>"
            },
            {
              "type": "information",
              "useCustomName": true,
              "customName": "SVG diagram",
              "marks": 0,
              "scripts": {},
              "customMarkingAlgorithm": "",
              "extendBaseMarkingAlgorithm": true,
              "unitTests": [],
              "showCorrectAnswer": true,
              "showFeedbackIcon": true,
              "variableReplacements": [],
              "variableReplacementStrategy": "originalfirst",
              "nextParts": [],
              "suggestGoingBack": false,
              "adaptiveMarkingPenalty": 0,
              "exploreObjective": null,
              "prompt": "<p><em>Diagrams in SVG format are drawn using vectors, so don't become blurry when scaled up.</em></p>\n<p><img src=\"resources/question-resources/random-numbers_1yehVZF.svg\"/></p>"
            },
            {
              "type": "gapfill",
              "useCustomName": true,
              "customName": "JSXGraph",
              "marks": 0,
              "scripts": {},
              "customMarkingAlgorithm": "",
              "extendBaseMarkingAlgorithm": true,
              "unitTests": [],
              "showCorrectAnswer": true,
              "showFeedbackIcon": true,
              "variableReplacements": [],
              "variableReplacementStrategy": "originalfirst",
              "nextParts": [],
              "suggestGoingBack": false,
              "adaptiveMarkingPenalty": 0,
              "exploreObjective": null,
              "prompt": "<p><em>JSXGraph is a package for creating geometric diagrams and charts. You create diagrams using JavaScript code. Question variables can be used to randomise elements of the diagram, and answers to question parts can be linked to elements of the diagram.</em></p>\n<p>{graphsolution()}</p>\n<p>Write a formula for the height $y$ at time $t$ of a projectile launched upwards with a speed of {v} m/s.</p>\n<p>$y=$&nbsp;[[0]]</p>\n<p>Your formula is plotted in the graph above. The&nbsp;vertical axis represents $y$ and the horizontal axis represents $t$.</p>",
              "gaps": [
                {
                  "type": "jme",
                  "useCustomName": false,
                  "customName": "",
                  "marks": 1,
                  "scripts": {},
                  "customMarkingAlgorithm": "",
                  "extendBaseMarkingAlgorithm": true,
                  "unitTests": [],
                  "showCorrectAnswer": true,
                  "showFeedbackIcon": true,
                  "variableReplacements": [],
                  "variableReplacementStrategy": "originalfirst",
                  "nextParts": [],
                  "suggestGoingBack": false,
                  "adaptiveMarkingPenalty": 0,
                  "exploreObjective": null,
                  "alternatives": [
                    {
                      "type": "jme",
                      "useCustomName": true,
                      "customName": "Raw value of g",
                      "marks": "1",
                      "scripts": {},
                      "customMarkingAlgorithm": "",
                      "extendBaseMarkingAlgorithm": true,
                      "unitTests": [],
                      "alternativeFeedbackMessage": "",
                      "useAlternativeFeedback": true,
                      "answer": "{v}t-1/2{g}*t^2",
                      "showPreview": true,
                      "checkingType": "absdiff",
                      "checkingAccuracy": 0.001,
                      "failureRate": 1,
                      "vsetRangePoints": 5,
                      "vsetRange": [0, 1],
                      "checkVariableNames": true,
                      "singleLetterVariables": false,
                      "allowUnknownFunctions": true,
                      "implicitFunctionComposition": false,
                      "valuegenerators": [{ "name": "t", "value": "" }]
                    }
                  ],
                  "answer": "{v}t-1/2g*t^2",
                  "showPreview": true,
                  "checkingType": "absdiff",
                  "checkingAccuracy": 0.001,
                  "failureRate": 1,
                  "vsetRangePoints": 5,
                  "vsetRange": [0, 1],
                  "checkVariableNames": true,
                  "singleLetterVariables": false,
                  "allowUnknownFunctions": true,
                  "implicitFunctionComposition": false,
                  "valuegenerators": [
                    { "name": "g", "value": "" },
                    { "name": "t", "value": "" }
                  ]
                }
              ],
              "sortAnswers": false
            },
            {
              "type": "information",
              "useCustomName": true,
              "customName": "GeoGebra",
              "marks": 0,
              "scripts": {},
              "customMarkingAlgorithm": "",
              "extendBaseMarkingAlgorithm": true,
              "unitTests": [],
              "showCorrectAnswer": true,
              "showFeedbackIcon": true,
              "variableReplacements": [],
              "variableReplacementStrategy": "originalfirst",
              "nextParts": [],
              "suggestGoingBack": false,
              "adaptiveMarkingPenalty": 0,
              "exploreObjective": null,
              "prompt": "<p><em>GeoGebra is an easy-to-use dynamic geometry package. You create diagrams using a graphical interface. Question variables can be used to randomise the elements of a diagram.</em></p>\n<p>{geogebra_applet(\"dw4n67kf\")}</p>"
            },
            {
              "type": "information",
              "useCustomName": true,
              "customName": "Eukleides",
              "marks": 0,
              "scripts": {},
              "customMarkingAlgorithm": "",
              "extendBaseMarkingAlgorithm": true,
              "unitTests": [],
              "showCorrectAnswer": true,
              "showFeedbackIcon": true,
              "variableReplacements": [],
              "variableReplacementStrategy": "originalfirst",
              "nextParts": [],
              "suggestGoingBack": false,
              "adaptiveMarkingPenalty": 0,
              "exploreObjective": null,
              "prompt": "<p><em>The Eukleides extension provides a way of creating diagrams inside Numbas. Diagrams can be drawn based on question variables, and elements can be made draggable or animated.</em></p>\n<p>{max_width(30,euk_diagram)}</p>"
            },
            {
              "type": "information",
              "useCustomName": true,
              "customName": "Video",
              "marks": 0,
              "scripts": {},
              "customMarkingAlgorithm": "",
              "extendBaseMarkingAlgorithm": true,
              "unitTests": [],
              "showCorrectAnswer": true,
              "showFeedbackIcon": true,
              "variableReplacements": [],
              "variableReplacementStrategy": "originalfirst",
              "nextParts": [],
              "suggestGoingBack": false,
              "adaptiveMarkingPenalty": 0,
              "exploreObjective": null,
              "prompt": "<p><em>You can easily embed videos.</em></p>\n<p><iframe width=\"425\" height=\"350\" src=\"//player.vimeo.com/video/8183272?title=0&amp;amp;byline=0\" allowfullscreen=\"allowfullscreen\"></iframe></p>"
            }
          ],
          "partsMode": "all",
          "maxMarks": 0,
          "objectives": [],
          "penalties": [],
          "objectiveVisibility": "always",
          "penaltyVisibility": "always"
        }
      ]
    },
    {
      "name": "Alternative answers",
      "pickingStrategy": "all-ordered",
      "pickQuestions": "1",
      "questionNames": ["Give fewer marks for less accurate answers"],
      "questions": [
        {
          "name": "Numbas demo: alternative answers",
          "extensions": ["stats"],
          "custom_part_types": [],
          "resources": [],
          "navigation": {
            "allowregen": true,
            "showfrontpage": false,
            "preventleave": false
          },
          "contributors": [
            {
              "name": "Christian Lawson-Perfect",
              "profile_url": "http://localhost:8000/accounts/profile/1/"
            },
            {
              "name": "Christian Lawson-Perfect",
              "profile_url": "https://numbas.mathcentre.ac.uk/accounts/profile/7/"
            }
          ],
          "tags": [],
          "metadata": {
            "description": "The student is asked to add two four-digit numbers. Alternative answers are set up with progressively expanding ranges of accepted values, so the student gets more marks for getting closer to the true answer.<br>",
            "licence": "Creative Commons Attribution 4.0 International"
          },
          "statement": "<p>The \"Alternative answers\" feature allows you to set up copies of a part, with different expected answers or settings. Each alternative can award a different number of marks. When the student submits an answer, the alternative that gives the most marks is used, and a feedback message corresponding to that alternative is shown.</p>\n<p>In this question, alternate versions accept ever-wider ranges of numbers around the correct answer, awarding fewer marks for less-precise answers.</p>\n<p><em><a href=\"https://numbas.mathcentre.ac.uk/question/65919/numbas-demo-alternative-answers/\" target=\"_blank\" rel=\"noopener noreferrer\">See this question in the public editor</a>.</em></p>",
          "advice": "",
          "rulesets": {},
          "variables": {
            "a": {
              "name": "a",
              "group": "Ungrouped variables",
              "definition": "random(1001 .. 8888#1)",
              "description": "",
              "templateType": "randrange"
            },
            "b": {
              "name": "b",
              "group": "Ungrouped variables",
              "definition": "random(1001..9999-a)",
              "description": "",
              "templateType": "anything"
            },
            "total": {
              "name": "total",
              "group": "Ungrouped variables",
              "definition": "a+b",
              "description": "",
              "templateType": "anything"
            }
          },
          "variablesTest": { "condition": "", "maxRuns": 100 },
          "ungrouped_variables": ["a", "b", "total"],
          "variable_groups": [],
          "functions": {},
          "preamble": { "js": "", "css": "" },
          "parts": [
            {
              "type": "numberentry",
              "useCustomName": true,
              "customName": "Add two numbers",
              "marks": "5",
              "scripts": {},
              "customMarkingAlgorithm": "",
              "extendBaseMarkingAlgorithm": true,
              "unitTests": [],
              "showCorrectAnswer": true,
              "showFeedbackIcon": true,
              "variableReplacements": [],
              "variableReplacementStrategy": "originalfirst",
              "nextParts": [],
              "suggestGoingBack": false,
              "adaptiveMarkingPenalty": 0,
              "exploreObjective": null,
              "prompt": "<p>Calculate $\\var{a} + \\var{b}$.</p>\n<p><em>(Try getting the answer slightly wrong: you're awarded more marks the closer you get to the correct answer.)</em></p>",
              "alternatives": [
                {
                  "type": "numberentry",
                  "useCustomName": true,
                  "customName": "Within 10",
                  "marks": "4",
                  "scripts": {},
                  "customMarkingAlgorithm": "",
                  "extendBaseMarkingAlgorithm": true,
                  "unitTests": [],
                  "alternativeFeedbackMessage": "<p>You're within 10 of the correct answer.</p>",
                  "useAlternativeFeedback": false,
                  "minValue": "total-10",
                  "maxValue": "total+10",
                  "correctAnswerFraction": false,
                  "allowFractions": false,
                  "mustBeReduced": false,
                  "mustBeReducedPC": 0,
                  "showFractionHint": true,
                  "notationStyles": ["plain", "en", "si-en"],
                  "correctAnswerStyle": "plain"
                },
                {
                  "type": "numberentry",
                  "useCustomName": true,
                  "customName": "Within 100",
                  "marks": "3",
                  "scripts": {},
                  "customMarkingAlgorithm": "",
                  "extendBaseMarkingAlgorithm": true,
                  "unitTests": [],
                  "alternativeFeedbackMessage": "<p>You're within 100 of the correct answer.</p>",
                  "useAlternativeFeedback": false,
                  "minValue": "total-100",
                  "maxValue": "total+100",
                  "correctAnswerFraction": false,
                  "allowFractions": false,
                  "mustBeReduced": false,
                  "mustBeReducedPC": 0,
                  "showFractionHint": true,
                  "notationStyles": ["plain", "en", "si-en"],
                  "correctAnswerStyle": "plain"
                },
                {
                  "type": "numberentry",
                  "useCustomName": true,
                  "customName": "Within 1000",
                  "marks": "1",
                  "scripts": {},
                  "customMarkingAlgorithm": "",
                  "extendBaseMarkingAlgorithm": true,
                  "unitTests": [],
                  "alternativeFeedbackMessage": "<p>You're within 1000 of the correct answer.</p>",
                  "useAlternativeFeedback": false,
                  "minValue": "total-1000",
                  "maxValue": "total+1000",
                  "correctAnswerFraction": false,
                  "allowFractions": false,
                  "mustBeReduced": false,
                  "mustBeReducedPC": 0,
                  "showFractionHint": true,
                  "notationStyles": ["plain", "en", "si-en"],
                  "correctAnswerStyle": "plain"
                }
              ],
              "minValue": "total",
              "maxValue": "total",
              "correctAnswerFraction": false,
              "allowFractions": false,
              "mustBeReduced": false,
              "mustBeReducedPC": 0,
              "showFractionHint": true,
              "notationStyles": ["plain", "en", "si-en"],
              "correctAnswerStyle": "plain"
            }
          ],
          "partsMode": "all",
          "maxMarks": 0,
          "objectives": [],
          "penalties": [],
          "objectiveVisibility": "always",
          "penaltyVisibility": "always"
        }
      ]
    },
    {
      "name": "Explore mode",
      "pickingStrategy": "all-ordered",
      "pickQuestions": "1",
      "questionNames": ["Design a probability experiment"],
      "questions": [
        {
          "name": "Numbas demo: explore mode",
          "extensions": ["stats"],
          "custom_part_types": [
            {
              "source": {
                "pk": 1,
                "author": { "name": "Christian Lawson-Perfect", "pk": 7 },
                "edit_page": "/part_type/1/edit"
              },
              "name": "Yes/no",
              "short_name": "yes-no",
              "description": "<p>The student is shown two radio choices: \"Yes\" and \"No\". One of them is correct.</p>",
              "help_url": "",
              "input_widget": "radios",
              "input_options": {
                "correctAnswer": "if(eval(settings[\"correct_answer_expr\"]), 0, 1)",
                "hint": { "static": true, "value": "" },
                "choices": { "static": true, "value": ["Yes", "No"] }
              },
              "can_be_gap": true,
              "can_be_step": true,
              "marking_script": "mark:\nif(studentanswer=correct_answer,\n  correct(),\n  incorrect()\n)\n\ninterpreted_answer:\nstudentAnswer=0\n\ncorrect_answer:\nif(eval(settings[\"correct_answer_expr\"]),0,1)",
              "marking_notes": [
                {
                  "name": "mark",
                  "description": "This is the main marking note. It should award credit and provide feedback based on the student's answer.",
                  "definition": "if(studentanswer=correct_answer,\n  correct(),\n  incorrect()\n)"
                },
                {
                  "name": "interpreted_answer",
                  "description": "A value representing the student's answer to this part.",
                  "definition": "studentAnswer=0"
                },
                {
                  "name": "correct_answer",
                  "description": "",
                  "definition": "if(eval(settings[\"correct_answer_expr\"]),0,1)"
                }
              ],
              "settings": [
                {
                  "name": "correct_answer_expr",
                  "label": "Is the answer \"Yes\"?",
                  "help_url": "",
                  "hint": "An expression which evaluates to <code>true</code> or <code>false</code>.",
                  "input_type": "mathematical_expression",
                  "default_value": "true",
                  "subvars": false
                }
              ],
              "public_availability": "always",
              "published": true,
              "extensions": []
            }
          ],
          "resources": [],
          "navigation": {
            "allowregen": true,
            "showfrontpage": false,
            "preventleave": false
          },
          "contributors": [
            {
              "name": "Christian Lawson-Perfect",
              "profile_url": "http://localhost:8000/accounts/profile/1/"
            },
            {
              "name": "Christian Lawson-Perfect",
              "profile_url": "https://numbas.mathcentre.ac.uk/accounts/profile/7/"
            }
          ],
          "tags": [],
          "metadata": {
            "description": "An interactive experiment about probability: the student must first 'design' the experiment by deciding how many times they're going to flip a coin, and define what number of heads would make them believe the coin is biased. They must then enter the results of their coin flips, calculate the percentage of heads, and finally decide if the coin is biased, using the condition they specified in the design stage. There are optional hints at each stage.<br>",
            "licence": "Creative Commons Attribution 4.0 International"
          },
          "statement": "<p>Explore mode makes it possible to create open-ended questions, where the student is free to choose their own path.</p>\n<p>In this question, the student is guided through the steps of designing a probability experiment, and then assessed based on the criteria they chose.</p>\n<p><em><a href=\"https://numbas.mathcentre.ac.uk/question/65916/numbas-demo-explore-mode/\" target=\"_blank\" rel=\"noopener noreferrer\">See this question in the public editor</a>.</em></p>",
          "advice": "",
          "rulesets": {},
          "variables": {
            "flips": {
              "name": "flips",
              "group": "Ungrouped variables",
              "definition": "parse_flips(flips_string)",
              "description": "",
              "templateType": "anything"
            },
            "flips_string": {
              "name": "flips_string",
              "group": "Ungrouped variables",
              "definition": "join(repeat(random(\"h\",\"t\"),num_flips),\" \")",
              "description": "",
              "templateType": "anything"
            },
            "num_flips": {
              "name": "num_flips",
              "group": "Ungrouped variables",
              "definition": "100",
              "description": "",
              "templateType": "anything"
            },
            "num_heads": {
              "name": "num_heads",
              "group": "Ungrouped variables",
              "definition": "len(filter(x,x,flips))",
              "description": "",
              "templateType": "anything"
            },
            "num_tails": {
              "name": "num_tails",
              "group": "Ungrouped variables",
              "definition": "len(flips)-num_heads",
              "description": "",
              "templateType": "anything"
            },
            "percent_heads": {
              "name": "percent_heads",
              "group": "Ungrouped variables",
              "definition": "100*num_heads/len(flips)",
              "description": "",
              "templateType": "anything"
            },
            "cleaned_flips_string": {
              "name": "cleaned_flips_string",
              "group": "Ungrouped variables",
              "definition": "join(map(if(x,\"H\",\"T\"),x,flips),\" \")",
              "description": "",
              "templateType": "anything"
            },
            "critical_number": {
              "name": "critical_number",
              "group": "Ungrouped variables",
              "definition": "max(raw_critical_number, num_flips-raw_critical_number)",
              "description": "",
              "templateType": "anything"
            },
            "is_biased": {
              "name": "is_biased",
              "group": "Ungrouped variables",
              "definition": "num_heads>=critical_number or num_tails>=critical_number",
              "description": "",
              "templateType": "anything"
            },
            "raw_critical_number": {
              "name": "raw_critical_number",
              "group": "Ungrouped variables",
              "definition": "60",
              "description": "",
              "templateType": "anything"
            },
            "critical_likelihood": {
              "name": "critical_likelihood",
              "group": "Ungrouped variables",
              "definition": "critical_number/num_flips",
              "description": "",
              "templateType": "anything"
            }
          },
          "variablesTest": { "condition": "", "maxRuns": 100 },
          "ungrouped_variables": [
            "num_flips",
            "raw_critical_number",
            "critical_number",
            "flips_string",
            "flips",
            "num_heads",
            "num_tails",
            "percent_heads",
            "cleaned_flips_string",
            "is_biased",
            "critical_likelihood"
          ],
          "variable_groups": [],
          "functions": {
            "parse_flips": {
              "parameters": [["s", "string"]],
              "type": "list",
              "language": "javascript",
              "definition": "s = s.toLowerCase().replace(/[^ht]/g,'');\nreturn s.split('').map(function(c) { return new Numbas.jme.types.TBool(c=='h'); });"
            }
          },
          "preamble": { "js": "", "css": "" },
          "parts": [
            {
              "type": "information",
              "useCustomName": true,
              "customName": "Introduction",
              "marks": 0,
              "scripts": {},
              "customMarkingAlgorithm": "",
              "extendBaseMarkingAlgorithm": true,
              "unitTests": [],
              "showCorrectAnswer": true,
              "showFeedbackIcon": true,
              "variableReplacements": [],
              "variableReplacementStrategy": "originalfirst",
              "nextParts": [
                {
                  "label": "Decide number of flips",
                  "rawLabel": "",
                  "otherPart": 1,
                  "variableReplacements": [],
                  "availabilityCondition": "",
                  "penalty": "",
                  "penaltyAmount": 0,
                  "lockAfterLeaving": false
                }
              ],
              "suggestGoingBack": false,
              "adaptiveMarkingPenalty": 0,
              "exploreObjective": null,
              "prompt": "<p>In this exercise you will decide if a coin is biased by flipping it repeatedly and deciding if it lands heads more often than you'd expect.</p>"
            },
            {
              "type": "numberentry",
              "useCustomName": true,
              "customName": "Decide number of flips",
              "marks": "1",
              "scripts": {},
              "customMarkingAlgorithm": "",
              "extendBaseMarkingAlgorithm": true,
              "unitTests": [],
              "showCorrectAnswer": false,
              "showFeedbackIcon": false,
              "variableReplacements": [],
              "variableReplacementStrategy": "originalfirst",
              "nextParts": [
                {
                  "label": "Define 'biased'",
                  "rawLabel": "",
                  "otherPart": 2,
                  "variableReplacements": [
                    {
                      "variable": "num_flips",
                      "definition": "interpreted_answer"
                    }
                  ],
                  "availabilityCondition": "answered",
                  "penalty": "",
                  "penaltyAmount": 0,
                  "lockAfterLeaving": false
                }
              ],
              "suggestGoingBack": false,
              "adaptiveMarkingPenalty": 0,
              "exploreObjective": "Design the experiment",
              "prompt": "<p>How many times will you flip your coin?</p>",
              "minValue": "1",
              "maxValue": "infinity",
              "correctAnswerFraction": false,
              "allowFractions": false,
              "mustBeReduced": false,
              "mustBeReducedPC": 0,
              "showFractionHint": true,
              "notationStyles": ["plain", "en", "si-en"],
              "correctAnswerStyle": "plain"
            },
            {
              "type": "numberentry",
              "useCustomName": true,
              "customName": "Define 'biased'",
              "marks": 1,
              "scripts": {},
              "customMarkingAlgorithm": "",
              "extendBaseMarkingAlgorithm": true,
              "unitTests": [],
              "showCorrectAnswer": false,
              "showFeedbackIcon": false,
              "variableReplacements": [],
              "variableReplacementStrategy": "originalfirst",
              "nextParts": [
                {
                  "label": "Enter data",
                  "rawLabel": "",
                  "otherPart": 4,
                  "variableReplacements": [
                    {
                      "variable": "raw_critical_number",
                      "definition": "interpreted_answer"
                    }
                  ],
                  "availabilityCondition": "answered and credit=1",
                  "penalty": "",
                  "penaltyAmount": 0,
                  "lockAfterLeaving": false
                },
                {
                  "label": "What do you expect an unbiased coin do?",
                  "rawLabel": "",
                  "otherPart": 3,
                  "variableReplacements": [],
                  "availabilityCondition": "not (answered or credit=1)",
                  "penalty": "",
                  "penaltyAmount": 0,
                  "lockAfterLeaving": false
                }
              ],
              "suggestGoingBack": false,
              "adaptiveMarkingPenalty": 0,
              "exploreObjective": "Design the experiment",
              "prompt": "<p>How many heads would make you think the coin is biased?</p>",
              "minValue": "0",
              "maxValue": "100",
              "correctAnswerFraction": false,
              "allowFractions": false,
              "mustBeReduced": false,
              "mustBeReducedPC": 0,
              "showFractionHint": true,
              "notationStyles": ["plain", "en", "si-en"],
              "correctAnswerStyle": "plain"
            },
            {
              "type": "numberentry",
              "useCustomName": true,
              "customName": "What do you expect an unbiased coin do?",
              "marks": 1,
              "scripts": {},
              "customMarkingAlgorithm": "",
              "extendBaseMarkingAlgorithm": true,
              "unitTests": [],
              "showCorrectAnswer": true,
              "showFeedbackIcon": true,
              "variableReplacements": [],
              "variableReplacementStrategy": "originalfirst",
              "nextParts": [],
              "suggestGoingBack": true,
              "adaptiveMarkingPenalty": 0,
              "exploreObjective": null,
              "prompt": "<p>With an unbiased coin, how many flips would you expect to land heads up?</p>",
              "minValue": "num_flips/2-0.5",
              "maxValue": "num_flips/2+0.5",
              "correctAnswerFraction": false,
              "allowFractions": false,
              "mustBeReduced": false,
              "mustBeReducedPC": 0,
              "showFractionHint": true,
              "notationStyles": ["plain", "en", "si-en"],
              "correctAnswerStyle": "plain"
            },
            {
              "type": "patternmatch",
              "useCustomName": true,
              "customName": "Enter data",
              "marks": "1",
              "scripts": {},
              "customMarkingAlgorithm": "right_length:\n  if(len(parse_flips(studentAnswer))=num_flips,\n    correct(\"You have entered your data correctly.\"),\n    incorrect(\"You have not entered the right number of flips.\")\n  )\n\nmark:\n  apply(right_length)\n",
              "extendBaseMarkingAlgorithm": true,
              "unitTests": [],
              "showCorrectAnswer": false,
              "showFeedbackIcon": true,
              "variableReplacements": [],
              "variableReplacementStrategy": "originalfirst",
              "nextParts": [
                {
                  "label": "Calculate proportion of heads",
                  "rawLabel": "",
                  "otherPart": 5,
                  "variableReplacements": [
                    {
                      "variable": "flips_string",
                      "definition": "interpreted_answer"
                    }
                  ],
                  "availabilityCondition": "answered",
                  "penalty": "",
                  "penaltyAmount": 0,
                  "lockAfterLeaving": false
                }
              ],
              "suggestGoingBack": false,
              "adaptiveMarkingPenalty": 0,
              "exploreObjective": "Enter data",
              "prompt": "<p>Flip the coin {num_flips} times. Each time it lands heads, write an H in the box below. Each time it lands tails, write a T.</p>",
              "answer": "[, hHtT]*",
              "displayAnswer": "",
              "matchMode": "regex"
            },
            {
              "type": "numberentry",
              "useCustomName": true,
              "customName": "Calculate proportion of heads",
              "marks": "2",
              "scripts": {},
              "customMarkingAlgorithm": "",
              "extendBaseMarkingAlgorithm": true,
              "unitTests": [],
              "showCorrectAnswer": true,
              "showFeedbackIcon": true,
              "variableReplacements": [],
              "variableReplacementStrategy": "originalfirst",
              "nextParts": [
                {
                  "label": "Show frequencies of heads and tails",
                  "rawLabel": "",
                  "otherPart": 6,
                  "variableReplacements": [],
                  "availabilityCondition": "not (answered and credit=1)",
                  "penalty": "Showed frequencies of heads and tails",
                  "penaltyAmount": "1",
                  "lockAfterLeaving": false
                },
                {
                  "label": "Is the coin biased?",
                  "rawLabel": "",
                  "otherPart": 7,
                  "variableReplacements": [],
                  "availabilityCondition": "answered",
                  "penalty": "",
                  "penaltyAmount": 0,
                  "lockAfterLeaving": false
                }
              ],
              "suggestGoingBack": false,
              "adaptiveMarkingPenalty": 0,
              "exploreObjective": "Calculate proportion of heads",
              "prompt": "<p>Your flips were:</p>\n<p>{cleaned_flips_string}</p>\n<p>What percentage of the flips landed heads?</p>",
              "minValue": "percent_heads",
              "maxValue": "percent_heads",
              "correctAnswerFraction": false,
              "allowFractions": false,
              "mustBeReduced": false,
              "mustBeReducedPC": 0,
              "precisionType": "dp",
              "precision": 0,
              "precisionPartialCredit": 0,
              "precisionMessage": "You have not given your answer to the correct precision.",
              "strictPrecision": false,
              "showPrecisionHint": true,
              "notationStyles": ["plain", "en", "si-en"],
              "correctAnswerStyle": "plain"
            },
            {
              "type": "information",
              "useCustomName": true,
              "customName": "Show frequencies of heads and tails",
              "marks": 0,
              "scripts": {},
              "customMarkingAlgorithm": "",
              "extendBaseMarkingAlgorithm": true,
              "unitTests": [],
              "showCorrectAnswer": true,
              "showFeedbackIcon": true,
              "variableReplacements": [],
              "variableReplacementStrategy": "originalfirst",
              "nextParts": [],
              "suggestGoingBack": true,
              "adaptiveMarkingPenalty": 0,
              "exploreObjective": null,
              "prompt": "<table>\n<tbody>\n<tr>\n<td>Result</td>\n<td>Heads</td>\n<td>Tails</td>\n</tr>\n<tr>\n<td>Frequency</td>\n<td>{num_heads}</td>\n<td>{num_tails}</td>\n</tr>\n</tbody>\n</table>"
            },
            {
              "type": "yes-no",
              "useCustomName": true,
              "customName": "Is the coin biased?",
              "marks": "5",
              "scripts": {},
              "customMarkingAlgorithm": "",
              "extendBaseMarkingAlgorithm": true,
              "unitTests": [],
              "showCorrectAnswer": true,
              "showFeedbackIcon": true,
              "variableReplacements": [],
              "variableReplacementStrategy": "originalfirst",
              "nextParts": [
                {
                  "label": "Calculate the critical likelihood",
                  "rawLabel": "",
                  "otherPart": 8,
                  "variableReplacements": [],
                  "availabilityCondition": "not (answered and credit=1)",
                  "penalty": "Hint about critical likelihood",
                  "penaltyAmount": "1",
                  "lockAfterLeaving": false
                }
              ],
              "suggestGoingBack": false,
              "adaptiveMarkingPenalty": 0,
              "exploreObjective": "Decide if the coin is biased",
              "prompt": "<p>Do you think your coin is biased?</p>",
              "settings": { "correct_answer_expr": "is_biased" }
            },
            {
              "type": "numberentry",
              "useCustomName": true,
              "customName": "Calculate the critical likelihood",
              "marks": 1,
              "scripts": {},
              "customMarkingAlgorithm": "",
              "extendBaseMarkingAlgorithm": true,
              "unitTests": [],
              "showCorrectAnswer": true,
              "showFeedbackIcon": true,
              "variableReplacements": [],
              "variableReplacementStrategy": "originalfirst",
              "nextParts": [],
              "suggestGoingBack": true,
              "adaptiveMarkingPenalty": 0,
              "exploreObjective": "Decide if the coin is biased",
              "prompt": "<p>You said that a coin is biased if it comes up heads at least {critical_number} times out of {num_flips}. What's that as a percentage?</p>",
              "minValue": "100*critical_likelihood",
              "maxValue": "100*critical_likelihood",
              "correctAnswerFraction": false,
              "allowFractions": false,
              "mustBeReduced": false,
              "mustBeReducedPC": 0,
              "precisionType": "dp",
              "precision": 0,
              "precisionPartialCredit": "100",
              "precisionMessage": "",
              "strictPrecision": false,
              "showPrecisionHint": true,
              "notationStyles": ["plain", "en", "si-en"],
              "correctAnswerStyle": "plain"
            }
          ],
          "partsMode": "explore",
          "maxMarks": 0,
          "objectives": [
            {
              "name": "Calculate proportion of heads",
              "limit": "2",
              "mode": "sum"
            },
            {
              "name": "Decide if the coin is biased",
              "limit": "5",
              "mode": "sum"
            },
            { "name": "Design the experiment", "limit": "2", "mode": "sum" },
            { "name": "Enter data", "limit": "1", "mode": "sum" }
          ],
          "penalties": [
            {
              "name": "Showed frequencies of heads and tails",
              "limit": "1",
              "mode": "sum"
            },
            {
              "name": "Hint about critical likelihood",
              "limit": "1",
              "mode": "sum"
            }
          ],
          "objectiveVisibility": "when-active",
          "penaltyVisibility": "when-active"
        }
      ]
    },
    {
      "name": "Adaptive marking",
      "pickingStrategy": "all-ordered",
      "pickQuestions": "1",
      "questionNames": [
        "Account for an incorrect answer earlier in the question"
      ],
      "questions": [
        {
          "name": "Numbas demo: adaptive marking",
          "extensions": [],
          "custom_part_types": [],
          "resources": [],
          "navigation": {
            "allowregen": true,
            "showfrontpage": false,
            "preventleave": false
          },
          "contributors": [
            {
              "name": "Christian Lawson-Perfect",
              "profile_url": "https://numbas.mathcentre.ac.uk/accounts/profile/7/"
            }
          ],
          "tags": [],
          "metadata": {
            "description": "<p>Demonstration of adaptive marking: the student must first add up the number of apples to buy, then work out how much that would cost. Adaptive marking carries an incorrect number of apples into the cost calculation.</p>",
            "licence": "Creative Commons Attribution 4.0 International"
          },
          "statement": "<p>Adaptive marking allows you to apply 'error-carried-forward' marking, or to base the answers for a question on data entered by the student at the start.</p>\n<p>In this question, adaptive marking can use the number of apples the student gives in the first part to work out the total cost in the second part.</p>\n<p><em><a href=\"https://numbas.mathcentre.ac.uk/question/65915/adaptive-marking-buying-apples/\" target=\"_blank\" rel=\"noopener noreferrer\">See this question in the public editor</a>.</em></p>",
          "advice": "",
          "rulesets": {},
          "variables": {
            "apples_to_buy": {
              "name": "apples_to_buy",
              "group": "Ungrouped variables",
              "definition": "a_apples + b_apples",
              "description": "",
              "templateType": "anything"
            },
            "a_apples": {
              "name": "a_apples",
              "group": "Ungrouped variables",
              "definition": "random(2 .. 5#1)",
              "description": "",
              "templateType": "randrange"
            },
            "b_apples": {
              "name": "b_apples",
              "group": "Ungrouped variables",
              "definition": "random(2 .. 5#1)",
              "description": "",
              "templateType": "randrange"
            },
            "cost_per_apple": {
              "name": "cost_per_apple",
              "group": "Ungrouped variables",
              "definition": "1.1",
              "description": "",
              "templateType": "anything"
            },
            "total_cost": {
              "name": "total_cost",
              "group": "Ungrouped variables",
              "definition": "cost_per_apple * apples_to_buy",
              "description": "",
              "templateType": "anything"
            }
          },
          "variablesTest": { "condition": "", "maxRuns": 100 },
          "ungrouped_variables": [
            "a_apples",
            "b_apples",
            "apples_to_buy",
            "cost_per_apple",
            "total_cost"
          ],
          "variable_groups": [],
          "functions": {},
          "preamble": { "js": "", "css": "" },
          "parts": [
            {
              "type": "numberentry",
              "useCustomName": true,
              "customName": "How many apples to buy",
              "marks": 1,
              "scripts": {},
              "customMarkingAlgorithm": "",
              "extendBaseMarkingAlgorithm": true,
              "unitTests": [],
              "showCorrectAnswer": true,
              "showFeedbackIcon": true,
              "variableReplacements": [],
              "variableReplacementStrategy": "originalfirst",
              "nextParts": [],
              "suggestGoingBack": false,
              "adaptiveMarkingPenalty": 0,
              "exploreObjective": null,
              "prompt": "<p>My family wants {a_apples} bags of apples and my friend wants {b_apples} bags of apples. How many bags of apples should I buy?</p>",
              "minValue": "apples_to_buy",
              "maxValue": "apples_to_buy",
              "correctAnswerFraction": false,
              "allowFractions": false,
              "mustBeReduced": false,
              "mustBeReducedPC": 0,
              "showFractionHint": true,
              "notationStyles": ["plain", "en", "si-en"],
              "correctAnswerStyle": "plain"
            },
            {
              "type": "gapfill",
              "useCustomName": true,
              "customName": "Total cost",
              "marks": 0,
              "scripts": {},
              "customMarkingAlgorithm": "",
              "extendBaseMarkingAlgorithm": true,
              "unitTests": [],
              "showCorrectAnswer": true,
              "showFeedbackIcon": true,
              "variableReplacements": [],
              "variableReplacementStrategy": "originalfirst",
              "nextParts": [],
              "suggestGoingBack": false,
              "adaptiveMarkingPenalty": 0,
              "exploreObjective": null,
              "prompt": "<p>One bag of apples costs {currency(cost_per_apple,\"&pound;\",\"p\")}. How much will I spend?</p>\n<p>&pound; [[0]]</p>",
              "gaps": [
                {
                  "type": "numberentry",
                  "useCustomName": false,
                  "customName": "",
                  "marks": 1,
                  "scripts": {},
                  "customMarkingAlgorithm": "",
                  "extendBaseMarkingAlgorithm": true,
                  "unitTests": [],
                  "showCorrectAnswer": true,
                  "showFeedbackIcon": true,
                  "variableReplacements": [
                    {
                      "variable": "apples_to_buy",
                      "part": "p0",
                      "must_go_first": false
                    }
                  ],
                  "variableReplacementStrategy": "originalfirst",
                  "nextParts": [],
                  "suggestGoingBack": false,
                  "adaptiveMarkingPenalty": 0,
                  "exploreObjective": null,
                  "minValue": "total_cost",
                  "maxValue": "total_cost",
                  "correctAnswerFraction": false,
                  "allowFractions": false,
                  "mustBeReduced": false,
                  "mustBeReducedPC": 0,
                  "showFractionHint": true,
                  "notationStyles": ["plain", "en", "si-en"],
                  "correctAnswerStyle": "plain"
                }
              ],
              "sortAnswers": false
            }
          ],
          "partsMode": "all",
          "maxMarks": 0,
          "objectives": [],
          "penalties": [],
          "objectiveVisibility": "always",
          "penaltyVisibility": "always"
        }
      ]
    },
    {
      "name": "Extensions",
      "pickingStrategy": "all-ordered",
      "pickQuestions": "1",
      "questionNames": ["Random people", "Quantities with units"],
      "questions": [
        {
          "name": "Numbas demo: random person extension",
          "extensions": ["random_person"],
          "custom_part_types": [],
          "resources": [],
          "navigation": {
            "allowregen": true,
            "showfrontpage": false,
            "preventleave": false
          },
          "contributors": [
            {
              "name": "Christian Lawson-Perfect",
              "profile_url": "https://numbas.mathcentre.ac.uk/accounts/profile/7/"
            },
            {
              "name": "Elliott Fletcher",
              "profile_url": "https://numbas.mathcentre.ac.uk/accounts/profile/1591/"
            }
          ],
          "tags": [],
          "metadata": {
            "description": "<p>A demonstration of the random person extension, which picks representative names of people.</p>",
            "licence": "Creative Commons Attribution 4.0 International"
          },
          "statement": "<p>When writing word problems, it's good to ensure a fair balance of gender and other characteristics in named characters. The 'random person' extension makes this easy.</p>\n<p><a href=\"https://numbas.mathcentre.ac.uk/question/65912/numbas-demo-random-person-extension/\" target=\"_blank\" rel=\"noopener noreferrer\"><em>See this question in the public editor</em>.</a></p>",
          "advice": "<p>We are told that {name} gets paid a total of&nbsp;$&pound;\\var{payment}$&nbsp;at the end of {their} summer job and that {they} work{s} at {their} job for $\\var{weeks}$ weeks.</p>\n<p>To calculate the amount of money {name} gets paid per week, we divide the total amount of money that {they} earn{s} at the end of {their} job by how many weeks that {they} work{s} for.</p>\n<p>\\[&pound;\\displaystyle\\frac{\\var{payment}}{\\var{weeks}} = &pound;\\var{{payment/weeks}}.\\]</p>\n<p>Therefore {name} gets paid $&pound;\\var{{payment/weeks}}$/week.</p>\n<p>Note that in compound measures, a forward slash symbol / is often used instead of the word 'per'. So $&pound;\\var{{payment/weeks}}$/week means the same as $&pound;\\var{{payment/weeks}}$ per week.</p>",
          "rulesets": {},
          "variables": {
            "person": {
              "name": "person",
              "group": "A person",
              "definition": "random_person()",
              "description": "<p>A random person</p>",
              "templateType": "anything"
            },
            "weeks": {
              "name": "weeks",
              "group": "Ungrouped variables",
              "definition": "random(5,8)",
              "description": "<p>Number of weeks person works for</p>",
              "templateType": "anything"
            },
            "payment": {
              "name": "payment",
              "group": "Ungrouped variables",
              "definition": "random(1400,1600,1800)",
              "description": "<p>amount person gets paid</p>",
              "templateType": "anything"
            },
            "name": {
              "name": "name",
              "group": "A person",
              "definition": "person[\"name\"]",
              "description": "",
              "templateType": "anything"
            },
            "they": {
              "name": "they",
              "group": "A person",
              "definition": "person[\"pronouns\"][\"they\"]",
              "description": "",
              "templateType": "anything"
            },
            "their": {
              "name": "their",
              "group": "A person",
              "definition": "person[\"pronouns\"][\"their\"]",
              "description": "",
              "templateType": "anything"
            },
            "theirs": {
              "name": "theirs",
              "group": "A person",
              "definition": "person[\"pronouns\"][\"theirs\"]",
              "description": "",
              "templateType": "anything"
            },
            "s": {
              "name": "s",
              "group": "A person",
              "definition": "if(person[\"gender\"]=\"neutral\",\"\",\"s\")",
              "description": "",
              "templateType": "anything"
            }
          },
          "variablesTest": { "condition": "", "maxRuns": 100 },
          "ungrouped_variables": ["payment", "weeks"],
          "variable_groups": [
            {
              "name": "A person",
              "variables": ["person", "name", "they", "their", "theirs", "s"]
            }
          ],
          "functions": {},
          "preamble": { "js": "", "css": "" },
          "parts": [
            {
              "type": "gapfill",
              "useCustomName": false,
              "customName": "",
              "marks": 0,
              "scripts": {},
              "customMarkingAlgorithm": "",
              "extendBaseMarkingAlgorithm": true,
              "unitTests": [],
              "showCorrectAnswer": true,
              "showFeedbackIcon": true,
              "variableReplacements": [],
              "variableReplacementStrategy": "originalfirst",
              "nextParts": [],
              "suggestGoingBack": false,
              "adaptiveMarkingPenalty": 0,
              "exploreObjective": null,
              "prompt": "<p>{name} gets paid a total of&nbsp;$&pound;\\var{payment}$&nbsp;at the end of {their} summer job; {they} work{s} for $\\var{weeks}$ weeks.</p>\n<p>How much does {name} get paid per week?</p>\n<p>&pound;[[0]]/week</p>",
              "gaps": [
                {
                  "type": "numberentry",
                  "useCustomName": false,
                  "customName": "",
                  "marks": 1,
                  "scripts": {},
                  "customMarkingAlgorithm": "",
                  "extendBaseMarkingAlgorithm": true,
                  "unitTests": [],
                  "showCorrectAnswer": true,
                  "showFeedbackIcon": true,
                  "variableReplacements": [],
                  "variableReplacementStrategy": "originalfirst",
                  "nextParts": [],
                  "suggestGoingBack": false,
                  "adaptiveMarkingPenalty": 0,
                  "exploreObjective": null,
                  "minValue": "{payment}/{weeks}",
                  "maxValue": "{payment}/{weeks}",
                  "correctAnswerFraction": false,
                  "allowFractions": false,
                  "mustBeReduced": false,
                  "mustBeReducedPC": 0,
                  "showFractionHint": true,
                  "notationStyles": ["plain", "en", "si-en"],
                  "correctAnswerStyle": "plain"
                }
              ],
              "sortAnswers": false
            }
          ],
          "partsMode": "all",
          "maxMarks": 0,
          "objectives": [],
          "penalties": [],
          "objectiveVisibility": "always",
          "penaltyVisibility": "always"
        },
        {
          "name": "Numbas demo: quantities with units",
          "extensions": ["quantities"],
          "custom_part_types": [
            {
              "source": {
                "pk": 7,
                "author": { "name": "Christian Lawson-Perfect", "pk": 7 },
                "edit_page": "/part_type/7/edit"
              },
              "name": "Quantity with units",
              "short_name": "quantity",
              "description": "<p>The student enters a quantity with units.</p>",
              "help_url": "https://github.com/numbas/numbas-extension-quantities",
              "input_widget": "string",
              "input_options": {
                "correctAnswer": "plain_string(settings[\"correctAnswer\"])",
                "hint": {
                  "static": false,
                  "value": "switch(\n  settings[\"hint\"]=\"remind units\",\n    \"Include units in your answer.\",\n  settings[\"hint\"]=\"show units\",\n    \"Give your answer in \"+units_string(settings[\"correctAnswer\"])\n  ,\n    \"\"\n)"
                },
                "allowEmpty": { "static": true, "value": false }
              },
              "can_be_gap": true,
              "can_be_step": true,
              "marking_script": "mark:\napply(valid_number);\napply(student_quantity);\napply(has_units);\napply(compatible);\ntry(\n  correctif(close_enough),\n  x,\n  apply(student_quantity)\n);\napply(same_units)\n\ninterpreted_answer:\nstudent_quantity\n\nallowed_notation_styles:\n[\"plain\",\"en\"]\n\nmatch_student_number:\nmatchnumber(studentAnswer,allowed_notation_styles)\n\nstudent_number:\nmatch_student_number[1]\n\nraw_student_units:\ntry(\n  quantity(studentAnswer[len(match_student_number[0])..len(studentAnswer)]),\n  message,\n  warn(\"Your answer is not a valid quantity.\");\n  fail(\"Your answer is not a valid quantity.\")\n)\n\nstudent_units:\nif(compatible(raw_student_units,correct_units) or settings[\"incompatible_units_action\"]<>\"convert\",\n  raw_student_units,\n  correct_units\n)\n\nstudent_quantity:\napply(student_units);\ntry(\n  student_number * student_units,\n  message,\n  warn(\"Your answer is not a valid quantity.\");\n  fail(\"Your answer is not a valid quantity.\")\n)\n\ncorrect_quantity:\nsettings[\"correctAnswer\"]\n\ncompatible:\nif(compatible(raw_student_units,correct_quantity),\n  true\n,\n  let(message,\"Your answer does not have the correct dimensions.\",\n    if(settings[\"incompatible_units_action\"]=\"prevent\",\n      warn(message);\n      fail(message)\n    ,\n      if(settings[\"incompatible_units_action\"]=\"convert\",\n        incorrect(\"Your answer does not have the correct dimensions. It will be marked as if the correct dimensions were used, and then a penalty will be applied.\")\n        ,\n        incorrect(\"Your answer does not have the correct dimensions.\");\n        end()\n      )\n    );\n    false\n  )\n)\n\ncorrect_units:\nunits(correct_quantity)\n\nsame_units:\nassert(raw_student_units=correct_units,\n  let(\n    message,if(settings[\"hint\"]=\"show units\",\"You did not give your answer in \"+units_string(correct_units)+\".\", \"Your answer is not in the expected units.\"),\n  switch(\n    settings[\"different_units_action\"]=\"prevent\",\n      warn(message);\n      fail(message)\n    ,\n    settings[\"different_units_action\"]=\"incorrect\",\n      incorrect(message); \n      warn(message);\n      end()\n    ,\n    settings[\"different_units_action\"]=\"warn\",\n      warn(message);\n      multiply_credit(1-settings[\"different_units_penalty\"],message)\n    ,\n    settings[\"different_units_penalty\"]<1,\n      multiply_credit(1-settings[\"different_units_penalty\"],message)\n    ,\n      false\n  )\n  );\n  false\n)\n\nhas_units:\nassert(not unitless(student_quantity),\n  assert(settings[\"allow_unitless\"],\n    warn(\"You must include the units in your answer.\");\n    fail(\"You did not include units in your answer.\")\n  )\n)\n\ncan_compare:\ncompatible or settings[\"incompatible_units_action\"]=\"convert\"\n\nclose_enough:\nif(can_compare,\n   student_quantity>=correct_quantity - wiggle \n   and \n   student_quantity<=correct_quantity + wiggle \n,\n   false\n)\n\nwiggle:\nunits(correct_quantity)*abs(eval(settings[\"wiggle\"]))\n\nvalid_number:\nif(isNaN(student_number),\n   warn(translate(\"part.numberentry.answer invalid\"));\n   fail(translate(\"part.numberentry.answer invalid\"))\n,\n  true\n  )",
              "marking_notes": [
                {
                  "name": "mark",
                  "description": "This is the main marking note. It should award credit and provide feedback based on the student's answer.",
                  "definition": "apply(valid_number);\napply(student_quantity);\napply(has_units);\napply(compatible);\ntry(\n  correctif(close_enough),\n  x,\n  apply(student_quantity)\n);\napply(same_units)"
                },
                {
                  "name": "interpreted_answer",
                  "description": "A value representing the student's answer to this part.",
                  "definition": "student_quantity"
                },
                {
                  "name": "allowed_notation_styles",
                  "description": "",
                  "definition": "[\"plain\",\"en\"]"
                },
                {
                  "name": "match_student_number",
                  "description": "",
                  "definition": "matchnumber(studentAnswer,allowed_notation_styles)"
                },
                {
                  "name": "student_number",
                  "description": "<p>The scalar part of the student's quantity</p>",
                  "definition": "match_student_number[1]"
                },
                {
                  "name": "raw_student_units",
                  "description": "<p>The units of the student's quantity, before converting.</p>",
                  "definition": "try(\n  quantity(studentAnswer[len(match_student_number[0])..len(studentAnswer)]),\n  message,\n  warn(\"Your answer is not a valid quantity.\");\n  fail(\"Your answer is not a valid quantity.\")\n)"
                },
                {
                  "name": "student_units",
                  "description": "<p>The units of the student's quantity.</p>\n<p>If the student used units incompatible with the units in the expected answer, and the \"what to do if incompatible units used\" option is set to \"mark as if correct units used\", the student's units are ignored and the expected units are used instead.</p>",
                  "definition": "if(compatible(raw_student_units,correct_units) or settings[\"incompatible_units_action\"]<>\"convert\",\n  raw_student_units,\n  correct_units\n)"
                },
                {
                  "name": "student_quantity",
                  "description": "<p>The student's answer, interpreted as a quantity.</p>\n<p>Marking fails if the student does not enter a valid quantity.</p>",
                  "definition": "apply(student_units);\ntry(\n  student_number * student_units,\n  message,\n  warn(\"Your answer is not a valid quantity.\");\n  fail(\"Your answer is not a valid quantity.\")\n)"
                },
                {
                  "name": "correct_quantity",
                  "description": "",
                  "definition": "settings[\"correctAnswer\"]"
                },
                {
                  "name": "compatible",
                  "description": "<p>Are the units of the student's quantity compatible with the units of the expected quantity?</p>",
                  "definition": "if(compatible(raw_student_units,correct_quantity),\n  true\n,\n  let(message,\"Your answer does not have the correct dimensions.\",\n    if(settings[\"incompatible_units_action\"]=\"prevent\",\n      warn(message);\n      fail(message)\n    ,\n      if(settings[\"incompatible_units_action\"]=\"convert\",\n        incorrect(\"Your answer does not have the correct dimensions. It will be marked as if the correct dimensions were used, and then a penalty will be applied.\")\n        ,\n        incorrect(\"Your answer does not have the correct dimensions.\");\n        end()\n      )\n    );\n    false\n  )\n)"
                },
                {
                  "name": "correct_units",
                  "description": "",
                  "definition": "units(correct_quantity)"
                },
                {
                  "name": "same_units",
                  "description": "<p>/Are the student's quantity and the expected quantity in exactly the same units?</p>",
                  "definition": "assert(raw_student_units=correct_units,\n  let(\n    message,if(settings[\"hint\"]=\"show units\",\"You did not give your answer in \"+units_string(correct_units)+\".\", \"Your answer is not in the expected units.\"),\n  switch(\n    settings[\"different_units_action\"]=\"prevent\",\n      warn(message);\n      fail(message)\n    ,\n    settings[\"different_units_action\"]=\"incorrect\",\n      incorrect(message); \n      warn(message);\n      end()\n    ,\n    settings[\"different_units_action\"]=\"warn\",\n      warn(message);\n      multiply_credit(1-settings[\"different_units_penalty\"],message)\n    ,\n    settings[\"different_units_penalty\"]<1,\n      multiply_credit(1-settings[\"different_units_penalty\"],message)\n    ,\n      false\n  )\n  );\n  false\n)"
                },
                {
                  "name": "has_units",
                  "description": "",
                  "definition": "assert(not unitless(student_quantity),\n  assert(settings[\"allow_unitless\"],\n    warn(\"You must include the units in your answer.\");\n    fail(\"You did not include units in your answer.\")\n  )\n)"
                },
                {
                  "name": "can_compare",
                  "description": "<p>Can the student's answer be compared with the correct answer? True if compatible units used, or \"mark as if correct units used\" selected.</p>",
                  "definition": "compatible or settings[\"incompatible_units_action\"]=\"convert\""
                },
                {
                  "name": "close_enough",
                  "description": "<p>Is the student's quantity within the allowed tolerance of the expected answer?</p>",
                  "definition": "if(can_compare,\n   student_quantity>=correct_quantity - wiggle \n   and \n   student_quantity<=correct_quantity + wiggle \n,\n   false\n)"
                },
                {
                  "name": "wiggle",
                  "description": "",
                  "definition": "units(correct_quantity)*abs(eval(settings[\"wiggle\"]))"
                },
                {
                  "name": "valid_number",
                  "description": "<p>Is the scalar part of the student's answer a valid number?</p>",
                  "definition": "if(isNaN(student_number),\n   warn(translate(\"part.numberentry.answer invalid\"));\n   fail(translate(\"part.numberentry.answer invalid\"))\n,\n  true\n  )\n"
                }
              ],
              "settings": [
                {
                  "name": "correctAnswer",
                  "label": "Correct answer",
                  "help_url": "",
                  "hint": "The expected quantity.",
                  "input_type": "code",
                  "default_value": "",
                  "evaluate": true
                },
                {
                  "name": "hint",
                  "label": "Input hint",
                  "help_url": "",
                  "hint": "",
                  "input_type": "dropdown",
                  "default_value": "remind units",
                  "choices": [
                    { "value": "none", "label": "None" },
                    {
                      "value": "remind units",
                      "label": "Remind to include units"
                    },
                    { "value": "show units", "label": "Show required units" }
                  ]
                },
                {
                  "name": "allow_unitless",
                  "label": "Allow unitless answer?",
                  "help_url": "",
                  "hint": "If not ticked, the student is prevented from submitting an answer without specifying units.",
                  "input_type": "checkbox",
                  "default_value": true
                },
                {
                  "name": "incompatible_units_action",
                  "label": "What to do if incompatible units used",
                  "help_url": "",
                  "hint": "If the student's answer is given in units incompatible with the correct answer's units:<br />\n<ul>\n<li>\"Prevent submission\": Prevent the student from submitting until they use compatible units</li>\n<li>\"Mark as incorrect\": Mark the student's answer as incorrect.</li>\n<li>\"Mark as if correct units used\": Mark the student's answer as if they used the correct units, and apply the \"different units used\" penalty.</li>\n</ul>",
                  "input_type": "dropdown",
                  "default_value": "incorrect",
                  "choices": [
                    { "value": "incorrect", "label": "Mark as incorrect" },
                    { "value": "prevent", "label": "Prevent submission" },
                    {
                      "value": "convert",
                      "label": "Mark as if correct units used"
                    }
                  ]
                },
                {
                  "name": "different_units_action",
                  "label": "What to do if different units used",
                  "help_url": "",
                  "hint": "If the student's answer is given in different units to the expected answer:<br />\n<ul>\n<li>\"Convert\" - silently convert the student's answer to the units used in the correct answer.</li>\n<li>\"Warn and convert\" - show a warning to the student, but convert.</li>\n<li>\"Prevent submission\" - don't allow the student to submit, and show a warning that they must use the same units.</li>\n<li>\"Mark incorrect\" - the student's answer is marked as incorrect.</li>\n</ul>",
                  "input_type": "dropdown",
                  "default_value": "convert",
                  "choices": [
                    { "value": "convert", "label": "Convert" },
                    { "value": "warn", "label": "Warn and convert" },
                    { "value": "prevent", "label": "Prevent submission" },
                    { "value": "incorrect", "label": "Mark incorrect" }
                  ]
                },
                {
                  "name": "different_units_penalty",
                  "label": "Penalty if different units used",
                  "help_url": "",
                  "hint": "This penalty is applied if the student gives their answer in different units to the expected answer. The selected percentage of the student's score is taken away.",
                  "input_type": "percent",
                  "default_value": "100"
                },
                {
                  "name": "wiggle",
                  "label": "Margin of error",
                  "help_url": "",
                  "hint": "The student's answer is marked correct if the difference between it and the correct answer is at most this value, measured in the same units as the correct answer.",
                  "input_type": "mathematical_expression",
                  "default_value": "10^-12",
                  "subvars": true
                }
              ],
              "public_availability": "always",
              "published": true,
              "extensions": ["quantities"]
            }
          ],
          "resources": [],
          "navigation": {
            "allowregen": true,
            "showfrontpage": false,
            "preventleave": false
          },
          "contributors": [
            {
              "name": "Christian Lawson-Perfect",
              "profile_url": "https://numbas.mathcentre.ac.uk/accounts/profile/7/"
            }
          ],
          "tags": [],
          "metadata": {
            "description": "<p>A demo of the \"quantities with units\" extension and custom part type.</p>",
            "licence": "Creative Commons Attribution 4.0 International"
          },
          "statement": "<p>The 'quantities with units' extension adds tools to work with measurements. You can do arithmetic on quantities with associated units, and there's a custom part type which asks the student to enter a quantity along with its units.</p>\n<p><em><a href=\"https://numbas.mathcentre.ac.uk/question/65913/numbas-demo-quantities-with-units/\" target=\"_blank\" rel=\"noopener noreferrer\">See this question on the public editor</a>.</em></p>",
          "advice": "",
          "rulesets": {},
          "variables": {
            "width": {
              "name": "width",
              "group": "Ungrouped variables",
              "definition": "qty(random(30..80#10),\"cm\")",
              "description": "",
              "templateType": "anything"
            },
            "height": {
              "name": "height",
              "group": "Ungrouped variables",
              "definition": "qty(random(20..50#10),\"cm\")",
              "description": "",
              "templateType": "anything"
            },
            "length": {
              "name": "length",
              "group": "Ungrouped variables",
              "definition": "qty(random(10..40#10),\"cm\")",
              "description": "",
              "templateType": "anything"
            },
            "weight": {
              "name": "weight",
              "group": "Ungrouped variables",
              "definition": "density*length*width*height",
              "description": "",
              "templateType": "anything"
            },
            "density": {
              "name": "density",
              "group": "Ungrouped variables",
              "definition": "qty(random(100..200#1),\"kg/m^3\")",
              "description": "",
              "templateType": "anything"
            }
          },
          "variablesTest": { "condition": "", "maxRuns": 100 },
          "ungrouped_variables": [
            "width",
            "height",
            "length",
            "weight",
            "density"
          ],
          "variable_groups": [],
          "functions": {},
          "preamble": { "js": "", "css": "" },
          "parts": [
            {
              "type": "quantity",
              "useCustomName": true,
              "customName": "A quantity with associated units",
              "marks": 1,
              "scripts": {},
              "customMarkingAlgorithm": "",
              "extendBaseMarkingAlgorithm": true,
              "unitTests": [],
              "showCorrectAnswer": true,
              "showFeedbackIcon": true,
              "variableReplacements": [],
              "variableReplacementStrategy": "originalfirst",
              "nextParts": [],
              "suggestGoingBack": false,
              "adaptiveMarkingPenalty": 0,
              "exploreObjective": null,
              "prompt": "<p><em></em>Write 1kg. Any compatible unit is also acceptable.</p>\n<p><em>Try <code>1kg</code>, <code>1000g</code>.</em></p>",
              "settings": {
                "correctAnswer": "qty(1,\"kg\")",
                "hint": "remind units",
                "allow_unitless": true,
                "incompatible_units_action": "incorrect",
                "different_units_action": "convert",
                "different_units_penalty": "100",
                "wiggle": "10^-12"
              }
            },
            {
              "type": "quantity",
              "useCustomName": true,
              "customName": "Require exactly the same units",
              "marks": 1,
              "scripts": {},
              "customMarkingAlgorithm": "",
              "extendBaseMarkingAlgorithm": true,
              "unitTests": [],
              "showCorrectAnswer": true,
              "showFeedbackIcon": true,
              "variableReplacements": [],
              "variableReplacementStrategy": "originalfirst",
              "nextParts": [],
              "suggestGoingBack": false,
              "adaptiveMarkingPenalty": 0,
              "exploreObjective": null,
              "prompt": "<p><em>You can require that the student uses exactly the same units as the expected answer, rather than converting between compatible units.</em></p>\n<p>Convert 240cm to metres.</p>\n<p><em>Try <code>2.4m</code> and <code>240cm</code>.</em></p>",
              "settings": {
                "correctAnswer": "qty(2.4,\"m\")",
                "hint": "remind units",
                "allow_unitless": true,
                "incompatible_units_action": "incorrect",
                "different_units_action": "incorrect",
                "different_units_penalty": "100",
                "wiggle": "10^-12"
              }
            },
            {
              "type": "quantity",
              "useCustomName": true,
              "customName": "Prevent submission of a unitless answer",
              "marks": 1,
              "scripts": {},
              "customMarkingAlgorithm": "",
              "extendBaseMarkingAlgorithm": true,
              "unitTests": [],
              "showCorrectAnswer": true,
              "showFeedbackIcon": true,
              "variableReplacements": [],
              "variableReplacementStrategy": "originalfirst",
              "nextParts": [],
              "suggestGoingBack": false,
              "adaptiveMarkingPenalty": 0,
              "exploreObjective": null,
              "prompt": "<p><em>You can prevent the student from submitting an answer without units.</em></p>\n<p>Write 15cm.</p>",
              "settings": {
                "correctAnswer": "qty(15,\"cm\")",
                "hint": "remind units",
                "allow_unitless": false,
                "incompatible_units_action": "incorrect",
                "different_units_action": "convert",
                "different_units_penalty": "100",
                "wiggle": "10^-12"
              }
            },
            {
              "type": "quantity",
              "useCustomName": true,
              "customName": "Randomised answers",
              "marks": 1,
              "scripts": {},
              "customMarkingAlgorithm": "",
              "extendBaseMarkingAlgorithm": true,
              "unitTests": [],
              "showCorrectAnswer": true,
              "showFeedbackIcon": true,
              "variableReplacements": [],
              "variableReplacementStrategy": "originalfirst",
              "nextParts": [],
              "suggestGoingBack": false,
              "adaptiveMarkingPenalty": 0,
              "exploreObjective": null,
              "prompt": "<p><em>You can do arithmetic with quantities. In this part, the dimensions of the box and its density are randomised, and the weight is calculated from that.</em></p>\n<p>A box measures {width} by {height} by {length}, and weights {weight}.</p>\n<p>What is the box's density?</p>\n<p><em>Try <code>{plain_string(density)}</code> and<code>{plain_string(density in \"g/cm^3\")}</code>.</em></p>",
              "settings": {
                "correctAnswer": "density",
                "hint": "remind units",
                "allow_unitless": true,
                "incompatible_units_action": "incorrect",
                "different_units_action": "convert",
                "different_units_penalty": "100",
                "wiggle": "10^-12"
              }
            }
          ],
          "partsMode": "all",
          "maxMarks": 0,
          "objectives": [],
          "penalties": [],
          "objectiveVisibility": "always",
          "penaltyVisibility": "always"
        }
      ]
    }
  ],
  "navigation": {
    "allowregen": true,
    "reverse": true,
    "browse": true,
    "allowsteps": true,
    "showfrontpage": false,
    "showresultspage": "oncompletion",
    "navigatemode": "menu",
    "onleave": { "action": "none", "message": "" },
    "preventleave": false,
    "startpassword": ""
  },
  "timing": {
    "allowPause": true,
    "timeout": { "action": "none", "message": "" },
    "timedwarning": { "action": "none", "message": "" }
  },
  "feedback": {
    "showactualmark": true,
    "showtotalmark": true,
    "showanswerstate": true,
    "allowrevealanswer": true,
    "advicethreshold": 0,
    "intro": "<p>This is Numbas.</p>\n<p>A Numbas test consists of one or more questions, each of which&nbsp;is split up into one or more parts.</p>\n<p>Try&nbsp;the questions in this demo exam to see Numbas' advanced features for yourself.</p>\n<p>Use the&nbsp;<em>Try another question like this one</em>&nbsp;button to re-randomise a question, and the&nbsp;<em>Reveal answers</em> button to see a worked solution along with model&nbsp;answers.</p>\n<p><em><a href=\"https://numbas.mathcentre.ac.uk/exam/1973/numbas-website-demo/\" target=\"_blank\" rel=\"noopener noreferrer\">See this exam in the public editor</a>.</em></p>",
    "reviewshowscore": true,
    "reviewshowfeedback": true,
    "reviewshowexpectedanswer": true,
    "reviewshowadvice": true,
    "feedbackmessages": []
  },
  "contributors": [
    {
      "name": "Christian Lawson-Perfect",
      "profile_url": "https://numbas.mathcentre.ac.uk/accounts/profile/7/"
    }
  ],
  "extensions": [
    "eukleides",
    "geogebra",
    "jsxgraph",
    "quantities",
    "random_person",
    "stats"
  ],
  "custom_part_types": [
    {
      "source": {
        "pk": 1,
        "author": { "name": "Christian Lawson-Perfect", "pk": 7 },
        "edit_page": "/part_type/1/edit"
      },
      "name": "Yes/no",
      "short_name": "yes-no",
      "description": "<p>The student is shown two radio choices: \"Yes\" and \"No\". One of them is correct.</p>",
      "help_url": "",
      "input_widget": "radios",
      "input_options": {
        "correctAnswer": "if(eval(settings[\"correct_answer_expr\"]), 0, 1)",
        "hint": { "static": true, "value": "" },
        "choices": { "static": true, "value": ["Yes", "No"] }
      },
      "can_be_gap": true,
      "can_be_step": true,
      "marking_script": "mark:\nif(studentanswer=correct_answer,\n  correct(),\n  incorrect()\n)\n\ninterpreted_answer:\nstudentAnswer=0\n\ncorrect_answer:\nif(eval(settings[\"correct_answer_expr\"]),0,1)",
      "marking_notes": [
        {
          "name": "mark",
          "description": "This is the main marking note. It should award credit and provide feedback based on the student's answer.",
          "definition": "if(studentanswer=correct_answer,\n  correct(),\n  incorrect()\n)"
        },
        {
          "name": "interpreted_answer",
          "description": "A value representing the student's answer to this part.",
          "definition": "studentAnswer=0"
        },
        {
          "name": "correct_answer",
          "description": "",
          "definition": "if(eval(settings[\"correct_answer_expr\"]),0,1)"
        }
      ],
      "settings": [
        {
          "name": "correct_answer_expr",
          "label": "Is the answer \"Yes\"?",
          "help_url": "",
          "hint": "An expression which evaluates to <code>true</code> or <code>false</code>.",
          "input_type": "mathematical_expression",
          "default_value": "true",
          "subvars": false
        }
      ],
      "public_availability": "always",
      "published": true,
      "extensions": []
    },
    {
      "source": {
        "pk": 2,
        "author": { "name": "Christian Lawson-Perfect", "pk": 7 },
        "edit_page": "/part_type/2/edit"
      },
      "name": "List of numbers",
      "short_name": "list-of-numbers",
      "description": "<p>The answer is a comma-separated list of numbers.</p>\n<p>The list is marked correct if each number occurs the same number of times as in the expected answer, and no extra numbers are present.</p>\n<p>You can optionally treat the answer as a set, so the number of occurrences doesn't matter, only whether each number is included or not.</p>",
      "help_url": "",
      "input_widget": "string",
      "input_options": {
        "correctAnswer": "join(\n  if(settings[\"correctAnswerFractions\"],\n    map(let([a,b],rational_approximation(x), string(a/b)),x,settings[\"correctAnswer\"])\n  ,\n    settings[\"correctAnswer\"]\n  ),\n  \", \"\n)",
        "hint": {
          "static": true,
          "value": "Enter a list of numbers separated by commas."
        },
        "allowEmpty": { "static": true, "value": false }
      },
      "can_be_gap": true,
      "can_be_step": true,
      "marking_script": "bits:\nlet(b,filter(x<>\"\",x,split(studentAnswer,\",\")),\n    if(isSet,list(set(b)),b)\n)\n\nexpected_numbers:\nlet(l,settings[\"correctAnswer\"] as \"list\",\n    if(isSet,list(set(l)),l)\n)\n\nvalid_numbers:\nif(all(map(not isnan(x),x,interpreted_answer)),\n    true,\n    let(index,filter(isnan(interpreted_answer[x]),x,0..len(interpreted_answer)-1)[0], wrong, bits[index],\n      warn(wrong+\" is not a valid number\");\n      fail(wrong+\" is not a valid number.\")\n    )\n  )\n\nis_sorted:\nassert(sort(interpreted_answer)=interpreted_answer,\n    multiply_credit(0.5,\"Not in order\")\n  )\n\nincluded:\nmap(\n      let(\n        num_student,len(filter(x=y,y,interpreted_answer)),\n        num_expected,len(filter(x=y,y,expected_numbers)),\n        switch(\n          num_student=num_expected,\n            true,\n          num_student<num_expected,\n            incorrect(\n              if(isSet,\"Your answer does not contain \"+x+\" but should.\",\n                \"Your answer does not contain \"+x+\" enough times.\"\n              )\n            );false\n          ,\n            incorrect(\n              if(isSet,\"Your answer contains \"+x+\" but should not.\",\n                \"Your answer contains \"+x+\" too many times.\"\n              )\n            );false\n        )\n      )\n      ,\n      x,\n      sort(list(set(expected_numbers)))\n  )\n\nall_included:\nall(included)\n\nno_extras:\nif(all(map(x in expected_numbers, x, interpreted_answer)),\n    true\n  ,\n    incorrect(\"Your answer contains \"+extra_numbers[0]+\" but should not.\");\n    false\n  )\n\ninterpreted_answer:\nif(lower(studentAnswer) in [\"empty\",\"?\"],[],\n  map(\n    if(settings[\"allowFractions\"],parsenumber_or_fraction(x,notationStyles), parsenumber(x,notationStyles))\n    ,x\n    ,bits\n  )\n)\n\nmark:\nif(studentanswer=\"\",fail(\"You have not entered an answer\"),false);\napply(valid_numbers);\napply(included);\napply(no_extras);\ncorrectif(all_included and no_extras)\n\nnotationStyles:\n[\"en\"]\n\nisSet:\nsettings[\"isSet\"]\n\nextra_numbers:\nfilter(not (x in expected_numbers),x,interpreted_answer)",
      "marking_notes": [
        {
          "name": "bits",
          "description": "<p>The separate items in the student's answer</p>",
          "definition": "let(b,filter(x<>\"\",x,split(studentAnswer,\",\")),\n    if(isSet,list(set(b)),b)\n)"
        },
        {
          "name": "expected_numbers",
          "description": "",
          "definition": "let(l,settings[\"correctAnswer\"] as \"list\",\n    if(isSet,list(set(l)),l)\n)"
        },
        {
          "name": "valid_numbers",
          "description": "<p>Is every number in the student's list valid?</p>",
          "definition": "if(all(map(not isnan(x),x,interpreted_answer)),\n    true,\n    let(index,filter(isnan(interpreted_answer[x]),x,0..len(interpreted_answer)-1)[0], wrong, bits[index],\n      warn(wrong+\" is not a valid number\");\n      fail(wrong+\" is not a valid number.\")\n    )\n  )"
        },
        {
          "name": "is_sorted",
          "description": "<p>Are the student's answers in ascending order?</p>",
          "definition": "assert(sort(interpreted_answer)=interpreted_answer,\n    multiply_credit(0.5,\"Not in order\")\n  )"
        },
        {
          "name": "included",
          "description": "<p>Is each number in the expected answer present in the student's list the correct number of times?</p>",
          "definition": "map(\n      let(\n        num_student,len(filter(x=y,y,interpreted_answer)),\n        num_expected,len(filter(x=y,y,expected_numbers)),\n        switch(\n          num_student=num_expected,\n            true,\n          num_student<num_expected,\n            incorrect(\n              if(isSet,\"Your answer does not contain \"+x+\" but should.\",\n                \"Your answer does not contain \"+x+\" enough times.\"\n              )\n            );false\n          ,\n            incorrect(\n              if(isSet,\"Your answer contains \"+x+\" but should not.\",\n                \"Your answer contains \"+x+\" too many times.\"\n              )\n            );false\n        )\n      )\n      ,\n      x,\n      sort(list(set(expected_numbers)))\n  )"
        },
        {
          "name": "all_included",
          "description": "<p>Has every number been included the right number of times?</p>",
          "definition": "all(included)"
        },
        {
          "name": "no_extras",
          "description": "<p>True if the student's list doesn't contain any numbers that aren't in the expected answer.</p>",
          "definition": "if(all(map(x in expected_numbers, x, interpreted_answer)),\n    true\n  ,\n    incorrect(\"Your answer contains \"+extra_numbers[0]+\" but should not.\");\n    false\n  )"
        },
        {
          "name": "interpreted_answer",
          "description": "A value representing the student's answer to this part.",
          "definition": "if(lower(studentAnswer) in [\"empty\",\"\u2205\"],[],\n  map(\n    if(settings[\"allowFractions\"],parsenumber_or_fraction(x,notationStyles), parsenumber(x,notationStyles))\n    ,x\n    ,bits\n  )\n)"
        },
        {
          "name": "mark",
          "description": "This is the main marking note. It should award credit and provide feedback based on the student's answer.",
          "definition": "if(studentanswer=\"\",fail(\"You have not entered an answer\"),false);\napply(valid_numbers);\napply(included);\napply(no_extras);\ncorrectif(all_included and no_extras)"
        },
        {
          "name": "notationStyles",
          "description": "",
          "definition": "[\"en\"]"
        },
        {
          "name": "isSet",
          "description": "<p>Should the answer be considered as a set, so the number of times an element occurs doesn't matter?</p>",
          "definition": "settings[\"isSet\"]"
        },
        {
          "name": "extra_numbers",
          "description": "<p>Numbers included in the student's answer that are not in the expected list.</p>",
          "definition": "filter(not (x in expected_numbers),x,interpreted_answer)"
        }
      ],
      "settings": [
        {
          "name": "correctAnswer",
          "label": "Correct answer",
          "help_url": "",
          "hint": "The list of numbers that the student should enter. The order does not matter.",
          "input_type": "code",
          "default_value": "",
          "evaluate": true
        },
        {
          "name": "allowFractions",
          "label": "Allow the student to enter fractions?",
          "help_url": "",
          "hint": "",
          "input_type": "checkbox",
          "default_value": false
        },
        {
          "name": "correctAnswerFractions",
          "label": "Display the correct answers as fractions?",
          "help_url": "",
          "hint": "",
          "input_type": "checkbox",
          "default_value": false
        },
        {
          "name": "isSet",
          "label": "Is the answer a set?",
          "help_url": "",
          "hint": "If ticked, the number of times an element occurs doesn't matter, only whether it's included at all.",
          "input_type": "checkbox",
          "default_value": false
        }
      ],
      "public_availability": "always",
      "published": true,
      "extensions": []
    },
    {
      "source": {
        "pk": 3,
        "author": { "name": "Christian Lawson-Perfect", "pk": 7 },
        "edit_page": "/part_type/3/edit"
      },
      "name": "Give a numerical input for an expression",
      "short_name": "give-a-numerical-input-for-an-expression",
      "description": "<p>The student gives&nbsp;a point $x$ at which to evaluate a given function $f$. The answer is correct if $f(x)$ is the expected value.</p>",
      "help_url": "",
      "input_widget": "number",
      "input_options": {
        "hint": { "static": true, "value": "" },
        "allowFractions": { "static": true, "value": true },
        "correctAnswer": "settings[\"correctAnswer\"]",
        "allowedNotationStyles": {
          "static": true,
          "value": ["plain", "en", "si-en"]
        }
      },
      "can_be_gap": true,
      "can_be_step": true,
      "marking_script": "mark:\nif(equal,\n   correct()\n,\n   incorrect(settings[\"student_value_description\"]+\" $\"+student_value+\"$.\")\n)\n\ninterpreted_answer:\nstudentAnswer\n\nstudent_value:\neval(settings[\"expression\"],[\"x\":studentAnswer])\n\nequal:\nwithintolerance(student_value,settings[\"expected_value\"],0.00001)",
      "marking_notes": [
        {
          "definition": "if(equal,\n   correct()\n,\n   incorrect(settings[\"student_value_description\"]+\" $\"+student_value+\"$.\")\n)",
          "description": "This is the main marking note. It should award credit and provide feedback based on the student's answer.",
          "name": "mark"
        },
        {
          "definition": "studentAnswer",
          "description": "A value representing the student's answer to this part.",
          "name": "interpreted_answer"
        },
        {
          "definition": "eval(settings[\"expression\"],[\"x\":studentAnswer])",
          "description": "",
          "name": "student_value"
        },
        {
          "definition": "withintolerance(student_value,settings[\"expected_value\"],0.00001)",
          "description": "",
          "name": "equal"
        }
      ],
      "settings": [
        {
          "hint": "The value that the function should take at the given point.",
          "evaluate": true,
          "label": "Expected value",
          "input_type": "code",
          "default_value": "",
          "help_url": "",
          "name": "expected_value"
        },
        {
          "hint": "The value that the student should write.",
          "label": "Correct answer",
          "input_type": "string",
          "default_value": "",
          "subvars": true,
          "help_url": "",
          "name": "correctAnswer"
        },
        {
          "hint": "",
          "label": "Description of the student's value",
          "input_type": "string",
          "default_value": "The value at your point is",
          "subvars": true,
          "help_url": "",
          "name": "student_value_description"
        },
        {
          "hint": "The function that will be applied to the student's number.<br />The student's number will be substituted for $x$ in this expression.",
          "label": "Function to evaluate",
          "input_type": "mathematical_expression",
          "default_value": "",
          "subvars": true,
          "help_url": "",
          "name": "expression"
        }
      ],
      "public_availability": "always",
      "published": true,
      "extensions": []
    },
    {
      "source": {
        "pk": 7,
        "author": { "name": "Christian Lawson-Perfect", "pk": 7 },
        "edit_page": "/part_type/7/edit"
      },
      "name": "Quantity with units",
      "short_name": "quantity",
      "description": "<p>The student enters a quantity with units.</p>",
      "help_url": "https://github.com/numbas/numbas-extension-quantities",
      "input_widget": "string",
      "input_options": {
        "correctAnswer": "plain_string(settings[\"correctAnswer\"])",
        "hint": {
          "static": false,
          "value": "switch(\n  settings[\"hint\"]=\"remind units\",\n    \"Include units in your answer.\",\n  settings[\"hint\"]=\"show units\",\n    \"Give your answer in \"+units_string(settings[\"correctAnswer\"])\n  ,\n    \"\"\n)"
        },
        "allowEmpty": { "static": true, "value": false }
      },
      "can_be_gap": true,
      "can_be_step": true,
      "marking_script": "mark:\napply(valid_number);\napply(student_quantity);\napply(has_units);\napply(compatible);\ntry(\n  correctif(close_enough),\n  x,\n  apply(student_quantity)\n);\napply(same_units)\n\ninterpreted_answer:\nstudent_quantity\n\nallowed_notation_styles:\n[\"plain\",\"en\"]\n\nmatch_student_number:\nmatchnumber(studentAnswer,allowed_notation_styles)\n\nstudent_number:\nmatch_student_number[1]\n\nraw_student_units:\ntry(\n  quantity(studentAnswer[len(match_student_number[0])..len(studentAnswer)]),\n  message,\n  warn(\"Your answer is not a valid quantity.\");\n  fail(\"Your answer is not a valid quantity.\")\n)\n\nstudent_units:\nif(compatible(raw_student_units,correct_units) or settings[\"incompatible_units_action\"]<>\"convert\",\n  raw_student_units,\n  correct_units\n)\n\nstudent_quantity:\napply(student_units);\ntry(\n  student_number * student_units,\n  message,\n  warn(\"Your answer is not a valid quantity.\");\n  fail(\"Your answer is not a valid quantity.\")\n)\n\ncorrect_quantity:\nsettings[\"correctAnswer\"]\n\ncompatible:\nif(compatible(raw_student_units,correct_quantity),\n  true\n,\n  let(message,\"Your answer does not have the correct dimensions.\",\n    if(settings[\"incompatible_units_action\"]=\"prevent\",\n      warn(message);\n      fail(message)\n    ,\n      if(settings[\"incompatible_units_action\"]=\"convert\",\n        incorrect(\"Your answer does not have the correct dimensions. It will be marked as if the correct dimensions were used, and then a penalty will be applied.\")\n        ,\n        incorrect(\"Your answer does not have the correct dimensions.\");\n        end()\n      )\n    );\n    false\n  )\n)\n\ncorrect_units:\nunits(correct_quantity)\n\nsame_units:\nassert(raw_student_units=correct_units,\n  let(\n    message,if(settings[\"hint\"]=\"show units\",\"You did not give your answer in \"+units_string(correct_units)+\".\", \"Your answer is not in the expected units.\"),\n  switch(\n    settings[\"different_units_action\"]=\"prevent\",\n      warn(message);\n      fail(message)\n    ,\n    settings[\"different_units_action\"]=\"incorrect\",\n      incorrect(message); \n      warn(message);\n      end()\n    ,\n    settings[\"different_units_action\"]=\"warn\",\n      warn(message);\n      multiply_credit(1-settings[\"different_units_penalty\"],message)\n    ,\n    settings[\"different_units_penalty\"]<1,\n      multiply_credit(1-settings[\"different_units_penalty\"],message)\n    ,\n      false\n  )\n  );\n  false\n)\n\nhas_units:\nassert(not unitless(student_quantity),\n  assert(settings[\"allow_unitless\"],\n    warn(\"You must include the units in your answer.\");\n    fail(\"You did not include units in your answer.\")\n  )\n)\n\ncan_compare:\ncompatible or settings[\"incompatible_units_action\"]=\"convert\"\n\nclose_enough:\nif(can_compare,\n   student_quantity>=correct_quantity - wiggle \n   and \n   student_quantity<=correct_quantity + wiggle \n,\n   false\n)\n\nwiggle:\nunits(correct_quantity)*abs(eval(settings[\"wiggle\"]))\n\nvalid_number:\nif(isNaN(student_number),\n   warn(translate(\"part.numberentry.answer invalid\"));\n   fail(translate(\"part.numberentry.answer invalid\"))\n,\n  true\n  )",
      "marking_notes": [
        {
          "name": "mark",
          "description": "This is the main marking note. It should award credit and provide feedback based on the student's answer.",
          "definition": "apply(valid_number);\napply(student_quantity);\napply(has_units);\napply(compatible);\ntry(\n  correctif(close_enough),\n  x,\n  apply(student_quantity)\n);\napply(same_units)"
        },
        {
          "name": "interpreted_answer",
          "description": "A value representing the student's answer to this part.",
          "definition": "student_quantity"
        },
        {
          "name": "allowed_notation_styles",
          "description": "",
          "definition": "[\"plain\",\"en\"]"
        },
        {
          "name": "match_student_number",
          "description": "",
          "definition": "matchnumber(studentAnswer,allowed_notation_styles)"
        },
        {
          "name": "student_number",
          "description": "<p>The scalar part of the student's quantity</p>",
          "definition": "match_student_number[1]"
        },
        {
          "name": "raw_student_units",
          "description": "<p>The units of the student's quantity, before converting.</p>",
          "definition": "try(\n  quantity(studentAnswer[len(match_student_number[0])..len(studentAnswer)]),\n  message,\n  warn(\"Your answer is not a valid quantity.\");\n  fail(\"Your answer is not a valid quantity.\")\n)"
        },
        {
          "name": "student_units",
          "description": "<p>The units of the student's quantity.</p>\n<p>If the student used units incompatible with the units in the expected answer, and the \"what to do if incompatible units used\" option is set to \"mark as if correct units used\", the student's units are ignored and the expected units are used instead.</p>",
          "definition": "if(compatible(raw_student_units,correct_units) or settings[\"incompatible_units_action\"]<>\"convert\",\n  raw_student_units,\n  correct_units\n)"
        },
        {
          "name": "student_quantity",
          "description": "<p>The student's answer, interpreted as a quantity.</p>\n<p>Marking fails if the student does not enter a valid quantity.</p>",
          "definition": "apply(student_units);\ntry(\n  student_number * student_units,\n  message,\n  warn(\"Your answer is not a valid quantity.\");\n  fail(\"Your answer is not a valid quantity.\")\n)"
        },
        {
          "name": "correct_quantity",
          "description": "",
          "definition": "settings[\"correctAnswer\"]"
        },
        {
          "name": "compatible",
          "description": "<p>Are the units of the student's quantity compatible with the units of the expected quantity?</p>",
          "definition": "if(compatible(raw_student_units,correct_quantity),\n  true\n,\n  let(message,\"Your answer does not have the correct dimensions.\",\n    if(settings[\"incompatible_units_action\"]=\"prevent\",\n      warn(message);\n      fail(message)\n    ,\n      if(settings[\"incompatible_units_action\"]=\"convert\",\n        incorrect(\"Your answer does not have the correct dimensions. It will be marked as if the correct dimensions were used, and then a penalty will be applied.\")\n        ,\n        incorrect(\"Your answer does not have the correct dimensions.\");\n        end()\n      )\n    );\n    false\n  )\n)"
        },
        {
          "name": "correct_units",
          "description": "",
          "definition": "units(correct_quantity)"
        },
        {
          "name": "same_units",
          "description": "<p>/Are the student's quantity and the expected quantity in exactly the same units?</p>",
          "definition": "assert(raw_student_units=correct_units,\n  let(\n    message,if(settings[\"hint\"]=\"show units\",\"You did not give your answer in \"+units_string(correct_units)+\".\", \"Your answer is not in the expected units.\"),\n  switch(\n    settings[\"different_units_action\"]=\"prevent\",\n      warn(message);\n      fail(message)\n    ,\n    settings[\"different_units_action\"]=\"incorrect\",\n      incorrect(message); \n      warn(message);\n      end()\n    ,\n    settings[\"different_units_action\"]=\"warn\",\n      warn(message);\n      multiply_credit(1-settings[\"different_units_penalty\"],message)\n    ,\n    settings[\"different_units_penalty\"]<1,\n      multiply_credit(1-settings[\"different_units_penalty\"],message)\n    ,\n      false\n  )\n  );\n  false\n)"
        },
        {
          "name": "has_units",
          "description": "",
          "definition": "assert(not unitless(student_quantity),\n  assert(settings[\"allow_unitless\"],\n    warn(\"You must include the units in your answer.\");\n    fail(\"You did not include units in your answer.\")\n  )\n)"
        },
        {
          "name": "can_compare",
          "description": "<p>Can the student's answer be compared with the correct answer? True if compatible units used, or \"mark as if correct units used\" selected.</p>",
          "definition": "compatible or settings[\"incompatible_units_action\"]=\"convert\""
        },
        {
          "name": "close_enough",
          "description": "<p>Is the student's quantity within the allowed tolerance of the expected answer?</p>",
          "definition": "if(can_compare,\n   student_quantity>=correct_quantity - wiggle \n   and \n   student_quantity<=correct_quantity + wiggle \n,\n   false\n)"
        },
        {
          "name": "wiggle",
          "description": "",
          "definition": "units(correct_quantity)*abs(eval(settings[\"wiggle\"]))"
        },
        {
          "name": "valid_number",
          "description": "<p>Is the scalar part of the student's answer a valid number?</p>",
          "definition": "if(isNaN(student_number),\n   warn(translate(\"part.numberentry.answer invalid\"));\n   fail(translate(\"part.numberentry.answer invalid\"))\n,\n  true\n  )\n"
        }
      ],
      "settings": [
        {
          "name": "correctAnswer",
          "label": "Correct answer",
          "help_url": "",
          "hint": "The expected quantity.",
          "input_type": "code",
          "default_value": "",
          "evaluate": true
        },
        {
          "name": "hint",
          "label": "Input hint",
          "help_url": "",
          "hint": "",
          "input_type": "dropdown",
          "default_value": "remind units",
          "choices": [
            { "value": "none", "label": "None" },
            { "value": "remind units", "label": "Remind to include units" },
            { "value": "show units", "label": "Show required units" }
          ]
        },
        {
          "name": "allow_unitless",
          "label": "Allow unitless answer?",
          "help_url": "",
          "hint": "If not ticked, the student is prevented from submitting an answer without specifying units.",
          "input_type": "checkbox",
          "default_value": true
        },
        {
          "name": "incompatible_units_action",
          "label": "What to do if incompatible units used",
          "help_url": "",
          "hint": "If the student's answer is given in units incompatible with the correct answer's units:<br />\n<ul>\n<li>\"Prevent submission\": Prevent the student from submitting until they use compatible units</li>\n<li>\"Mark as incorrect\": Mark the student's answer as incorrect.</li>\n<li>\"Mark as if correct units used\": Mark the student's answer as if they used the correct units, and apply the \"different units used\" penalty.</li>\n</ul>",
          "input_type": "dropdown",
          "default_value": "incorrect",
          "choices": [
            { "value": "incorrect", "label": "Mark as incorrect" },
            { "value": "prevent", "label": "Prevent submission" },
            { "value": "convert", "label": "Mark as if correct units used" }
          ]
        },
        {
          "name": "different_units_action",
          "label": "What to do if different units used",
          "help_url": "",
          "hint": "If the student's answer is given in different units to the expected answer:<br />\n<ul>\n<li>\"Convert\" - silently convert the student's answer to the units used in the correct answer.</li>\n<li>\"Warn and convert\" - show a warning to the student, but convert.</li>\n<li>\"Prevent submission\" - don't allow the student to submit, and show a warning that they must use the same units.</li>\n<li>\"Mark incorrect\" - the student's answer is marked as incorrect.</li>\n</ul>",
          "input_type": "dropdown",
          "default_value": "convert",
          "choices": [
            { "value": "convert", "label": "Convert" },
            { "value": "warn", "label": "Warn and convert" },
            { "value": "prevent", "label": "Prevent submission" },
            { "value": "incorrect", "label": "Mark incorrect" }
          ]
        },
        {
          "name": "different_units_penalty",
          "label": "Penalty if different units used",
          "help_url": "",
          "hint": "This penalty is applied if the student gives their answer in different units to the expected answer. The selected percentage of the student's score is taken away.",
          "input_type": "percent",
          "default_value": "100"
        },
        {
          "name": "wiggle",
          "label": "Margin of error",
          "help_url": "",
          "hint": "The student's answer is marked correct if the difference between it and the correct answer is at most this value, measured in the same units as the correct answer.",
          "input_type": "mathematical_expression",
          "default_value": "10^-12",
          "subvars": true
        }
      ],
      "public_availability": "always",
      "published": true,
      "extensions": ["quantities"]
    }
  ],
  "resources": [
    [
      "question-resources/Numbat_Face_U5OjlWd.jpg",
      "/srv/numbas/media/question-resources/Numbat_Face_U5OjlWd.jpg"
    ],
    [
      "question-resources/random-numbers_1yehVZF.svg",
      "/srv/numbas/media/question-resources/random-numbers_1yehVZF.svg"
    ]
  ]
}
