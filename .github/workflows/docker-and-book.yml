name: Docker & Book

on:
  push:
    # Publish `main` as Docker `latest` image.
    branches:
      - main

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

  # Run tests for any PRs.
  pull_request:

env:
  ORGANISATION: m8rex
  IMAGE_NAME: rumbas
  CARGO_TERM_COLOR: always

jobs:
  # Run tests.
  # See also https://docs.docker.com/docker-hub/builds/automated-testing/
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Clear space (needed for the caching)
        run: rm -rf /usr/local/android /usr/share/dotnet /usr/local/share/boost /opt/ghc 
      - uses: jpribyl/action-docker-layer-caching@v0.1.1
        # Ignore the failure of a step and avoid terminating the job.
        continue-on-error: true
      - name: Run tests
        run: |
          if [ -f docker-compose.test.yml ]; then
            docker-compose --file docker-compose.test.yml build
            docker-compose --file docker-compose.test.yml run sut
          else
            docker build . --file Dockerfile --tag m8rex/rumbas:latest
          fi
  
  test_cli:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Clear space (needed for the caching)
        run: rm -rf /usr/local/android /usr/share/dotnet /usr/local/share/boost /opt/ghc 
      - uses: jpribyl/action-docker-layer-caching@v0.1.1
        # Ignore the failure of a step and avoid terminating the job.
        continue-on-error: true

      - name: Build image
        run: docker build . --file Dockerfile --tag m8rex/rumbas 
      - name: run
        run: |
          docker run --rm -v $PWD:/rumbas m8rex/rumbas:latest -vvvv init
          sudo cp -r cli-tests/numbas_resources resources/question-resources
          docker run --rm -v $PWD:/rumbas m8rex/rumbas:latest -vvvv import cli-tests/numbas_exams/exam-110396-getting-started.exam
          docker run --rm -v $PWD:/rumbas m8rex/rumbas:latest -vvvv check exams
          docker run --rm -v $PWD:/rumbas m8rex/rumbas:latest -vvvv compile exams
  
  build_book:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      # selecting a toolchain either by action or manual `rustup` calls should happen
      # before the plugin, as the cache uses the current rustc version as its cache key
      - run: rustup toolchain install stable --profile minimal
      - uses: Swatinem/rust-cache@v2
      - name: Generate datatypes folder
        run: cargo run --bin doc
        working-directory: rumbas
      - name: Install mdbook
        run: |
          cargo install mdbook
          cargo install mdbook-admonish --vers "1.8.0" --locked
      - name: build book
        run: mdbook build 
        working-directory: book
      - name: Archive book artifacts
        uses: actions/upload-artifact@v3
        with:
          name: book
          path: |
            book/book/

  build_examples:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Clear space (needed for the caching)
        run: rm -rf /usr/local/android /usr/share/dotnet /usr/local/share/boost /opt/ghc 
      - uses: jpribyl/action-docker-layer-caching@v0.1.1
        # Ignore the failure of a step and avoid terminating the job.
        continue-on-error: true

      - name: Build image
        run: docker build . --file Dockerfile --tag m8rex/rumbas 
      - name: Build examples
        run: |
          docker run --rm -v $PWD/percentages-with-templates:/rumbas m8rex/rumbas:latest compile questions exams
          docker run --rm -v $PWD/first_question:/rumbas m8rex/rumbas:latest compile exams
          docker run --rm -v $PWD/using_defaults:/rumbas m8rex/rumbas:latest compile exams
        working-directory: examples
      - name: Archive output artifacts
        uses: actions/upload-artifact@v3
        with:
          name: examples
          path: |
            examples/**/_output
  deploy_book:
      needs: [build_book, build_examples]
      runs-on: ubuntu-latest
      steps:
      - uses: actions/checkout@v3
      - name: Download examples artifact
        uses: actions/download-artifact@v3
        with:
          name: examples
          path: examples_result
      - name: Download book artifact
        uses: actions/download-artifact@v3
        with:
          name: book
          path: book_result
      - name: check
        run: |
          ls -R book_result
          ls -R examples_result
      - name: Move examples
        run: |
          mkdir book_result/examples
          mv examples_result/percentages-with-templates/_output book_result/examples/percentages-with-templates
          mv examples_result/first_question/_output book_result/examples/first_question
          mv examples_result/using_defaults/_output book_result/examples/using_defaults
      - name: Deploy ðŸš€ # TODO: only on main
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          BRANCH: gh-pages # The branch the action should deploy to.
          FOLDER: book_result/ # The folder the action should deploy.
          CLEAN: true # Automatically remove deleted files from the deploy branch


  # Push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  push:
    # Ensure test job passes before pushing image.
    needs: build

    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - uses: actions/checkout@v3
      - uses: jpribyl/action-docker-layer-caching@v0.1.1
        # Ignore the failure of a step and avoid terminating the job.
        continue-on-error: true

      - name: Build image
        run: docker build . --file Dockerfile --tag $IMAGE_NAME

      - name: Log into registry
        run: echo "${{ secrets.CR_PAT }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Push image
        run: |
          IMAGE_ID=ghcr.io/$ORGANISATION/$IMAGE_NAME

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "main" ] && VERSION=latest

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
