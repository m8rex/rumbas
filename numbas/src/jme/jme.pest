WHITESPACE = _{ !double_newline ~ (" " | "\t" | newline) }
COMMENT    = _{ block_comment | ("//" ~ (!newline ~ ANY)*) }
newline    = _{ !(newline_item~newline_item) ~ newline_item }
newline_item    = _{ "\n" | "\r\n" }
block_comment = _{ "/*" ~ (block_comment | !"*/" ~ ANY)* ~ "*/" }

jme = {
    SOI
    ~ expression
    ~ EOI
}

script = {
	SOI ~ note ~ (double_newline ~ note)* ~ EOI 
}

double_newline = @{ "\n" ~ " "* ~ "\n" }

note = {
	ident_name
    ~ ("(" ~ description ~ ")" )?
    ~ ":" ~ expression
}
description = {  (!")" ~ ANY)* }

embraced_jme = { SOI ~ (normal_char | (brace_open ~ expression ~ brace_close))* ~ EOI  }
brace_open = _{ !"\\{" ~ "{" }
brace_close = _{ !"\\}" ~ "}" }
normal_char = _{ "\\{" | "\\}" | (!(brace_open | brace_close) ~ ANY) }

expression = { term ~ (infix_operator ~ term)* }
term =  { prefix_operator* ~ node ~ postfix_operator* }
node       = _{ grouped_expression | embraced_expression | terminal } 
terminal = _{ function_application | ident | collection | literal }  
grouped_expression = _{ "(" ~ expression ~ ")" }
embraced_expression = _{ brace_open ~ expression ~ brace_close }


reserved = @{ (boolean | constant_name | logic_binary_operator | not_operator | in_operator | except | isa| cast_operator ) ~ !ident_char_all }

literal = _{ boolean | number | string | constant }

constant_name = { infinity_constant | nan_constant | changeable_constant }
infinity_constant = { "infty" | "infinity" | "∞" }
nan_constant = { "nan" }
changeable_constant = { e_constant | pi_constant | i_constant }
e_constant = { "e" }
i_constant = { "i" }
pi_constant = { "pi" | "π" }
constant = { (annotation)* ~ constant_name }

number = _{ broken_number | integer }
integer = { ASCII_NONZERO_DIGIT ~ ASCII_DIGIT* | "0" }
broken_part = { ASCII_DIGIT* }
broken_number = { integer ~ !".." ~ "." ~ broken_part }
boolean = { boolean_true | boolean_false }
boolean_true = { "true" }
boolean_false = { "false" }
string = { PUSH("\"" | "'") ~ inner_str ~ POP }

inner_str = @{ (!(PEEK | "\\") ~ ANY)* ~ (escape ~ inner_str)? }
escape    = @{ "\\" ~ (PEEK | "\\" | "{" | "}" | "n" | "t" ) } 

function_arguments = { expression? ~ ("," ~ expression)* }
function_application = { ident ~ "(" ~ function_arguments ~ ")" }

implicit_multiplication_operator = { "" }

verb_annotation = { "verb:" }
op_annotation = { "op:" }
vector_annotation = { "vector:" | "v:" }
unit_annotation = { "unit:" }
dot_annotation = { "dot:" }
matrix_annotation = { "matrix:" | "m:" }
diff_annotation = { "diff:" }
degrees_annotation = { "degrees:" }
builtin_annotation = { verb_annotation | op_annotation | vector_annotation | unit_annotation | dot_annotation | matrix_annotation | diff_annotation | degrees_annotation }
other_annotation = { ASCII_ALPHA+ ~ ":" }
annotation = { builtin_annotation | other_annotation }
ident_char_all = _{ ident_char | "'" }
ident_char = _{ CASED_LETTER | ASCII_DIGIT | "_"  }
ident_name = @{ !reserved ~ CASED_LETTER ~ ident_char* ~ "'"* }
annotated_ident = { (annotation)* ~ ident_name }
ident = _{ annotated_ident }


collection = _{ dictionary | list }
dictionary = { "[" ~ dictionary_item ~ ("," ~ dictionary_item )* ~ "]" }
dictionary_key = _{ ident_name | string }
dictionary_item = { dictionary_key ~ ":" ~ expression }
list = { "[" ~ (expression ~ ("," ~ expression )*)? ~ "]" }

arithmetic_operator = _{ add | subtract | multiply | divide | power }
    add      = { "+" }
    subtract = { "-" }
    multiply = { "*" }
    divide   = { "/" }
    power    = { "^" }
    except   = { "except" }
relational_operator = { less_or_equal | not_equal | less | greater_or_equal | greater | equal | in_operator | divides_operator | isa } 
    less_or_equal = _{ "<="  } 
    not_equal = _{ "<>" } 
    less = _{  "<" } 
    greater_or_equal = _{ ">=" } 
    greater = _{ ">" } 
    equal = _{ "=" } 
    isa = _{ "isa" } 
    in_operator = _{ "in" } 
    divides_operator = _{ "|" } 
and_operator = _{ "and" | "&&" | "&" }
or_operator = _{ "or" }
xor_operator = _{ "xor" }
implies_operator = _{ "implies" }
logic_binary_operator = { and_operator | or_operator | xor_operator | implies_operator }
cast_operator = { "as" }
range_separator = { ".." }
range_step_separator = { "#" }
sequence_operator = { ";" }
infix_operator = _{ arithmetic_operator | cast_operator | relational_operator | logic_binary_operator | range_separator | range_step_separator | sequence_operator | implicit_multiplication_operator }

index_operator = { "[" ~ (string | integer | ident_name) ~ "]" } 
faculty_operator =  { "!" }
postfix_operator = _{ faculty_operator | index_operator }

not_operator = _{ "!" | "not" }
unary_minus = _{ "-" }
prefix_operator = { not_operator | unary_minus }
