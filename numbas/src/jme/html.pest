// HTML (based on https://gist.github.com/mathiversen/69d744da9d80bf774ed549511e12d884)
WHITESPACE = _{ " " | "\t" | "\r" | "\n" }

html = _{
    SOI
    ~ html_node_comment*
    ~ html_doctype?
    ~ html_node*
    ~ EOI
}
content_area = {
    SOI
    ~ html_node_comment*
    ~ html_doctype?
    ~ html_node*
    ~ EOI
}

//
// DOCTYPE
//
html_doctype_name = _{ "doctype" | "DOCTYPE" }
html_doctype = _{ html_chevron_left_bang ~ html_doctype_name ~ html_attr* ~ html_chevron_right}

//
// NODES
//
html_node = _{ html_node_comment | html_node_element | html_latex | html_embraced_jme }
html_node_comment = _{ html_comment_tag_start ~ (!html_comment_tag_end ~ ANY)* ~ html_comment_tag_end }
//html_node_text = { (!(html_chevron_left | html_comment_tag_start ) ~ ANY }
html_node_element = _{ html_el_void | html_el_void_xml | html_el_process_instruct | html_el_raw_text | html_el_normal | html_el_dangling }

brace_open = _{ !"\\{" ~ "{" }
brace_close = _{ !"\\}" ~ "}" }
normal_char = _{ "\\{" | "\\}" | "\\n" | (!(brace_open | brace_close) ~ (!"\\" ~ ANY)) }
html_latex_dollar = _{ "$" ~ (!"$" ~ latex_content)*  ~ "$" }
html_latex_block_normal = _{ "\\[" ~ (!"\\]" ~ latex_content)*  ~ "\\]" }
html_latex_block_round = _{ "\\(" ~ (!"\\)" ~ latex_content)*  ~ "\\)" }
html_latex_block_align = _{ "\\begin{align}" ~ (!"\\end{align}" ~ latex_content)*  ~ "\\end{align}" }
html_latex_block_array = _{ "\\begin{array}" ~ (!"\\end{array}" ~ latex_content)*  ~ "\\end{array}" }
html_latex_block = _{ html_latex_block_normal | html_latex_block_round | html_latex_block_align | html_latex_block_array }
html_latex = _{ html_latex_dollar | html_latex_block }
internal_expression = _{ (normal_char | "{" ~ internal_expression ~ "}")* }
expression = { internal_expression }
latex_jme_expression_start = _{ "\\var" ~ latex_jme_simplification? ~ brace_open }
latex_jme_simplification = { ("[" ~ ((!("]" | brace_open | brace_close) ~ ANY)*) ~ "]") }
latex_jme_simplify_start = _{ "\\simplify" ~ latex_jme_simplification? ~ brace_open }
latex_content = _{ ((latex_jme_simplify_start  | latex_jme_expression_start) ~ expression ~ brace_close) | (!(latex_jme_expression_start | latex_jme_simplify_start) ~ ANY) }
html_embraced_jme = _{ ( !(html_chevron_left | html_comment_tag_start | "$") ~ (normal_char | (brace_open ~ expression ~ brace_close)) )+ }

//
// COMMENTS
//
html_comment_tag_start = @{ html_chevron_left_bang ~ "--" }
html_comment_tag_end = @{ "--" ~ html_chevron_right }

//
// ATTRIBUTES
//
html_attr_key = _{ ASCII_ALPHA ~ html_text_chars* }
html_attr_value = _{ (!PEEK ~ ANY)* }
html_attr_quoted =  _{PUSH(html_quote) ~ html_attr_value ~ POP }
html_attr_non_quoted = _{ (!WHITESPACE ~ ANY)* }
html_attr = _{ html_attr_key ~ (html_equal ~ (html_attr_quoted | html_attr_non_quoted))? }

//
// ELEMENTS
//
html_el_name = @{ ASCII_ALPHA ~ html_text_chars* }

// Void element aka self-closing element
// Ex: <hr>
html_el_void_name_html = @{
    "area"
    | "base"
    | "br"
    | "col"
    | "command"
    | "embed"
    | "hr"
    | "img"
    | "input"
    | "keygen"
    | "link"
    | "meta"
    | "param"
    | "source"
    | "track"
    | "wbr"
    | "meta"
}
// NOTE: This should not have to be a rule, but people doesn't know what void elements are...
html_el_void_name_svg = @{
    "path"
    | "polygon"
    | "rect"
    | "circle"
}
html_el_void_name = @{ html_el_void_name_html | html_el_void_name_svg }
html_el_void = _{ html_chevron_left ~ html_el_void_name ~ html_attr* ~ (html_chevron_right | html_chevron_right_closed) }
html_el_void_xml = _{ html_chevron_left ~ html_el_name ~ html_attr* ~ html_chevron_right_closed }

// Open elements are default element that can take children 
// and have both a start tag and an end tag
// Ex: <html lang="en"></html>
html_el_normal = _{ html_el_normal_start ~ (!html_el_normal_end ~ html_node)* ~ html_el_normal_end }
html_el_normal_start = _{ html_chevron_left ~ PUSH(html_el_name) ~ html_attr* ~ html_chevron_right}
html_el_normal_end = _{ html_chevron_left_closed ~ POP ~ html_chevron_right}

// Raw text elements are elements with text/script content that
// might interfere with the normal html syntax
html_el_raw_text_name = _{ "style" | "script" }
html_el_raw_text = _{ html_el_raw_text_start ~ (!html_el_raw_text_end ~ ANY)* ~ html_el_raw_text_end }
html_el_raw_text_start = _{ html_chevron_left ~ PUSH(html_el_raw_text_name) ~ html_attr* ~ html_chevron_right}
html_el_raw_text_end = _{ html_chevron_left_closed ~ POP ~ html_chevron_right}

// XML processing instruction
// Ex: <?xml version="1.0" ?>
html_el_process_instruct = _{ html_chevron_left_question ~ "xml" ~ html_attr* ~ html_chevron_right_question }

// Catch dangling elements
// Ex: <div/></div>
html_el_dangling = _{ html_chevron_left_closed ~ html_el_name ~ html_chevron_right}

//
// SYMBOLS / CHARACTERS
//
html_text_chars = _{'a'..'z' | 'A'..'Z' | "_" | "-" | ":" |'0'..'9'}

html_chevron_left = _{ "<" }
html_chevron_left_closed = _{ "</" }
html_chevron_left_bang = _{ "<!" }
html_chevron_left_question = _{ "<?" }

html_chevron_right = _{ ">" }
html_chevron_right_closed = _{ "/>" }
html_chevron_right_question = _{ "?>" }

html_equal = _{ "=" }
html_quote_dubble = _{ "\"" }
html_quote_single = _{ "'" }
html_quote = _{ html_quote_dubble | html_quote_single }